{
  "info": {
    "title": "Payment Hub Api",
    "version": "v1"
  },
  "paths": {
    "/v1/bank-accounts": {
      "get": {
        "summary": "Lists and filters BankAccounts. Results are ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListBankAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bank_accountsListBankAccountsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The IBAN that `BankAccount`s are filtered on. Optional. Cannot be used with `bank_id_code`, `bank_id` or `account_number` filters.",
            "name": "iban",
            "in": "query",
            "required": false,
            "x-example-override": "GB29BICA12345612345678",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Bank ID Code that `BankAccount`s are filtered on. Optional. Cannot be used with the `iban` filter.",
            "name": "bank_id_code",
            "in": "query",
            "required": false,
            "x-example-override": "GBDSC",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Bank ID that `BankAccount`s are filtered on. Optional. Cannot be used with the `iban` filter.",
            "name": "bank_id",
            "in": "query",
            "required": false,
            "x-example-override": "123456",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Account Number that `BankAccount`s are filtered on. Optional. Cannot be used with the `iban` filter.",
            "name": "account_number",
            "in": "query",
            "required": false,
            "x-example-override": "12345678",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The status that `BankAccount`s are filtered on. Optional.",
            "name": "status",
            "in": "query",
            "required": false,
            "x-enum-value-descriptions": {
              "BANK_ACCOUNT_STATUS_ACTIVE": "When a `BankAccount` is ACTIVE, it is possible to route [Payments](/api/payments_hub_api/#Payments), [Scheduled Payments](/api/payments_hub_api/#Scheduled_payments) and [Direct Debits](/api/payments_hub_api/#Direct_Debits) via it. Invalid for use with Update.",
              "BANK_ACCOUNT_STATUS_INACTIVE": "When a `BankAccount` is INACTIVE, it is not possible to route [Payments](/api/payments_hub_api/#Payments), [Scheduled Payments](/api/payments_hub_api/#Scheduled_payments) or [Direct Debits](/api/payments_hub_api/#Direct_Debits) via it. This is a terminal status.",
              "BANK_ACCOUNT_STATUS_UNKNOWN": "Default value. Invalid for use with Update."
            },
            "x-example-override": "BANK_ACCOUNT_STATUS_ACTIVE",
            "schema": {
              "type": "string",
              "enum": [
                "BANK_ACCOUNT_STATUS_UNKNOWN",
                "BANK_ACCOUNT_STATUS_ACTIVE",
                "BANK_ACCOUNT_STATUS_INACTIVE"
              ],
              "default": "BANK_ACCOUNT_STATUS_UNKNOWN"
            }
          },
          {
            "description": "The Core API Account ID that `BankAccount`s are filtered on. Optional.",
            "name": "account_id",
            "in": "query",
            "required": false,
            "x-example-override": "cb6be678-f6a6-4bf9-b5b7-7465b9d50cd7",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubBankAccounts"
        ],
        "x-section": "Bank Accounts",
        "x-release-info": {
          "releaseVersion": {
            "major": 2
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.bank_accounts:read"
        ]
      },
      "post": {
        "summary": "Creates a new BankAccount in the Payments Hub.",
        "operationId": "CreateBankAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bank_accountsBankAccount"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentsHubBankAccounts"
        ],
        "x-section": "Bank Accounts",
        "x-release-info": {
          "releaseVersion": {
            "major": 2
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.bank_accounts:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/bank_accountsCreateBankAccountRequest"
        }
      }
    },
    "/v1/bank-accounts/{bank_account.id}": {
      "put": {
        "summary": "Updates an existing BankAccount to set a new status.",
        "operationId": "UpdateBankAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bank_accountsBankAccount"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the `BankAccount`. This is generated by the Payments Hub on creation.",
            "name": "bank_account.id",
            "in": "path",
            "required": true,
            "x-example-override": "8b0a7e4c-4760-4cb1-a028-9af4c8f72cba",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubBankAccounts"
        ],
        "x-section": "Bank Accounts",
        "x-release-info": {
          "releaseVersion": {
            "major": 2
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.bank_accounts:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/bank_accountsUpdateBankAccountRequest"
        }
      }
    },
    "/v1/bank-accounts/{id}": {
      "get": {
        "summary": "Retrieves a BankAccount based on the BankAccount ID.",
        "operationId": "GetBankAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bank_accountsBankAccount"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the `BankAccount` that is to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "x-example-override": "0429e43a-5cc4-4154-acac-cded0b8593fd",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubBankAccounts"
        ],
        "x-section": "Bank Accounts",
        "x-release-info": {
          "releaseVersion": {
            "major": 2
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.bank_accounts:read"
        ]
      }
    },
    "/v1/bank-accounts:batchGet": {
      "get": {
        "summary": "Retrieves one or more BankAccounts based on the BankAccount ID or list of BankAccount IDs.",
        "operationId": "BatchGetBankAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bank_accountsBatchGetBankAccountsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of the `BankAccount`s associated with these IDs that are to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubBankAccounts"
        ],
        "x-section": "Bank Accounts",
        "x-release-info": {
          "releaseVersion": {
            "major": 2
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.bank_accounts:read"
        ]
      }
    },
    "/v1/claim-actions": {
      "get": {
        "summary": "Lists and filters `ClaimAction`s. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListClaimActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claim_actionsListClaimActionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The `Claim` IDs the `ClaimAction` is to be filtered on. Optional.",
            "name": "claim_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubClaimActions"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.claim_actions:read"
        ]
      }
    },
    "/v1/claim-actions/{claim_action.id}": {
      "put": {
        "summary": "Updates a `ClaimAction` with a response. A successful update will always move the `status` to RESOLVED.",
        "operationId": "UpdateClaimAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claim_actionsClaimAction"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The UUID of the `ClaimAction`, generated on creation. Output only.",
            "name": "claim_action.id",
            "in": "path",
            "required": true,
            "x-example-override": "208983c1-a7f9-49c3-a3a6-f9d727ce1db6",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubClaimActions"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.claim_actions:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/claim_actionsUpdateClaimActionRequest"
        }
      }
    },
    "/v1/claim-actions/{id}": {
      "get": {
        "summary": "Retrieves a `ClaimAction` by ID.",
        "operationId": "GetClaimAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claim_actionsClaimAction"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the `ClaimAction` that is to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubClaimActions"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.claim_actions:read"
        ]
      }
    },
    "/v1/claim-actions:batchGet": {
      "get": {
        "summary": "Retrieves one or more `ClaimAction`s by `ClaimAction` ID or list of `ClaimAction` IDs.",
        "operationId": "BatchGetClaimActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claim_actionsBatchGetClaimActionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of `ClaimAction` IDs that are to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubClaimActions"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.claim_actions:read"
        ]
      }
    },
    "/v1/claim-direct-debit-associations": {
      "get": {
        "summary": "Lists and filters `ClaimDirectDebitAssociation`s. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListClaimDirectDebitAssociations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claim_direct_debit_associationListClaimDirectDebitAssociationsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The Direct Debit IDs the `ClaimDirectDebitAssociation` is to be filtered on. Optional.",
            "name": "direct_debit_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The `Claim` IDs the `ClaimDirectDebitAssociation` is to be filtered on. Optional.",
            "name": "claim_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubClaimDirectDebitAssociations"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.claim_direct_debit_associations:read"
        ]
      },
      "post": {
        "summary": "Creates a new `ClaimDirectDebitAssociation`.",
        "operationId": "CreateClaimDirectDebitAssociation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claim_direct_debit_associationClaimDirectDebitAssociation"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentsHubClaimDirectDebitAssociations"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.claim_direct_debit_associations:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/claim_direct_debit_associationCreateClaimDirectDebitAssociationRequest"
        }
      }
    },
    "/v1/claim-direct-debit-associations/{id}": {
      "get": {
        "summary": "Retrieves a `ClaimDirectDebitAssociation` by ID.",
        "operationId": "GetClaimDirectDebitAssociation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claim_direct_debit_associationClaimDirectDebitAssociation"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the `ClaimDirectDebitAssociation` that is to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubClaimDirectDebitAssociations"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.claim_direct_debit_associations:read"
        ]
      }
    },
    "/v1/claim-direct-debit-associations:batchGet": {
      "get": {
        "summary": "Retrieves one or more `ClaimDirectDebitAssociation` by `ClaimDirectDebitAssociation` ID or list of `ClaimDirectDebitAssociation` IDs.",
        "operationId": "BatchGetClaimDirectDebitAssociations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claim_direct_debit_associationBatchGetClaimDirectDebitAssociationsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of `ClaimDirectDebitAssociation` IDs that are to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubClaimDirectDebitAssociations"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.claim_direct_debit_associations:read"
        ]
      }
    },
    "/v1/claim-reversal-actions": {
      "get": {
        "summary": "Lists and filters `ClaimReversalAction`s. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListClaimReversalActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claim_reversal_actionsListClaimReversalActionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The `ClaimReversal` IDs the `ClaimReversalAction` is to be filtered on.",
            "name": "claim_reversal_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubClaimReversalActions"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.claim_reversal_actions:read"
        ]
      }
    },
    "/v1/claim-reversal-actions/{claim_reversal_action.id}": {
      "put": {
        "summary": "Updates a `ClaimReversalAction` with a response..",
        "operationId": "UpdateClaimReversalAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claim_reversal_actionsClaimReversalAction"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the `ClaimReversalAction`.",
            "name": "claim_reversal_action.id",
            "in": "path",
            "required": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubClaimReversalActions"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.claim_reversal_actions:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/claim_reversal_actionsUpdateClaimReversalActionRequest"
        }
      }
    },
    "/v1/claim-reversal-actions/{id}": {
      "get": {
        "summary": "Retrieves a `ClaimReversalAction` by ID.",
        "operationId": "GetClaimReversalAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claim_reversal_actionsClaimReversalAction"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the `ClaimReversalAction` that is to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubClaimReversalActions"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.claim_reversal_actions:read"
        ]
      }
    },
    "/v1/claim-reversal-actions:batchGet": {
      "get": {
        "summary": "Retrieves one or more `ClaimReversalAction`s by ID.",
        "operationId": "BatchGetClaimReversalActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claim_reversal_actionsBatchGetClaimReversalActionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of `ClaimReversalAction` IDs that are to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubClaimReversalActions"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.claim_reversal_actions:read"
        ]
      }
    },
    "/v1/claim-reversals": {
      "get": {
        "summary": "Lists and filters `ClaimReversal`s. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListClaimReversals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claim_reversalsListClaimReversalsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The `Claim` IDs the `ClaimReversal` is to be filtered on.",
            "name": "claim_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubClaimReversals"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.claim_reversals:read"
        ]
      },
      "post": {
        "summary": "Creates a new `ClaimReversal`.",
        "operationId": "CreateClaimReversal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claim_reversalsClaimReversal"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentsHubClaimReversals"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.claim_reversals:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/claim_reversalsCreateClaimReversalRequest"
        }
      }
    },
    "/v1/claim-reversals/{id}": {
      "get": {
        "summary": "Retrieves a `ClaimReversal` by ID.",
        "operationId": "GetClaimReversal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claim_reversalsClaimReversal"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the `ClaimReversal` that is to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubClaimReversals"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.claim_reversals:read"
        ]
      }
    },
    "/v1/claim-reversals:batchGet": {
      "get": {
        "summary": "Retrieves one or more `ClaimReversal`s by ID.",
        "operationId": "BatchGetClaimReversals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claim_reversalsBatchGetClaimReversalsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of `ClaimReversal` IDs that are to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubClaimReversals"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.claim_reversals:read"
        ]
      }
    },
    "/v1/claims": {
      "get": {
        "summary": "Lists and filters `Claim`s. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListClaims",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claimsListClaimsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The Mandate IDs the `Claim` is to be filtered on. Optional.",
            "name": "mandate_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The Claim Reversal IDs the `Claim` is to be filtered on. Optional.",
            "name": "claim_reversal_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubClaims"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.claims:read"
        ]
      },
      "post": {
        "summary": "Creates a new `Claim` and assigns the Direct Debit scheme-specific execution plan.",
        "operationId": "CreateClaim",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claimsClaim"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentsHubClaims"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.claims:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/claimsCreateClaimRequest"
        }
      }
    },
    "/v1/claims/{claim.id}": {
      "put": {
        "summary": "Updates an existing `Claim` to set its `identifiers.clearing_system_ref` field. This reference is used when cancelling a `Claim`.",
        "operationId": "UpdateClaim",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claimsClaim"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "Unique identifier of the resource in the Payments Hub (UUID). Output only.",
            "name": "claim.id",
            "in": "path",
            "required": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubClaims"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.claims:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/claimsUpdateClaimRequest"
        }
      }
    },
    "/v1/claims/{claim_id}:initiate": {
      "post": {
        "summary": "Initiates the processing of an existing `Claim`.",
        "operationId": "InitiateClaim",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claimsInitiateClaimResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the `Claim` that is to be initiated. Required",
            "name": "claim_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubClaims"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.claims:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/claimsInitiateClaimRequest"
        }
      }
    },
    "/v1/claims/{id}": {
      "get": {
        "summary": "Retrieves a `Claim` by ID.",
        "operationId": "GetClaim",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claimsClaim"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the `Claim` that is to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubClaims"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.claims:read"
        ]
      }
    },
    "/v1/claims:batchGet": {
      "get": {
        "summary": "Retrieves one or more `Claim`s by `Claim` ID or list of `Claim` IDs.",
        "operationId": "BatchGetClaims",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/claimsBatchGetClaimsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of `Claim` IDs that are to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubClaims"
        ],
        "x-section": "Claims",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.claims:read"
        ]
      }
    },
    "/v1/direct-debit-actions": {
      "get": {
        "summary": "Lists and filters Direct Debit Actions. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListDirectDebitActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/direct_debit_actionsListDirectDebitActionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The Direct Debit ID the action is to be filtered on. Optional.",
            "name": "direct_debit_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The status the action is to be filtered on. Optional.",
            "name": "direct_debit_action_statuses",
            "in": "query",
            "required": false,
            "x-enum-value-descriptions": {
              "DIRECT_DEBIT_ACTION_STATUS_PENDING": "The direct debit action requires processing according to its type.",
              "DIRECT_DEBIT_ACTION_STATUS_RESOLVED": "The direct debit action has successfully been processed.",
              "DIRECT_DEBIT_ACTION_STATUS_UNKNOWN": "Default direct debit action status."
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "DIRECT_DEBIT_ACTION_STATUS_UNKNOWN",
                  "DIRECT_DEBIT_ACTION_STATUS_PENDING",
                  "DIRECT_DEBIT_ACTION_STATUS_RESOLVED"
                ]
              }
            }
          },
          {
            "description": "The type the action is to be filtered on. Optional.",
            "name": "direct_debit_action_types",
            "in": "query",
            "required": false,
            "x-enum-value-descriptions": {
              "DIRECT_DEBIT_ACTION_TYPE_RETRY_POSTING": "Retry posting action type.",
              "DIRECT_DEBIT_ACTION_TYPE_SCHEDULE_SETTLEMENT": "Schedule settlement action type. Direct debit settlement will occur once this action is resolved.",
              "DIRECT_DEBIT_ACTION_TYPE_SCHEME_SUBMISSION": "Scheme submission action type. Direct debit submission will occur once this action is resolved.",
              "DIRECT_DEBIT_ACTION_TYPE_UNKNOWN": "Default direct debit action type."
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "DIRECT_DEBIT_ACTION_TYPE_UNKNOWN",
                  "DIRECT_DEBIT_ACTION_TYPE_SCHEDULE_SETTLEMENT",
                  "DIRECT_DEBIT_ACTION_TYPE_SCHEME_SUBMISSION",
                  "DIRECT_DEBIT_ACTION_TYPE_RETRY_POSTING"
                ]
              }
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubDirectDebitActions"
        ],
        "x-section": "Direct Debits",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.direct_debit_actions:read"
        ]
      }
    },
    "/v1/direct-debit-actions/{direct_debit_action.id}": {
      "put": {
        "summary": "Updates a DirectDebitAction with status `SUCCESS`. Its use is only recommended for actions of type `RETRY_POSTING`.",
        "operationId": "UpdateDirectDebitAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/direct_debit_actionsDirectDebitAction"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The UUID of the DirectDebitAction, generated on creation. Required for update calls.",
            "name": "direct_debit_action.id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubDirectDebitActions"
        ],
        "x-section": "Direct Debits",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.direct_debit_actions:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/direct_debit_actionsUpdateDirectDebitActionRequest"
        }
      }
    },
    "/v1/direct-debits": {
      "get": {
        "summary": "Lists and filters Direct Debits. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListDirectDebits",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/direct_debitsListDirectDebitsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The Mandate IDs the Direct Debit is to be filtered on. Optional.",
            "name": "mandate_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The Mandate references the Direct Debit is to be filtered on. Optional.",
            "name": "mandate_references",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The Scheme IDs the Direct Debit is to be filtered on. Optional.",
            "name": "scheme_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The debitor Vault account IDs the Direct Debit is to be filtered on (for inbound direct debits). Optional.",
            "name": "debitor_account_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The creditor Vault account IDs the Direct Debit is to be filtered on (for outbound direct debits). Optional.",
            "name": "creditor_account_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The creditor Scheme IDs the Direct Debit is to be filtered on. Optional.",
            "name": "creditor_scheme_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Return Direct Debit ID the Direct Debit is to be filtered on. Optional.",
            "name": "returned_by_direct_debit_ids",
            "in": "query",
            "required": false,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 3
              },
              "changeType": "ADD_FIELD",
              "description": "Field added so client can filter on Returned by Direct Debit ID"
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The Reverse Direct Debit ID the Direct Debit is to be filtered on. Optional.",
            "name": "reversed_by_direct_debit_ids",
            "in": "query",
            "required": false,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 3
              },
              "changeType": "ADD_FIELD",
              "description": "Field added so client can filter on Reversed by Direct Debit ID"
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The Refund Claim ID the Direct Debit is to be filtered on. Optional.",
            "name": "refunded_by_claim_ids",
            "in": "query",
            "required": false,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 3
              },
              "changeType": "ADD_FIELD",
              "description": "Field added so client can filter on Refunded By Mandate ID"
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubDirectDebits"
        ],
        "x-section": "Direct Debits",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.direct_debits:read"
        ]
      },
      "post": {
        "summary": "Creates a new Direct Debit.",
        "operationId": "CreateDirectDebit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/direct_debitsDirectDebit"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentsHubDirectDebits"
        ],
        "x-section": "Direct Debits",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.direct_debits:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/direct_debitsCreateDirectDebitRequest"
        }
      }
    },
    "/v1/direct-debits/{direct_debit_id}:initiate": {
      "post": {
        "summary": "Initiates the processing of an existing Direct Debit.",
        "operationId": "InitiateDirectDebit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/direct_debitsInitiateDirectDebitResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the Direct Debit to be initiated. In order to initiate a Direct Debit, this ID must reference a previously created DirectDebit that has a `status` of DIRECT_DEBIT_STATUS_RECEIVED. Required.",
            "name": "direct_debit_id",
            "in": "path",
            "required": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubDirectDebits"
        ],
        "x-section": "Direct Debits",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.direct_debits:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/direct_debitsInitiateDirectDebitRequest"
        }
      }
    },
    "/v1/direct-debits/{id}": {
      "get": {
        "summary": "Retrieves a Direct Debit by ID.",
        "operationId": "GetDirectDebit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/direct_debitsDirectDebit"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the Direct Debit to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubDirectDebits"
        ],
        "x-section": "Direct Debits",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.direct_debits:read"
        ]
      }
    },
    "/v1/direct-debits:batchGet": {
      "get": {
        "summary": "Retrieves one or more Direct Debits by ID.",
        "operationId": "BatchGetDirectDebits",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/direct_debitsBatchGetDirectDebitsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of Direct Debit IDs to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubDirectDebits"
        ],
        "x-section": "Direct Debits",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.direct_debits:read"
        ]
      }
    },
    "/v1/file-versions": {
      "get": {
        "summary": "Lists and filters FileVersions. Results are returned ordered by `create_timestamp` (most recently created first).",
        "operationId": "ListFileVersions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filesListFileVersionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the File on which to filter FileVersions. Optional.",
            "name": "file_id",
            "in": "query",
            "required": false,
            "x-example-override": "EISCD",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The status that the FileVersion is to be filtered on. Optional.",
            "name": "status",
            "in": "query",
            "required": false,
            "x-enum-value-descriptions": {
              "FILE_VERSION_STATUS_INVALID": "The user of this File has deemed the FileVersion to be invalid.",
              "FILE_VERSION_STATUS_PENDING_VALIDATION": "The user of this File needs to validate the FileVersion.",
              "FILE_VERSION_STATUS_UNKNOWN": "Default value.",
              "FILE_VERSION_STATUS_VALID": "The user of this File has successfully validated the FileVersion."
            },
            "x-example-override": "FILE_VERSION_STATUS_VALID",
            "schema": {
              "type": "string",
              "enum": [
                "FILE_VERSION_STATUS_UNKNOWN",
                "FILE_VERSION_STATUS_PENDING_VALIDATION",
                "FILE_VERSION_STATUS_VALID",
                "FILE_VERSION_STATUS_INVALID"
              ],
              "default": "FILE_VERSION_STATUS_UNKNOWN"
            }
          },
          {
            "description": "The number of results that are to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubFiles"
        ],
        "x-section": "Files",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.file_versions:read"
        ]
      },
      "post": {
        "summary": "Creates a new FileVersion for a File in the Payments Hub.",
        "operationId": "CreateFileVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filesFileVersion"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentsHubFiles"
        ],
        "x-section": "Files",
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.file_versions:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/filesCreateFileVersionRequest"
        }
      }
    },
    "/v1/file-versions/{file_version.id}": {
      "put": {
        "summary": "Updates an existing FileVersion to set a new Status.",
        "operationId": "UpdateFileVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filesFileVersion"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The UUID of the FileVersion assigned by the Payments Hub.",
            "name": "file_version.id",
            "in": "path",
            "required": true,
            "x-example-override": "8e12d076-d867-48c0-9573-f71cfed94c43",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubFiles"
        ],
        "x-section": "Files",
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.file_versions:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/filesUpdateFileVersionRequest"
        }
      }
    },
    "/v1/file-versions/{id}": {
      "get": {
        "summary": "Retrieves a FileVersion based on the FileVersion ID.",
        "operationId": "GetFileVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filesFileVersion"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the FileVersion that is to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "x-example-override": "7e83ab1f-978e-4ce5-9500-9b58f37ffb13",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubFiles"
        ],
        "x-section": "Files",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.file_versions:read"
        ]
      }
    },
    "/v1/file-versions:batchGet": {
      "get": {
        "summary": "Retrieves one or more FileVersions based on the FileVersion ID or list of FileVersion IDs.",
        "operationId": "BatchGetFileVersions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filesBatchGetFileVersionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of FileVersion IDs that are to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubFiles"
        ],
        "x-section": "Files",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.file_versions:read"
        ]
      }
    },
    "/v1/files": {
      "get": {
        "summary": "Lists and filters Files. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListFiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filesListFilesResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The number of results that are to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubFiles"
        ],
        "x-section": "Files",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.files:read"
        ]
      },
      "post": {
        "summary": "Creates a new File in the Payments Hub.",
        "operationId": "CreateFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filesFile"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentsHubFiles"
        ],
        "x-section": "Files",
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.files:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/filesCreateFileRequest"
        }
      }
    },
    "/v1/files/{file.id}": {
      "put": {
        "summary": "Updates an existing File to use a new FileVersion.",
        "operationId": "UpdateFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filesFile"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The name of the File that is to be created. Must be unique. Required on resource creation.",
            "name": "file.id",
            "in": "path",
            "required": true,
            "x-example-override": "EISCD",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubFiles"
        ],
        "x-section": "Files",
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.files:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/filesUpdateFileRequest"
        }
      }
    },
    "/v1/files/{id}": {
      "get": {
        "summary": "Retrieves a File based on the File ID.",
        "operationId": "GetFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filesFile"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the File that is to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "x-example-override": "EISCD",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubFiles"
        ],
        "x-section": "Files",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.files:read"
        ]
      }
    },
    "/v1/files:batchGet": {
      "get": {
        "summary": "Retrieves one or more Files based on the File ID or list of File IDs.",
        "operationId": "BatchGetFiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filesBatchGetFilesResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of File IDs that are to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubFiles"
        ],
        "x-section": "Files",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.files:read"
        ]
      }
    },
    "/v1/mandate-actions": {
      "get": {
        "summary": "Lists and filters MandateActions. Results are returned ordered by descending `create_timestamp` (most recently created first)",
        "operationId": "ListMandateActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mandate_actionsListMandateActionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The MandateIDs the MandateActions are to be filtered on. Optional.",
            "name": "mandate_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The MandateRequestIDs the MandateActions are to be filtered on. Optional.",
            "name": "mandate_request_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The MandateAction statuses the MandateActions are to be filtered on. Optional.",
            "name": "statuses",
            "in": "query",
            "required": false,
            "x-enum-value-descriptions": {
              "MANDATE_ACTION_STATUS_FAILURE": "The MandateAction failed processing.",
              "MANDATE_ACTION_STATUS_PENDING": "The MandateAction requires processing according to its type.",
              "MANDATE_ACTION_STATUS_SUCCESS": "The MandateAction has successfully been processed.",
              "MANDATE_ACTION_STATUS_UNKNOWN": "Default MandateAction status."
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "MANDATE_ACTION_STATUS_UNKNOWN",
                  "MANDATE_ACTION_STATUS_PENDING",
                  "MANDATE_ACTION_STATUS_SUCCESS",
                  "MANDATE_ACTION_STATUS_FAILURE"
                ]
              }
            }
          },
          {
            "description": "The MandateAction types the MandateActions are to be filtered on. Optional.",
            "name": "types",
            "in": "query",
            "required": false,
            "x-enum-value-release-info": {
              "MANDATE_ACTION_TYPE_SCHEDULE_ACTIVATION": {
                "releaseVersion": {
                  "major": 2,
                  "minor": 5
                },
                "changeType": "ADD_ENUM_VALUE",
                "description": "Added to allow mandates to be activated at a scheduled later date"
              }
            },
            "x-enum-value-descriptions": {
              "MANDATE_ACTION_TYPE_INITIATE_MANDATE_UPDATE": "Initiate Mandate Update action type. Used to begin the Mandate update process.",
              "MANDATE_ACTION_TYPE_SCHEDULE_ACTIVATION": "Schedule activation action type.",
              "MANDATE_ACTION_TYPE_SCHEME_RETURN": "Scheme return action type.",
              "MANDATE_ACTION_TYPE_SCHEME_SUBMISSION": "Scheme submission action type.",
              "MANDATE_ACTION_TYPE_SCHEME_VALIDATION": "Scheme validation action type.",
              "MANDATE_ACTION_TYPE_UNKNOWN": "Default MandateAction type."
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "MANDATE_ACTION_TYPE_UNKNOWN",
                  "MANDATE_ACTION_TYPE_SCHEME_VALIDATION",
                  "MANDATE_ACTION_TYPE_INITIATE_MANDATE_UPDATE",
                  "MANDATE_ACTION_TYPE_SCHEME_SUBMISSION",
                  "MANDATE_ACTION_TYPE_SCHEME_RETURN",
                  "MANDATE_ACTION_TYPE_SCHEDULE_ACTIVATION"
                ]
              }
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubMandateActions"
        ],
        "x-section": "Mandates",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.mandate_actions:read"
        ]
      }
    },
    "/v1/mandate-actions/{mandate_action.id}": {
      "put": {
        "summary": "Updates a MandateAction.",
        "operationId": "UpdateMandateAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mandate_actionsMandateAction"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "Unique identifier of the MandateAction in the PaymentHub (UUID); if not provided, this is generated on creation.",
            "name": "mandate_action.id",
            "in": "path",
            "required": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubMandateActions"
        ],
        "x-section": "Mandates",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.mandate_actions:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/mandate_actionsUpdateMandateActionRequest"
        }
      }
    },
    "/v1/mandate-actions:batchGet": {
      "get": {
        "summary": "Retrieves one or more MandateActions by ID.",
        "operationId": "BatchGetMandateActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mandate_actionsBatchGetMandateActionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of MandateAction IDs to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubMandateActions"
        ],
        "x-section": "Mandates",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.mandate_actions:read"
        ]
      }
    },
    "/v1/mandates": {
      "get": {
        "summary": "Lists and filters Mandates. Results are ordered by most recently created first.",
        "operationId": "ListMandates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mandatesListMandatesResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The references the Mandate is to be filtered on. Optional.",
            "name": "references",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The Scheme IDs the Mandate is to be filtered on. Optional.",
            "name": "scheme_ids",
            "in": "query",
            "required": false,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 1
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to allow filtering on Scheme IDs"
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The Creditor Scheme IDs the Mandate is to be filtered on. Optional.",
            "name": "creditor_scheme_ids",
            "in": "query",
            "required": false,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 1
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to allow filtering on Creditor Scheme IDs"
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The Creditor Account IDs the Mandate is to be filtered on. Optional.",
            "name": "creditor_account_ids",
            "in": "query",
            "required": false,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 2
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to allow filtering on Creditor Account IDs"
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The Debitor Account IDs the Mandate is to be filtered on. Optional.",
            "name": "debitor_account_ids",
            "in": "query",
            "required": false,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 2
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to allow filtering on Debitor Account IDs"
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The Debitor Account Numbers the Mandate is to be filtered on. Optional.",
            "name": "debitor_account_numbers",
            "in": "query",
            "required": false,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 3
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to allow filtering on Debitor Account Numbers"
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The Debitor Bank IDs the Mandate is to be filtered on. Optional.",
            "name": "debitor_bank_ids",
            "in": "query",
            "required": false,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 3
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to allow filtering on Debitor Account Bank IDs"
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The Directions the Mandate is to be filtered on. Optional.",
            "name": "directions",
            "in": "query",
            "required": false,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 5
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to allow filtering on Mandate Direction"
            },
            "x-enum-value-descriptions": {
              "MANDATE_DIRECTION_INBOUND": "A Mandate whose origin is external; not Vault.",
              "MANDATE_DIRECTION_OUTBOUND": "A Mandate whose origin is Vault.",
              "MANDATE_DIRECTION_UNKNOWN": "Default value."
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "MANDATE_DIRECTION_UNKNOWN",
                  "MANDATE_DIRECTION_INBOUND",
                  "MANDATE_DIRECTION_OUTBOUND"
                ]
              }
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentHubMandates"
        ],
        "x-section": "Mandates",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.mandates:read"
        ]
      },
      "post": {
        "summary": "Creates a new Mandate.",
        "operationId": "CreateMandate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mandatesMandate"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentHubMandates"
        ],
        "x-section": "Mandates",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.mandates:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/mandatesCreateMandateRequest"
        }
      }
    },
    "/v1/mandates/{id}": {
      "get": {
        "summary": "Retrieves a Mandate by ID.",
        "operationId": "GetMandate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mandatesMandate"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the Mandate to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "x-example-override": "a9c0acc2-d256-4ee0-bcbe-3c4cb7b0265a",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentHubMandates"
        ],
        "x-section": "Mandates",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.mandates:read"
        ]
      }
    },
    "/v1/mandates/{mandate.id}:asyncUpdate": {
      "put": {
        "summary": "Updates an existing Mandate with `status` or `metadata`.",
        "operationId": "UpdateMandateAsync",
        "responses": {
          "200": {
            "description": "A successful response.",
            "x-overrides": [
              {
                "path": "response",
                "type": "#/definitions/mandatesMandate"
              }
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async_operationsAsyncOperation"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "Unique identifier of the Mandate in the PaymentHub (UUID); if not provided, this is generated on creation.",
            "name": "mandate.id",
            "in": "path",
            "required": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentHubMandates"
        ],
        "x-section": "Mandates",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.mandates:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/mandatesUpdateMandateRequest"
        }
      }
    },
    "/v1/mandates:batchGet": {
      "get": {
        "summary": "Retrieves one or more Mandates by ID.",
        "operationId": "BatchGetMandates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mandatesBatchGetMandatesResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of Mandate IDs to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentHubMandates"
        ],
        "x-section": "Mandates",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.mandates:read"
        ]
      }
    },
    "/v1/payment-actions": {
      "get": {
        "summary": "Lists and filters `PaymentAction` objects. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListPaymentActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_actionsListPaymentActionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The status the `PaymentAction`s are filtered on. Optional.",
            "name": "status",
            "in": "query",
            "required": false,
            "x-enum-value-descriptions": {
              "PAYMENT_ACTION_STATUS_PENDING": "When a `PaymentAction` is `PENDING` it requires processing according to its type.",
              "PAYMENT_ACTION_STATUS_RESOLVED": "When a `PaymentAction` is `RESOLVED` it can no longer be updated. This indicates that all side effects and work associated with the action has been completed and that the `response` field has been updated.",
              "PAYMENT_ACTION_STATUS_UNKNOWN": "Default value."
            },
            "x-example-override": "PAYMENT_ACTION_STATUS_PENDING",
            "schema": {
              "type": "string",
              "enum": [
                "PAYMENT_ACTION_STATUS_UNKNOWN",
                "PAYMENT_ACTION_STATUS_PENDING",
                "PAYMENT_ACTION_STATUS_RESOLVED"
              ],
              "default": "PAYMENT_ACTION_STATUS_UNKNOWN"
            }
          },
          {
            "description": "The types the `PaymentAction`s are filtered on. Optional.",
            "name": "types",
            "in": "query",
            "required": false,
            "x-enum-value-release-info": {
              "PAYMENT_ACTION_TYPE_CREATE_POSTING_INSTRUCTION_BATCH": {
                "releaseVersion": {
                  "major": 3
                },
                "changeType": "ADD_ENUM_VALUE",
                "description": "Adds a new type of Payment Action: CreatePostingInstructionBatch",
                "featureFlag": "TMV_E_288_CT_POSTING_ACTIONS"
              }
            },
            "x-enum-value-descriptions": {
              "PAYMENT_ACTION_TYPE_CREATE_POSTING_INSTRUCTION_BATCH": "Create Posting Instruction Batch PaymentAction type.",
              "PAYMENT_ACTION_TYPE_CREATE_RETURN": "Create Return PaymentAction type.",
              "PAYMENT_ACTION_TYPE_DETERMINE_REVERSAL_EXCEPTION_HANDLING_APPROACH": "Determine Reversal Exception Handling Approach PaymentAction type.",
              "PAYMENT_ACTION_TYPE_DETERMINE_REVERSAL_SETTLEMENT_DATE": "Determine Reversal Settlement Date PaymentAction type.",
              "PAYMENT_ACTION_TYPE_SCHEDULE_SETTLEMENT": "Schedule Settlement PaymentAction type.",
              "PAYMENT_ACTION_TYPE_SCHEME_ENRICHMENT": "Scheme Enrichment PaymentAction type.",
              "PAYMENT_ACTION_TYPE_SCHEME_SUBMISSION": "Scheme Submission PaymentAction type.",
              "PAYMENT_ACTION_TYPE_SCHEME_VALIDATION": "Scheme Validation PaymentAction type.",
              "PAYMENT_ACTION_TYPE_UNKNOWN": "Default value."
            },
            "x-example-override": "[\"PAYMENT_ACTION_TYPE_CREATE_RETURN\"]",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "PAYMENT_ACTION_TYPE_UNKNOWN",
                  "PAYMENT_ACTION_TYPE_SCHEDULE_SETTLEMENT",
                  "PAYMENT_ACTION_TYPE_CREATE_RETURN",
                  "PAYMENT_ACTION_TYPE_SCHEME_SUBMISSION",
                  "PAYMENT_ACTION_TYPE_SCHEME_ENRICHMENT",
                  "PAYMENT_ACTION_TYPE_SCHEME_VALIDATION",
                  "PAYMENT_ACTION_TYPE_DETERMINE_REVERSAL_SETTLEMENT_DATE",
                  "PAYMENT_ACTION_TYPE_DETERMINE_REVERSAL_EXCEPTION_HANDLING_APPROACH",
                  "PAYMENT_ACTION_TYPE_CREATE_POSTING_INSTRUCTION_BATCH"
                ]
              }
            }
          },
          {
            "description": "The `payment_ids` the `PaymentAction`s are filtered on. Optional.",
            "name": "payment_ids",
            "in": "query",
            "required": false,
            "x-example-override": "[\"3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77\"]",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The `scheme_ids` the PaymentAction is to be filtered on. Optional.",
            "name": "scheme_ids",
            "in": "query",
            "required": false,
            "x-example-override": "[\"BACS\"]",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubPaymentActions"
        ],
        "x-section": "Payments",
        "x-release-info": {
          "releaseVersion": {
            "major": 2,
            "minor": 5
          },
          "changeType": "ADD_METHOD"
        },
        "x-list-consistency-level": "BEST_EFFORT",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.payment_actions:read"
        ]
      }
    },
    "/v1/payment-actions/{id}": {
      "get": {
        "summary": "Retrieves a `PaymentAction` based on the `PaymentAction` ID.",
        "operationId": "GetPaymentAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_actionsPaymentAction"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the `PaymentAction` that is to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "x-example-override": "208983c1-a7f9-49c3-a3a6-f9d727ce1db6",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubPaymentActions"
        ],
        "x-section": "Payments",
        "x-release-info": {
          "releaseVersion": {
            "major": 2,
            "minor": 5
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.payment_actions:read"
        ]
      }
    },
    "/v1/payment-actions/{payment_action.id}": {
      "put": {
        "summary": "Updates a `PaymentAction` with a response. A successful update will always move the `status` to `RESOLVED`.",
        "operationId": "UpdatePaymentAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_actionsPaymentAction"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The UUID of the `PaymentAction`, generated on creation. Required for update requests.",
            "name": "payment_action.id",
            "in": "path",
            "required": true,
            "x-example-override": "208983c1-a7f9-49c3-a3a6-f9d727ce1db6",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubPaymentActions"
        ],
        "x-section": "Payments",
        "x-release-info": {
          "releaseVersion": {
            "major": 2,
            "minor": 5
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.payment_actions:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/payment_actionsUpdatePaymentActionRequest"
        }
      }
    },
    "/v1/payment-actions:batchGet": {
      "get": {
        "summary": "Retrieves one or more `PaymentAction`s based on the PaymentAction ID or list of `PaymentAction` IDs.",
        "operationId": "BatchGetPaymentActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_actionsBatchGetPaymentActionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of the `PaymentAction`s associated with these IDs that are to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubPaymentActions"
        ],
        "x-section": "Payments",
        "x-release-info": {
          "releaseVersion": {
            "major": 2,
            "minor": 5
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.payment_actions:read"
        ]
      }
    },
    "/v1/payment-reversals": {
      "get": {
        "summary": "Lists and filters PaymentReversal objects. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListPaymentReversals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_reversalsListPaymentReversalsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The status the PaymentReversal is to be filtered on. Optional.",
            "name": "status",
            "in": "query",
            "required": false,
            "x-enum-value-descriptions": {
              "PAYMENT_REVERSAL_STATUS_COMPLETED": "Indicates that the associated `Payment` has been reversed.",
              "PAYMENT_REVERSAL_STATUS_PAYMENT_RETURNED": "Indicates that the PaymentReversal could not be completed as the associated `Payment` has been returned.",
              "PAYMENT_REVERSAL_STATUS_PENDING": "Indicates that the PaymentReversal is matched and in progress.",
              "PAYMENT_REVERSAL_STATUS_REQUIRES_REVIEW": "Indicates that the associated `Payment` requires review.",
              "PAYMENT_REVERSAL_STATUS_UNKNOWN": "Default PaymentReversal status.",
              "PAYMENT_REVERSAL_STATUS_UNMATCHED": "Indicates that the PaymentReversal does not match an existing `Payment`."
            },
            "x-example-override": "PAYMENT_REVERSAL_STATUS_PENDING",
            "schema": {
              "type": "string",
              "enum": [
                "PAYMENT_REVERSAL_STATUS_UNKNOWN",
                "PAYMENT_REVERSAL_STATUS_PENDING",
                "PAYMENT_REVERSAL_STATUS_COMPLETED",
                "PAYMENT_REVERSAL_STATUS_UNMATCHED",
                "PAYMENT_REVERSAL_STATUS_REQUIRES_REVIEW",
                "PAYMENT_REVERSAL_STATUS_PAYMENT_RETURNED"
              ],
              "default": "PAYMENT_REVERSAL_STATUS_UNKNOWN"
            }
          },
          {
            "description": "The types the PaymentReversal is to be filtered on. Optional.",
            "name": "types",
            "in": "query",
            "required": false,
            "x-enum-value-descriptions": {
              "PAYMENT_REVERSAL_TYPE_REVERSAL_POST_SETTLEMENT": "A PaymentReversal that should be completed after the movement of funds.",
              "PAYMENT_REVERSAL_TYPE_REVERSAL_PRE_SETTLEMENT": "A PaymentReversal that should be completed, where possible, before the movement of funds. The Payments Hub will still reverse the `Payment` if settlement has already occurred.",
              "PAYMENT_REVERSAL_TYPE_UNKNOWN": "Default PaymentReversal type."
            },
            "x-example-override": "[\"PAYMENT_REVERSAL_TYPE_REVERSAL_PRE_SETTLEMENT\"]",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "PAYMENT_REVERSAL_TYPE_UNKNOWN",
                  "PAYMENT_REVERSAL_TYPE_REVERSAL_PRE_SETTLEMENT",
                  "PAYMENT_REVERSAL_TYPE_REVERSAL_POST_SETTLEMENT"
                ]
              }
            }
          },
          {
            "description": "The `Payment` IDs the PaymentReversal is to be filtered on. Optional.",
            "name": "payment_ids",
            "in": "query",
            "required": false,
            "x-example-override": "[\"3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77\"]",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The `Scheme` IDs the PaymentReversal is to be filtered on. Optional.",
            "name": "scheme_ids",
            "in": "query",
            "required": false,
            "x-example-override": "[\"BACS\"]",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubPaymentReversals"
        ],
        "x-section": "Payments",
        "x-release-info": {
          "releaseVersion": {
            "major": 2,
            "minor": 5
          },
          "changeType": "ADD_METHOD"
        },
        "x-list-consistency-level": "BEST_EFFORT",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.payment_reversals:read"
        ]
      },
      "post": {
        "summary": "Creates a new PaymentReversal. The status of the created PaymentReversal depends on the status of the associated `Payment`.",
        "operationId": "CreatePaymentReversal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_reversalsPaymentReversal"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentsHubPaymentReversals"
        ],
        "x-section": "Payments",
        "x-release-info": {
          "releaseVersion": {
            "major": 2,
            "minor": 5
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.payment_reversals:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/payment_reversalsCreatePaymentReversalRequest"
        }
      }
    },
    "/v1/payment-reversals/{id}": {
      "get": {
        "summary": "Retrieves a PaymentReversal based on the PaymentReversal ID.",
        "operationId": "GetPaymentReversal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_reversalsPaymentReversal"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the PaymentReversal that is to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "x-example-override": "208983c1-a7f9-49c3-a3a6-f9d727ce1db6",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubPaymentReversals"
        ],
        "x-section": "Payments",
        "x-release-info": {
          "releaseVersion": {
            "major": 2,
            "minor": 5
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.payment_reversals:read"
        ]
      }
    },
    "/v1/payment-reversals:batchGet": {
      "get": {
        "summary": "Retrieves one or more PaymentReversals based on the PaymentReversal ID or list of PaymentReversal IDs.",
        "operationId": "BatchGetPaymentReversals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_reversalsBatchGetPaymentReversalsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of PaymentReversal IDs that are to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubPaymentReversals"
        ],
        "x-section": "Payments",
        "x-release-info": {
          "releaseVersion": {
            "major": 2,
            "minor": 5
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.payment_reversals:read"
        ]
      }
    },
    "/v1/payments": {
      "get": {
        "summary": "Lists and filters payment objects. Results are returned ordered by descending value timestamp (most recent first).",
        "operationId": "ListPayments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentsListPaymentsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The direction the payment is to be filtered on; this could be INBOUND or OUTBOUND. Optional.",
            "name": "direction",
            "in": "query",
            "required": false,
            "x-enum-value-descriptions": {
              "PAYMENT_DIRECTION_INBOUND": "A payment whose origin is external; not Vault.",
              "PAYMENT_DIRECTION_OUTBOUND": "A payment whose origin is Vault.",
              "PAYMENT_DIRECTION_UNKNOWN": "Default value."
            },
            "schema": {
              "type": "string",
              "enum": [
                "PAYMENT_DIRECTION_UNKNOWN",
                "PAYMENT_DIRECTION_INBOUND",
                "PAYMENT_DIRECTION_OUTBOUND"
              ],
              "default": "PAYMENT_DIRECTION_UNKNOWN"
            }
          },
          {
            "description": "The payment scheme to filter on; this will be the payment scheme used for the payment. Optional.",
            "name": "scheme",
            "in": "query",
            "required": false,
            "x-example-override": "FPS",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "Token of the page the results are to be retrieved from. If empty, returns the first page of results. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The `debitor_party.account_id`s (`debitor_account_id`s) of the payment to filter on. Optional.",
            "name": "debitor_account_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Scheme transaction IDs that can be used to find payments. Optional.",
            "name": "scheme_transaction_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The current statuses of the payments to filter on. Optional.",
            "name": "current_statuses",
            "in": "query",
            "required": false,
            "x-enum-value-release-info": {
              "PAYMENT_STATUS_AWAITING_SCHEME_SUBMISSION": {
                "releaseVersion": {
                  "major": 2,
                  "minor": 4
                },
                "changeType": "ADD_ENUM_VALUE",
                "description": "Value added to allow align statuses for payment flows"
              }
            },
            "x-enum-value-descriptions": {
              "PAYMENT_STATUS_AUTHORISED": "A payment is AUTHORISED once the check to verify if the account can receive/send the funds has been successfully run and the Auth postings have been accepted.",
              "PAYMENT_STATUS_AWAITING_AUTHORISATION": "A payment is AWAITING AUTHORISATION once its authorisation postings have been submitted to the Postings API. Payments Hub then waits for a response from the Postings API for these postings.",
              "PAYMENT_STATUS_AWAITING_HARD_SETTLEMENT": "A payment is AWAITING HARD SETTLEMENT once its hard settlement postings have been submitted to the Postings API and Payments Hub is awaiting a response.",
              "PAYMENT_STATUS_AWAITING_QUALIFIED_ACCEPTANCE": "A payment is AWAITING QUALIFIED ACCEPTANCE once postings have been submitted to the Postings API to move the funds to an exception handling account and the Payments Hub is awaiting a response.",
              "PAYMENT_STATUS_AWAITING_RELEASE": "A payment is AWAITING RELEASE once its release postings have been sent to the Postings API and Payments Hub is awaiting a response.",
              "PAYMENT_STATUS_AWAITING_REVERSAL": "A payment is AWAITING REVERSAL once postings to undo the payment have been submitted to the Postings API and Payments Hub is awaiting a response. The payment will typically be undone using release or hard settlement postings.",
              "PAYMENT_STATUS_AWAITING_SCHEDULED_SETTLEMENT": "A payment enters the AWAITING SCHEDULED SETTLEMENT status to indicate that the payment is waiting for the triggering of a given schedule in order to complete settlement. Payments that require multi-day processing will enter this state while they await the date at which the settlement processing may begin.",
              "PAYMENT_STATUS_AWAITING_SCHEME_SUBMISSION": "An OUTBOUND payment enters the AWAITING SCHEME SUBMISSION status to indicate that the payment is waiting to be submitted to the appropriate scheme. The duration a payment remains in this state is dependent on the response time for the scheme.",
              "PAYMENT_STATUS_AWAITING_SCHEME_VALIDATION": "An OUTBOUND payment enters the transient AWAITING SCHEME VALIDATION status to indicate that scheme-specific validation checks are currently being performed. Payments should not stay in this status for a prolonged period of time.",
              "PAYMENT_STATUS_AWAITING_SETTLEMENT": "A payment is AWAITING SETTLEMENT once its settlement postings have been submitted to the Postings API and Payments Hub is awaiting a response.",
              "PAYMENT_STATUS_AWAITING_UNAPPLIED_ACCOUNT_SETTLEMENT": "A cleared INBOUND payment is AWAITING UNAPPLIED ACCOUNT SETTLEMENT when it has been rejected and postings have been sent to the Postings API to place the funds in an unapplied funds account. The Payments Hub is awaiting a response at this point. The AWAITING UNAPPLIED ACCOUNT SETTLEMENT status does not get applied to an OUTBOUND payment.",
              "PAYMENT_STATUS_CANCELLED": "A payment is CANCELLED if the payment execution has been stopped. This could happen, for example, if an OUTBOUND payment cannot be validated during creation OR if the payment cannot be processed due to failed scheme validation or insufficient debitor funds.",
              "PAYMENT_STATUS_QUALIFIED_ACCEPTANCE": "An INBOUND payment can be placed into qualified acceptance; this means funds have been credited to the bank but placed in an exception handling account.",
              "PAYMENT_STATUS_RECEIVED": "A payment is RECEIVED once it has been validated and persisted in the Payments Hub.",
              "PAYMENT_STATUS_RECEIVING_MEMBER_REJECTED": "An OUTBOUND payment is RECEIVING MEMBER REJECTED when the receiving party has rejected the payment.",
              "PAYMENT_STATUS_REJECTED": "Indicates that a payment has been rejected.",
              "PAYMENT_STATUS_RETURNED": "A payment is RETURNED if it has been initially rejected and then successfully returned by a separate payment of type RETURN. A payment in this status indicates that the return payment has been completed.",
              "PAYMENT_STATUS_REVERSAL_REQUIRES_REVIEW": "If an INBOUND payment is reversed in a state from which automatic reversals are not supported, it will be given the REVERSAL REQUIRES REVIEW status. This status is a prompt that manual intervention is required to complete the reversal of the payment. It is recommended that the status of the payment is reviewed, and the ledger adjusted to reflect the reversal if required. The REVERSAL REQUIRES REVIEW status does not get applied to an OUTBOUND payment.",
              "PAYMENT_STATUS_REVERSED": "A payment may be reversed. If a payment has the status REVERSED, the reversal is complete and any movement of funds resulting from the reversal has already occurred.",
              "PAYMENT_STATUS_SETTLED": "A payment is SETTLED once the settlement postings have been accepted. Settlement is the final action of any payment process. Once settlement postings are accepted, the payment is considered SETTLED and no further action on that payment is possible/necessary.",
              "PAYMENT_STATUS_SUBMITTED": "A payment is SUBMITTED once the request to execute the payment has been submitted to the appropriate payment scheme and Payments Hub is awaiting a response.",
              "PAYMENT_STATUS_UNAPPLIED_ACCOUNT_SETTLED": "An INBOUND payment is UNAPPLIED ACCOUNT SETTLED when its funds have been placed in the unapplied funds account specified in the Payments Hub configuration. This is due to being unable to apply the funds to the customer's account for some reason. The UNAPPLIED ACCOUNT SETTLED status does not get applied to an OUTBOUND payment.",
              "PAYMENT_STATUS_UNKNOWN": "Default value."
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "PAYMENT_STATUS_UNKNOWN",
                  "PAYMENT_STATUS_RECEIVED",
                  "PAYMENT_STATUS_AWAITING_AUTHORISATION",
                  "PAYMENT_STATUS_AUTHORISED",
                  "PAYMENT_STATUS_SUBMITTED",
                  "PAYMENT_STATUS_AWAITING_SETTLEMENT",
                  "PAYMENT_STATUS_AWAITING_HARD_SETTLEMENT",
                  "PAYMENT_STATUS_AWAITING_RELEASE",
                  "PAYMENT_STATUS_REJECTED",
                  "PAYMENT_STATUS_SETTLED",
                  "PAYMENT_STATUS_RECEIVING_MEMBER_REJECTED",
                  "PAYMENT_STATUS_AWAITING_REVERSAL",
                  "PAYMENT_STATUS_REVERSED",
                  "PAYMENT_STATUS_QUALIFIED_ACCEPTANCE",
                  "PAYMENT_STATUS_AWAITING_QUALIFIED_ACCEPTANCE",
                  "PAYMENT_STATUS_CANCELLED",
                  "PAYMENT_STATUS_REVERSAL_REQUIRES_REVIEW",
                  "PAYMENT_STATUS_AWAITING_UNAPPLIED_ACCOUNT_SETTLEMENT",
                  "PAYMENT_STATUS_UNAPPLIED_ACCOUNT_SETTLED",
                  "PAYMENT_STATUS_RETURNED",
                  "PAYMENT_STATUS_AWAITING_SCHEME_VALIDATION",
                  "PAYMENT_STATUS_AWAITING_SCHEDULED_SETTLEMENT",
                  "PAYMENT_STATUS_AWAITING_SCHEME_SUBMISSION"
                ]
              }
            }
          },
          {
            "description": "The `standing_order_instruction_id` of the payment to filter on. Optional.",
            "name": "standing_order_instruction_id",
            "in": "query",
            "required": false,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The `creditor_party.account_id`s (`creditor_account_id`s) of the payment to filter on. Optional.",
            "name": "creditor_account_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentHubPayments"
        ],
        "x-section": "Payments",
        "x-list-consistency-level": "BEST_EFFORT",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.payments:read"
        ]
      },
      "post": {
        "summary": "Creates a new Payment.",
        "operationId": "CreatePayment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentsPayment"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentHubPayments"
        ],
        "x-section": "Payments",
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.payments:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/paymentsCreatePaymentRequest"
        }
      }
    },
    "/v1/payments/{payment.id}": {
      "put": {
        "summary": "Updates an existing Payment with a new target status. The Payment will then be processed accordingly. Payments with Action based Execution Plans are not supported.",
        "operationId": "UpdatePayment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentsPayment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The UUID of the payment inside Payments Hub. This will be included in any postings created as a result of the payment. Optional on resource creation; if it is not set, a UUID will be generated. Required for update calls.",
            "name": "payment.id",
            "in": "path",
            "required": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentHubPayments"
        ],
        "x-section": "Payments",
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.payments:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/paymentsUpdatePaymentRequest"
        }
      }
    },
    "/v1/payments/{payment_id}:initiate": {
      "post": {
        "summary": "Initiates the processing of an existing Payment.",
        "operationId": "InitiatePayment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentsInitiatePaymentResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the Payment to be initialised. In order to initiate a Payment, this ID must reference a previously created Payment that has a `current_status` of PAYMENT_STATUS_RECEIVED. Required.",
            "name": "payment_id",
            "in": "path",
            "required": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentHubPayments"
        ],
        "x-section": "Payments",
        "x-release-info": {
          "releaseVersion": {
            "major": 1,
            "minor": 10
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.payments:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/paymentsInitiatePaymentRequest"
        }
      }
    },
    "/v1/payments:batchGet": {
      "get": {
        "summary": "Retrieves one or more payments based on the payment ID or list of payment IDs.",
        "operationId": "BatchGetPayments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentsBatchGetPaymentsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of the payment IDs to be retrieved. Required; must be non-empty.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentHubPayments"
        ],
        "x-section": "Payments",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.payments:read"
        ]
      }
    },
    "/v1/future-payment-instruction-actions": {
      "get": {
        "summary": "Lists and filters FuturePaymentInstructionAction objects. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListFuturePaymentInstructionActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_payment_actionsListFuturePaymentInstructionActionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The statuses the FuturePaymentInstructionAction is to be filtered on. Optional.",
            "name": "statuses",
            "in": "query",
            "required": false,
            "x-enum-value-descriptions": {
              "FUTURE_PAYMENT_INSTRUCTION_ACTION_STATUS_PENDING": "The FuturePaymentInstructionAction requires processing according to its type.",
              "FUTURE_PAYMENT_INSTRUCTION_ACTION_STATUS_RESOLVED": "The FuturePaymentInstructionAction has been resolved.",
              "FUTURE_PAYMENT_INSTRUCTION_ACTION_STATUS_UNKNOWN": "Default FuturePaymentInstructionAction status."
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "FUTURE_PAYMENT_INSTRUCTION_ACTION_STATUS_UNKNOWN",
                  "FUTURE_PAYMENT_INSTRUCTION_ACTION_STATUS_PENDING",
                  "FUTURE_PAYMENT_INSTRUCTION_ACTION_STATUS_RESOLVED"
                ]
              }
            }
          },
          {
            "description": "The types the FuturePaymentInstructionAction is to be filtered on. Optional.",
            "name": "types",
            "in": "query",
            "required": false,
            "x-enum-value-descriptions": {
              "FUTURE_PAYMENT_INSTRUCTION_ACTION_TYPE_SCHEDULE_ENRICHMENT": "The FuturePaymentInstructionAction requires additional scheduling information.",
              "FUTURE_PAYMENT_INSTRUCTION_ACTION_TYPE_SCHEME_VALIDATION": "The FuturePaymentInstructionAction requires scheme validation.",
              "FUTURE_PAYMENT_INSTRUCTION_ACTION_TYPE_UNKNOWN": "Default FuturePaymentInstructionAction type."
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "FUTURE_PAYMENT_INSTRUCTION_ACTION_TYPE_UNKNOWN",
                  "FUTURE_PAYMENT_INSTRUCTION_ACTION_TYPE_SCHEME_VALIDATION",
                  "FUTURE_PAYMENT_INSTRUCTION_ACTION_TYPE_SCHEDULE_ENRICHMENT"
                ]
              }
            }
          },
          {
            "description": "The `future_payment_instruction_ids` the FuturePaymentInstructionAction is to be filtered on. Optional.",
            "name": "future_payment_instruction_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The `future_payment_instruction_request_ids` the FuturePaymentInstructionAction is to be filtered on. Optional.",
            "name": "future_payment_instruction_request_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPaymentActions"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-list-consistency-level": "BEST_EFFORT",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.future_payment_instruction_actions:read"
        ]
      }
    },
    "/v1/future-payment-instruction-actions/{future_payment_instruction_action.id}": {
      "put": {
        "summary": "Updates a FuturePaymentInstructionAction with a new status and/or `future_payment_instruction`.",
        "operationId": "UpdateFuturePaymentInstructionAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_payment_actionsFuturePaymentInstructionAction"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The UUID of the FuturePaymentInstructionAction, generated on creation. Required for update calls.",
            "name": "future_payment_instruction_action.id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPaymentActions"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.future_payment_instruction_actions:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/scheduled_payment_actionsUpdateFuturePaymentInstructionActionRequest"
        }
      }
    },
    "/v1/future-payment-instruction-actions:batchGet": {
      "get": {
        "summary": "Retrieves one or more FuturePaymentInstructionAction objects by ID.",
        "operationId": "BatchGetFuturePaymentInstructionActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_payment_actionsBatchGetFuturePaymentInstructionActionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of FuturePaymentInstructionAction IDs to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPaymentActions"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.future_payment_instruction_actions:read"
        ]
      }
    },
    "/v1/standing-order-instruction-actions": {
      "get": {
        "summary": "Lists and filters StandingOrderInstructionAction objects. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListStandingOrderInstructionActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_payment_actionsListStandingOrderInstructionActionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The statuses the StandingOrderInstructionAction is to be filtered on. Optional.",
            "name": "statuses",
            "in": "query",
            "required": false,
            "x-enum-value-descriptions": {
              "STANDING_ORDER_INSTRUCTION_ACTION_STATUS_PENDING": "The StandingOrderInstructionAction requires processing according to its type.",
              "STANDING_ORDER_INSTRUCTION_ACTION_STATUS_RESOLVED": "The StandingOrderInstructionAction has been resolved.",
              "STANDING_ORDER_INSTRUCTION_ACTION_STATUS_UNKNOWN": "Default StandingOrderInstructionAction status."
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "STANDING_ORDER_INSTRUCTION_ACTION_STATUS_UNKNOWN",
                  "STANDING_ORDER_INSTRUCTION_ACTION_STATUS_PENDING",
                  "STANDING_ORDER_INSTRUCTION_ACTION_STATUS_RESOLVED"
                ]
              }
            }
          },
          {
            "description": "The types the StandingOrderInstructionAction is to be filtered on. Optional.",
            "name": "types",
            "in": "query",
            "required": false,
            "x-enum-value-descriptions": {
              "STANDING_ORDER_INSTRUCTION_ACTION_TYPE_SCHEDULE_ENRICHMENT": "The StandingOrderInstructionAction requires additional scheduling information.",
              "STANDING_ORDER_INSTRUCTION_ACTION_TYPE_SCHEME_VALIDATION": "The StandingOrderInstructionAction requires scheme validation.",
              "STANDING_ORDER_INSTRUCTION_ACTION_TYPE_UNKNOWN": "Default StandingOrderInstructionAction type."
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "STANDING_ORDER_INSTRUCTION_ACTION_TYPE_UNKNOWN",
                  "STANDING_ORDER_INSTRUCTION_ACTION_TYPE_SCHEME_VALIDATION",
                  "STANDING_ORDER_INSTRUCTION_ACTION_TYPE_SCHEDULE_ENRICHMENT"
                ]
              }
            }
          },
          {
            "description": "The `standing_order_instruction_ids` the StandingOrderInstructionAction is to be filtered on. Optional.",
            "name": "standing_order_instruction_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The `standing_order_instruction_request_ids` the StandingOrderInstructionAction is to be filtered on. Optional.",
            "name": "standing_order_instruction_request_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPaymentActions"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-list-consistency-level": "BEST_EFFORT",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.standing_order_instruction_actions:read"
        ]
      }
    },
    "/v1/standing-order-instruction-actions/{standing_order_instruction_action.id}": {
      "put": {
        "summary": "Updates a StandingOrderInstructionAction with a new status and/or `standing_order_instruction`.",
        "operationId": "UpdateStandingOrderInstructionAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_payment_actionsStandingOrderInstructionAction"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The UUID of the StandingOrderInstructionAction, generated on creation. Required for update calls.",
            "name": "standing_order_instruction_action.id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPaymentActions"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.standing_order_instruction_actions:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/scheduled_payment_actionsUpdateStandingOrderInstructionActionRequest"
        }
      }
    },
    "/v1/standing-order-instruction-actions:batchGet": {
      "get": {
        "summary": "Retrieves one or more StandingOrderInstructionAction objects by ID.",
        "operationId": "BatchGetStandingOrderInstructionActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_payment_actionsBatchGetStandingOrderInstructionActionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of StandingOrderInstructionAction IDs to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPaymentActions"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.standing_order_instruction_actions:read"
        ]
      }
    },
    "/v1/future-payment-instruction-async-operations": {
      "get": {
        "summary": "Lists and filters FuturePaymentInstruction AsyncOperations objects. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListFuturePaymentInstructionAsyncOperations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_paymentsListFuturePaymentInstructionAsyncOperationsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "List of FuturePaymentInstruction IDs to filter AsyncOperations on. Maximum list size 50. Required.",
            "name": "future_payment_instruction_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token used to retrieve the previous page. If empty, this response is the first page.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPayments"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-list-consistency-level": "BEST_EFFORT",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.future_payment_instruction_async_operations:read"
        ]
      }
    },
    "/v1/future-payment-instructions": {
      "get": {
        "summary": "Lists and filters FuturePaymentInstruction objects. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListFuturePaymentInstructions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_paymentsListFuturePaymentInstructionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The statuses the FuturePaymentInstruction is to be filtered on. Optional.",
            "name": "statuses",
            "in": "query",
            "required": false,
            "x-enum-value-descriptions": {
              "FUTURE_PAYMENT_INSTRUCTION_STATUS_ACTIVATION_FAILED": "The future payment instruction encountered an error when attempting to be activated. No payment will be executed and no further actions are allowed on the future payment instruction.",
              "FUTURE_PAYMENT_INSTRUCTION_STATUS_ACTIVE": "The future payment instruction is in progress and a payment will be executed.",
              "FUTURE_PAYMENT_INSTRUCTION_STATUS_CANCELLED": "The future payment instruction has been cancelled by the client, no payment will be executed and no further actions are allowed on the future payment instruction.",
              "FUTURE_PAYMENT_INSTRUCTION_STATUS_COMPLETED": "The payment was executed, and no further actions are allowed on the future payment instruction.",
              "FUTURE_PAYMENT_INSTRUCTION_STATUS_FAILED": "The future payment instruction encountered an unexpected error on creation or during execution, no payment will be executed and no further actions are allowed on the future payment instruction.",
              "FUTURE_PAYMENT_INSTRUCTION_STATUS_PENDING_ACTIVATION": "The future payment instruction has been received and is in the process of being activated.",
              "FUTURE_PAYMENT_INSTRUCTION_STATUS_RECEIVED": "The future payment instruction has been received and further actions are needed to make it active.",
              "FUTURE_PAYMENT_INSTRUCTION_STATUS_UNKNOWN": "Default future payment instruction status."
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "FUTURE_PAYMENT_INSTRUCTION_STATUS_UNKNOWN",
                  "FUTURE_PAYMENT_INSTRUCTION_STATUS_RECEIVED",
                  "FUTURE_PAYMENT_INSTRUCTION_STATUS_ACTIVE",
                  "FUTURE_PAYMENT_INSTRUCTION_STATUS_CANCELLED",
                  "FUTURE_PAYMENT_INSTRUCTION_STATUS_COMPLETED",
                  "FUTURE_PAYMENT_INSTRUCTION_STATUS_FAILED",
                  "FUTURE_PAYMENT_INSTRUCTION_STATUS_PENDING_ACTIVATION",
                  "FUTURE_PAYMENT_INSTRUCTION_STATUS_ACTIVATION_FAILED"
                ]
              }
            }
          },
          {
            "description": "The `scheme_ids` the FuturePaymentInstruction is to be filtered on. Optional.",
            "name": "scheme_ids",
            "in": "query",
            "required": false,
            "x-example-override": "[\"FPS\"]",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The internal Vault debitor account IDs the FuturePaymentInstruction is to be filtered on. Optional.",
            "name": "debitor_account_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPayments"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-list-consistency-level": "BEST_EFFORT",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.future_payment_instructions:read"
        ]
      },
      "post": {
        "summary": "Creates a FuturePaymentInstruction. On successful initial validation of the field syntax and payment dates, the resource is returned with status `RECEIVED`.",
        "operationId": "CreateFuturePaymentInstruction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_paymentsFuturePaymentInstruction"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentsHubScheduledPayments"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.future_payment_instructions:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/scheduled_paymentsCreateFuturePaymentInstructionRequest"
        }
      }
    },
    "/v1/future-payment-instructions/async-operations:batchGet": {
      "get": {
        "summary": "Retrieves one or more FuturePaymentInstruction AsyncOperation objects by ID.",
        "operationId": "BatchGetFuturePaymentInstructionAsyncOperations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_paymentsBatchGetFuturePaymentInstructionAsyncOperationsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The IDs of the AsyncOperations to retrieve.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPayments"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.future_payment_instruction_async_operations:read"
        ]
      }
    },
    "/v1/future-payment-instructions/{future_payment_instruction.id}:asyncUpdate": {
      "put": {
        "summary": "Updates a FuturePaymentInstruction with a new `reference`, `payment_date`, `amount`, `status`, `currency` and/or `creditor_party`.",
        "operationId": "UpdateFuturePaymentInstructionAsync",
        "responses": {
          "200": {
            "description": "A successful response.",
            "x-overrides": [
              {
                "path": "response",
                "type": "#/definitions/scheduled_paymentsFuturePaymentInstruction"
              }
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async_operationsAsyncOperation"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The UUID of the FuturePaymentInstruction, generated on creation. Required for update calls.",
            "name": "future_payment_instruction.id",
            "in": "path",
            "required": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPayments"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.future_payment_instructions:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/scheduled_paymentsUpdateFuturePaymentInstructionRequest"
        }
      }
    },
    "/v1/future-payment-instructions/{id}": {
      "get": {
        "summary": "Retrieves a FuturePaymentInstruction object by ID.",
        "operationId": "GetFuturePaymentInstruction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_paymentsFuturePaymentInstruction"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the FuturePaymentInstruction to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPayments"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.future_payment_instructions:read"
        ]
      }
    },
    "/v1/future-payment-instructions/{id}:asyncActivate": {
      "put": {
        "summary": "Initiates the process of activating a StandingOrderInstruction. The status of the FuturePaymentInstruction will be updated to `FUTURE_PAYMENT_INSTRUCTION_STATUS_PENDING_ACTIVATION` until activation completes successfully and resolves to `FUTURE_PAYMENT_INSTRUCTION_STATUS_ACTIVE`, or fails to activate and resolves to `FUTURE_PAYMENT_INSTRUCTION_STATUS_ACTIVATION_FAILED`.",
        "operationId": "ActivateFuturePaymentInstructionAsync",
        "responses": {
          "200": {
            "description": "A successful response.",
            "x-overrides": [
              {
                "path": "response",
                "type": "#/definitions/scheduled_paymentsFuturePaymentInstruction"
              }
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async_operationsAsyncOperation"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the FuturePaymentInstruction to be activated. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPayments"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.future_payment_instructions:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/scheduled_paymentsActivateFuturePaymentInstructionRequest"
        }
      }
    },
    "/v1/future-payment-instructions:batchGet": {
      "get": {
        "summary": "Retrieves one or more FuturePaymentInstruction objects by ID.",
        "operationId": "BatchGetFuturePaymentInstructions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_paymentsBatchGetFuturePaymentInstructionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of FuturePaymentInstruction IDs to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPayments"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.future_payment_instructions:read"
        ]
      }
    },
    "/v1/standing-order-instruction-async-operations": {
      "get": {
        "summary": "Lists and filters StandingOrderInstruction AsyncOperations objects. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListStandingOrderInstructionAsyncOperations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_paymentsListStandingOrderInstructionAsyncOperationsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "List of StandingOrderInstruction IDs to filter AsyncOperations on. Maximum list size 50. Required.",
            "name": "standing_order_instruction_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPayments"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-list-consistency-level": "BEST_EFFORT",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.standing_order_instruction_async_operations:read"
        ]
      }
    },
    "/v1/standing-order-instructions": {
      "get": {
        "summary": "Lists and filters StandingOrderInstruction objects. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListStandingOrderInstructions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_paymentsListStandingOrderInstructionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The statuses the StandingOrderInstruction is to be filtered on. Optional.",
            "name": "statuses",
            "in": "query",
            "required": false,
            "x-enum-value-descriptions": {
              "STANDING_ORDER_INSTRUCTION_STATUS_ACTIVATION_FAILED": "The standing order instruction encountered an error when attempting to be activated. No payment will be executed and no further actions are allowed on the standing order instruction.",
              "STANDING_ORDER_INSTRUCTION_STATUS_ACTIVE": "The standing order instruction is in progress and payments will be executed.",
              "STANDING_ORDER_INSTRUCTION_STATUS_CANCELLED": "The standing order instruction has been cancelled by the client, no further payments will be executed and no further actions are allowed on the standing order instruction.",
              "STANDING_ORDER_INSTRUCTION_STATUS_COMPLETED": "All payments were executed, and no further actions are allowed on the standing order instruction.",
              "STANDING_ORDER_INSTRUCTION_STATUS_FAILED": "The standing order instruction encountered an unexpected error on creation or during execution, no further payments will be executed and no further actions are allowed on the standing order instruction.",
              "STANDING_ORDER_INSTRUCTION_STATUS_INACTIVE": "The standing order instruction is suspended and payments will not be executed.",
              "STANDING_ORDER_INSTRUCTION_STATUS_PENDING_ACTIVATION": "The standing order instruction has been received and is in the process of being activated.",
              "STANDING_ORDER_INSTRUCTION_STATUS_RECEIVED": "The standing order instruction has been received and further actions are needed to make it active.",
              "STANDING_ORDER_INSTRUCTION_STATUS_UNKNOWN": "Default standing order instruction status."
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "STANDING_ORDER_INSTRUCTION_STATUS_UNKNOWN",
                  "STANDING_ORDER_INSTRUCTION_STATUS_RECEIVED",
                  "STANDING_ORDER_INSTRUCTION_STATUS_ACTIVE",
                  "STANDING_ORDER_INSTRUCTION_STATUS_INACTIVE",
                  "STANDING_ORDER_INSTRUCTION_STATUS_CANCELLED",
                  "STANDING_ORDER_INSTRUCTION_STATUS_COMPLETED",
                  "STANDING_ORDER_INSTRUCTION_STATUS_FAILED",
                  "STANDING_ORDER_INSTRUCTION_STATUS_PENDING_ACTIVATION",
                  "STANDING_ORDER_INSTRUCTION_STATUS_ACTIVATION_FAILED"
                ]
              }
            }
          },
          {
            "description": "The `scheme_ids` the StandingOrderInstruction is to be filtered on. Optional.",
            "name": "scheme_ids",
            "in": "query",
            "required": false,
            "x-example-override": "[\"FPS\"]",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The internal Vault debitor account IDs the StandingOrderInstruction is to be filtered on. Optional.",
            "name": "debitor_account_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPayments"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-list-consistency-level": "BEST_EFFORT",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.standing_order_instructions:read"
        ]
      },
      "post": {
        "summary": "Creates a StandingOrderInstruction. On successful initial validation of the field syntax and payment dates, the resource is returned with status RECEIVED.",
        "operationId": "CreateStandingOrderInstruction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_paymentsStandingOrderInstruction"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentsHubScheduledPayments"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.standing_order_instructions:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/scheduled_paymentsCreateStandingOrderInstructionRequest"
        }
      }
    },
    "/v1/standing-order-instructions/async-operations:batchGet": {
      "get": {
        "summary": "Retrieves one or more StandingOrderInstruction AsyncOperation objects by ID.",
        "operationId": "BatchGetStandingOrderInstructionAsyncOperations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_paymentsBatchGetStandingOrderInstructionAsyncOperationsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The IDs of the AsyncOperations to retrieve.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPayments"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.standing_order_instruction_async_operations:read"
        ]
      }
    },
    "/v1/standing-order-instructions/{id}": {
      "get": {
        "summary": "Retrieves a StandingOrderInstruction object by ID.",
        "operationId": "GetStandingOrderInstruction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_paymentsStandingOrderInstruction"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the StandingOrderInstruction to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPayments"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.standing_order_instructions:read"
        ]
      }
    },
    "/v1/standing-order-instructions/{id}:asyncActivate": {
      "put": {
        "summary": "Begins the process of activating a StandingOrderInstruction. The status of the StandingOrderInstruction will be updated to `STANDING_ORDER_INSTRUCTION_STATUS_PENDING_ACTIVATION` until activation completes successfully and resolves to `STANDING_ORDER_INSTRUCTION_STATUS_ACTIVE`, or fails to activate and resolves to `STANDING_ORDER_INSTRUCTION_STATUS_ACTIVATION_FAILED`.",
        "operationId": "ActivateStandingOrderInstructionAsync",
        "responses": {
          "200": {
            "description": "A successful response.",
            "x-overrides": [
              {
                "path": "response",
                "type": "#/definitions/scheduled_paymentsStandingOrderInstruction"
              }
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async_operationsAsyncOperation"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the StandingOrderInstruction to be activated. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPayments"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.standing_order_instructions:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/scheduled_paymentsActivateStandingOrderInstructionRequest"
        }
      }
    },
    "/v1/standing-order-instructions/{standing_order_instruction.id}:asyncUpdate": {
      "put": {
        "summary": "Updates a StandingOrderInstruction with a new `reference`, `schedule`, `status`, `currency` and/or `creditor_party`.",
        "operationId": "UpdateStandingOrderInstructionAsync",
        "responses": {
          "200": {
            "description": "A successful response.",
            "x-overrides": [
              {
                "path": "response",
                "type": "#/definitions/scheduled_paymentsStandingOrderInstruction"
              }
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async_operationsAsyncOperation"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The UUID of the StandingOrderInstruction, generated on creation. Required for update calls.",
            "name": "standing_order_instruction.id",
            "in": "path",
            "required": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPayments"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.standing_order_instructions:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/scheduled_paymentsUpdateStandingOrderInstructionRequest"
        }
      }
    },
    "/v1/standing-order-instructions:batchGet": {
      "get": {
        "summary": "Retrieves one or more StandingOrderInstruction objects by ID.",
        "operationId": "BatchGetStandingOrderInstructions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_paymentsBatchGetStandingOrderInstructionsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of StandingOrderInstruction IDs to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubScheduledPayments"
        ],
        "x-section": "Scheduled payments",
        "x-release-info": {
          "noticeVersion": {
            "major": 3,
            "minor": 3
          },
          "releaseVersion": {
            "major": 5
          },
          "changeType": "REMOVE_METHOD",
          "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.standing_order_instructions:read"
        ]
      }
    },
    "/v1/scheme-messages": {
      "get": {
        "summary": "Lists and filters scheme message objects. Results are returned ordered by descending create timestamp (most recent first).",
        "operationId": "ListSchemeMessages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheme_messagesListSchemeMessagesResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The Scheme that the Scheme Message is to be filtered on. Optional.",
            "name": "scheme",
            "in": "query",
            "required": false,
            "x-example-override": "FPS",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type that the Scheme Message is to be filtered on. Optional.",
            "name": "type",
            "in": "query",
            "required": false,
            "x-example-override": "973",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results that are to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentHubSchemeMessages"
        ],
        "x-section": "Scheme messages",
        "x-release-info": {
          "releaseVersion": {
            "major": 1,
            "minor": 5
          },
          "changeType": "ADD_METHOD"
        },
        "x-list-consistency-level": "BEST_EFFORT",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.scheme_messages:read"
        ]
      },
      "post": {
        "summary": "Creates a new scheme message representing a message that the central infrastructure (C.I.) of a payment scheme sends to participating members as notifications.",
        "operationId": "CreateSchemeMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheme_messagesSchemeMessage"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentHubSchemeMessages"
        ],
        "x-section": "Scheme messages",
        "x-release-info": {
          "releaseVersion": {
            "major": 1,
            "minor": 5
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.scheme_messages:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/scheme_messagesCreateSchemeMessageRequest"
        }
      }
    },
    "/v1/scheme-messages:batchGet": {
      "get": {
        "summary": "Retrieves one or more scheme messages on the scheme message ID or list of scheme messages IDs.",
        "operationId": "BatchGetSchemeMessages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheme_messagesBatchGetSchemeMessagesResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of Scheme Message IDs that are to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentHubSchemeMessages"
        ],
        "x-section": "Scheme messages",
        "x-release-info": {
          "releaseVersion": {
            "major": 1,
            "minor": 5
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.scheme_messages:read"
        ]
      }
    },
    "/v1/calendar-operation-configs": {
      "get": {
        "summary": "Lists and filters CalendarOperationConfigs. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListCalendarOperationConfigs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemesListCalendarOperationConfigsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the Core API's Calendar resource on which to filter CalendarOperationConfigs. Optional.",
            "name": "calendar_id",
            "in": "query",
            "required": false,
            "x-example-override": "BACS",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Core API's CalendarEvent resource on which to filter CalendarOperationConfigs. Optional.",
            "name": "event_name",
            "in": "query",
            "required": false,
            "x-example-override": "BACS Working Day",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubSchemes"
        ],
        "x-section": "Schemes",
        "x-release-info": {
          "releaseVersion": {
            "major": 2,
            "minor": 6
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.calendar_operation_configs:read"
        ]
      },
      "post": {
        "summary": "Creates a new CalendarOperationConfig in the Payments Hub.",
        "operationId": "CreateCalendarOperationConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemesCalendarOperationConfig"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentsHubSchemes"
        ],
        "x-section": "Schemes",
        "x-release-info": {
          "releaseVersion": {
            "major": 2,
            "minor": 6
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.calendar_operation_configs:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/schemesCreateCalendarOperationConfigRequest"
        }
      }
    },
    "/v1/calendar-operation-configs/{id}": {
      "get": {
        "summary": "Retrieves a CalendarOperationConfig based on the CalendarOperationConfig ID.",
        "operationId": "GetCalendarOperationConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemesCalendarOperationConfig"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the CalendarOperationConfig that is to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "x-example-override": "ecac6d88-f484-478f-b9f3-6318790601ed",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubSchemes"
        ],
        "x-section": "Schemes",
        "x-release-info": {
          "releaseVersion": {
            "major": 2,
            "minor": 6
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.calendar_operation_configs:read"
        ]
      }
    },
    "/v1/calendar-operation-configs:batchGet": {
      "get": {
        "summary": "Retrieves one or more CalendarOperationConfigs based on the CalendarOperationConfig ID or list of CalendarOperationConfig IDs.",
        "operationId": "BatchGetCalendarOperationConfigs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemesBatchGetCalendarOperationConfigsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of CalendarOperationConfig IDs that are to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubSchemes"
        ],
        "x-section": "Schemes",
        "x-release-info": {
          "releaseVersion": {
            "major": 2,
            "minor": 6
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.calendar_operation_configs:read"
        ]
      }
    },
    "/v1/scheme-configs": {
      "get": {
        "summary": "Lists and filters SchemeConfigs. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListSchemeConfigs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemesListSchemeConfigsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the Scheme on which to filter SchemeConfigs. Optional.",
            "name": "scheme_id",
            "in": "query",
            "required": false,
            "x-example-override": "FPS",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubSchemes"
        ],
        "x-section": "Schemes",
        "x-release-info": {
          "releaseVersion": {
            "major": 1,
            "minor": 9
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.scheme_configs:read"
        ]
      },
      "post": {
        "summary": "Creates a new SchemeConfig for a Scheme in the Payments Hub.",
        "operationId": "CreateSchemeConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemesSchemeConfig"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentsHubSchemes"
        ],
        "x-section": "Schemes",
        "x-release-info": {
          "releaseVersion": {
            "major": 1,
            "minor": 9
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.scheme_configs:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/schemesCreateSchemeConfigRequest"
        }
      }
    },
    "/v1/scheme-configs/{id}": {
      "get": {
        "summary": "Retrieves a SchemeConfig based on the SchemeConfig ID.",
        "operationId": "GetSchemeConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemesSchemeConfig"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the SchemeConfig to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "x-example-override": "eb50d810-0f4f-45d5-afa1-1ecad423db39",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubSchemes"
        ],
        "x-section": "Schemes",
        "x-release-info": {
          "releaseVersion": {
            "major": 1,
            "minor": 9
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.scheme_configs:read"
        ]
      }
    },
    "/v1/scheme-configs:batchGet": {
      "get": {
        "summary": "Retrieves one or more SchemeConfigs based on the SchemeConfig ID or list of SchemeConfig IDs.",
        "operationId": "BatchGetSchemeConfigs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemesBatchGetSchemeConfigsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of SchemeConfig IDs to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubSchemes"
        ],
        "x-section": "Schemes",
        "x-release-info": {
          "releaseVersion": {
            "major": 1,
            "minor": 9
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.scheme_configs:read"
        ]
      }
    },
    "/v1/schemes": {
      "get": {
        "summary": "Lists and filters Schemes. Results are returned ordered by descending `update_timestamp` (most recently updated first).",
        "operationId": "ListSchemes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemesListSchemesResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The status the Scheme is to be filtered on. Optional.",
            "name": "status",
            "in": "query",
            "required": false,
            "x-enum-value-descriptions": {
              "SCHEME_STATUS_ACTIVE": "Once a Scheme is ACTIVE, it is possible to create [Payments](/api/payments_hub_api/#Payments).",
              "SCHEME_STATUS_INACTIVE": "Once a Scheme is INACTIVE, it is not possible to create [Payments](/api/payments_hub_api/#Payments).",
              "SCHEME_STATUS_UNKNOWN": "Default value."
            },
            "schema": {
              "type": "string",
              "enum": [
                "SCHEME_STATUS_UNKNOWN",
                "SCHEME_STATUS_ACTIVE",
                "SCHEME_STATUS_INACTIVE"
              ],
              "default": "SCHEME_STATUS_UNKNOWN"
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubSchemes"
        ],
        "x-section": "Schemes",
        "x-release-info": {
          "releaseVersion": {
            "major": 1,
            "minor": 9
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.schemes:read"
        ]
      },
      "post": {
        "summary": "Creates a new Scheme in the Payments Hub. Upon activation of that Scheme, the Payments Hub can process Payments using that payment Scheme.",
        "operationId": "CreateScheme",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemesScheme"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentsHubSchemes"
        ],
        "x-section": "Schemes",
        "x-release-info": {
          "releaseVersion": {
            "major": 1,
            "minor": 9
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.schemes:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/schemesCreateSchemeRequest"
        }
      }
    },
    "/v1/schemes/{id}": {
      "get": {
        "summary": "Retrieves a Scheme based on the Scheme ID.",
        "operationId": "GetScheme",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemesScheme"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the Scheme to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "x-example-override": "FPS",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubSchemes"
        ],
        "x-section": "Schemes",
        "x-release-info": {
          "releaseVersion": {
            "major": 1,
            "minor": 9
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.schemes:read"
        ]
      }
    },
    "/v1/schemes/{scheme.id}": {
      "put": {
        "summary": "Updates an existing Scheme to use a new SchemeConfig or set a new status. Note that it is not possible to update both an `status` and `current_scheme_config_id` in a single request.",
        "operationId": "UpdateScheme",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemesScheme"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The name of the Scheme being created in the Payments Hub. This will be used when creating payments using this Scheme. Must be unique. Required on resource creation.",
            "name": "scheme.id",
            "in": "path",
            "required": true,
            "x-example-override": "FPS",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubSchemes"
        ],
        "x-section": "Schemes",
        "x-release-info": {
          "releaseVersion": {
            "major": 1,
            "minor": 9
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.schemes:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/schemesUpdateSchemeRequest"
        }
      }
    },
    "/v1/schemes:batchGet": {
      "get": {
        "summary": "Retrieves one or more Schemes based on the Scheme ID or list of Scheme IDs.",
        "operationId": "BatchGetSchemes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemesBatchGetSchemesResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of Scheme IDs to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubSchemes"
        ],
        "x-section": "Schemes",
        "x-release-info": {
          "releaseVersion": {
            "major": 1,
            "minor": 9
          },
          "changeType": "ADD_METHOD"
        },
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.schemes:read"
        ]
      }
    },
    "/v1/ibans:validate": {
      "post": {
        "summary": "Validates a UK IBAN that can be external to the bank and the Payments Hub. It validates the structure of the IBAN and applies the Modulo97 algorithm to catch any transcription errors. It does not validate the routability of the contained BBAN.",
        "operationId": "ValidateIBAN",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ukValidateIBANResponse"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentsHubUK"
        ],
        "x-section": "UK",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.ibans:read"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ukValidateIBANRequest"
        }
      }
    },
    "/v1/uk/bbans": {
      "get": {
        "summary": "Lists and filters BBANs. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListBBANs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ukListBBANsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The bank identifier to filter on.",
            "name": "bank_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The account number to filter on.",
            "name": "account_number",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubUK"
        ],
        "x-section": "UK",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.bbans:read"
        ]
      },
      "post": {
        "summary": "Creates a new UK BBAN in the Payments Hub.",
        "operationId": "CreateBBAN",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ukBBAN"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentsHubUK"
        ],
        "x-section": "UK",
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.bbans:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ukCreateBBANRequest"
        }
      }
    },
    "/v1/uk/bbans/{id}": {
      "get": {
        "summary": "Retrieves a BBAN based on the BBAN ID.",
        "operationId": "GetBBAN",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ukBBAN"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the BBAN to be retrieved. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "x-example-override": "13822934-1a09-4b62-952b-1cefc8c15520",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubUK"
        ],
        "x-section": "UK",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.bbans:read"
        ]
      }
    },
    "/v1/uk/bbans:batchGet": {
      "get": {
        "summary": "Retrieves one or more BBANs based on the BBAN ID or list of BBAN IDs.",
        "operationId": "BatchGetBBANs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ukBatchGetBBANsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of BBAN IDs to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubUK"
        ],
        "x-section": "UK",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.bbans:read"
        ]
      }
    },
    "/v1/uk/bbans:validate": {
      "post": {
        "summary": "Validates a UK BBAN that can be external to the bank and the Payments Hub. It applies modulus checking to verify that the combination of bank identifier and account number is valid. Optionally, this validates that the supplied bank identifier is routable for a given scheme. To use this endpoint, the Extended Industry Sort Code Directory (EISCD) and Modulus Weight Table Data files must be downloaded and hosted.",
        "operationId": "ValidateBBAN",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ukValidateBBANResponse"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentsHubUK"
        ],
        "x-section": "UK",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.bbans:read"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ukValidateBBANRequest"
        }
      }
    },
    "/v1/uk/ibans": {
      "get": {
        "summary": "Lists and filters IBANs. Results are returned ordered by descending `create_timestamp` (most recently created first).",
        "operationId": "ListIBANs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ukListIBANsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The BBAN ID to filter on. Optional.",
            "name": "bban_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The IBAN account number to filter on. Optional.",
            "name": "account_number",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of results to be listed. Required; must be non-zero. Maximum value of 100.",
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The token of the page the results are to be retrieved from. If empty, the first page of results will be returned. Optional.",
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubUK"
        ],
        "x-section": "UK",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.ibans:read"
        ]
      },
      "post": {
        "summary": "Creates a new UK IBAN in the Payments Hub.",
        "operationId": "CreateIBAN",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ukIBAN"
                }
              }
            }
          }
        },
        "tags": [
          "PaymentsHubUK"
        ],
        "x-section": "UK",
        "x-permission-scopes": [
          "payments_hub:write",
          "payments_hub.ibans:write"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ukCreateIBANRequest"
        }
      }
    },
    "/v1/uk/ibans/{id}": {
      "get": {
        "summary": "Retrieves an IBAN based on the IBAN ID.",
        "operationId": "GetIBAN",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ukIBAN"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the IBAN to be retreived. Required.",
            "name": "id",
            "in": "path",
            "required": true,
            "x-example-override": "8c843418-6106-4a4e-bf80-31d52d1575d9",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "PaymentsHubUK"
        ],
        "x-section": "UK",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.ibans:read"
        ]
      }
    },
    "/v1/uk/ibans:batchGet": {
      "get": {
        "summary": "Retrieves one or more IBANs based on the IBAN ID or list of IBAN IDs.",
        "operationId": "BatchGetIBANs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ukBatchGetIBANsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A list of IBAN IDs to be retrieved. Required.",
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "PaymentsHubUK"
        ],
        "x-section": "UK",
        "x-permission-scopes": [
          "payments_hub:read",
          "payments_hub.ibans:read"
        ]
      }
    }
  },
  "x-sections": {
    "Bank Accounts": {},
    "Claims": {
      "releaseNotes": {
        "noticeVersion": {
          "major": 3,
          "minor": 3
        },
        "releaseVersion": {
          "major": 5
        },
        "changeType": "REMOVE_SERVICE",
        "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
      }
    },
    "Direct Debits": {
      "releaseNotes": {
        "noticeVersion": {
          "major": 3,
          "minor": 3
        },
        "releaseVersion": {
          "major": 5
        },
        "changeType": "REMOVE_SERVICE",
        "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
      }
    },
    "Files": {},
    "Mandates": {
      "releaseNotes": {
        "noticeVersion": {
          "major": 3,
          "minor": 3
        },
        "releaseVersion": {
          "major": 5
        },
        "changeType": "REMOVE_SERVICE",
        "description": "Bacs via Form3 capabilities provided by the Payments Hub are deprecated."
      }
    },
    "Payments": {},
    "Scheduled payments": {
      "releaseNotes": {
        "noticeVersion": {
          "major": 3,
          "minor": 3
        },
        "releaseVersion": {
          "major": 5
        },
        "changeType": "REMOVE_SERVICE",
        "description": "Scheduled Payment capabilities provided by the Payments Hub are deprecated."
      }
    },
    "Scheme messages": {},
    "Schemes": {},
    "UK": {}
  },
  "openapi": "3.0.1",
  "components": {
    "schemas": {
      "bank_accountsBankAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the `BankAccount`. This is generated by the Payments Hub on creation.",
            "x-example-override": "8b0a7e4c-4760-4cb1-a028-9af4c8f72cba"
          },
          "target_account_token": {
            "type": "string",
            "description": "The Target Account token that this `BankAccount` points to. Required if `account_id` is not populated on creation. This will be the `token` field of a [Payment Device Link](/api/core_api/#Payment_devices-PaymentDeviceLink).",
            "x-example-override": "b377b0e6-ff67-4a78-b0d6-fa7a1dded210"
          },
          "status": {
            "$ref": "#/components/schemas/bank_accountsBankAccountStatus",
            "description": "The status of this `BankAccount`.",
            "x-example-override": "BANK_ACCOUNT_STATUS_ACTIVE"
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the `BankAccount` was created. This is generated by the Payments Hub.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating the last time the `BankAccount` was updated. This is generated by the Payments Hub.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "account_id": {
            "type": "string",
            "description": "The Core API Account ID that this `BankAccount` relates to. Required if `target_account_token` is not populated on creation.",
            "x-example-override": "cb6be678-f6a6-4bf9-b5b7-7465b9d50cd7"
          },
          "metadata": {
            "$ref": "#/components/schemas/protobufStruct",
            "title": "Metadata related to the `BankAccount`. Optional"
          },
          "migration_info": {
            "$ref": "#/components/schemas/bank_accountsMigrationInfo",
            "description": "Migration-specific information. Only populated on `BankAccount`s that have been migrated from another banking platform."
          },
          "routing_address": {
            "$ref": "#/components/schemas/bank_accountsRoutingAddress",
            "required": false
          },
          "iban": {
            "$ref": "#/components/schemas/iban",
            "required": false
          }
        }
      },
      "bank_accountsBankAccountStatus": {
        "type": "string",
        "enum": [
          "BANK_ACCOUNT_STATUS_UNKNOWN",
          "BANK_ACCOUNT_STATUS_ACTIVE",
          "BANK_ACCOUNT_STATUS_INACTIVE"
        ],
        "default": "BANK_ACCOUNT_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "BANK_ACCOUNT_STATUS_ACTIVE": "When a `BankAccount` is ACTIVE, it is possible to route [Payments](/api/payments_hub_api/#Payments), [Scheduled Payments](/api/payments_hub_api/#Scheduled_payments) and [Direct Debits](/api/payments_hub_api/#Direct_Debits) via it. Invalid for use with Update.",
          "BANK_ACCOUNT_STATUS_INACTIVE": "When a `BankAccount` is INACTIVE, it is not possible to route [Payments](/api/payments_hub_api/#Payments), [Scheduled Payments](/api/payments_hub_api/#Scheduled_payments) or [Direct Debits](/api/payments_hub_api/#Direct_Debits) via it. This is a terminal status.",
          "BANK_ACCOUNT_STATUS_UNKNOWN": "Default value. Invalid for use with Update."
        }
      },
      "bank_accountsBatchGetBankAccountsResponse": {
        "type": "object",
        "properties": {
          "bank_accounts": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/bank_accountsBankAccount"
            },
            "description": "A map of the `BankAccount` ID to the `BankAccount`."
          }
        }
      },
      "bank_accountsCreateBankAccountRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required.",
            "x-example-override": "cbb7909f-efe6-4ffd-9d87-5e225f31a1ad"
          },
          "bank_account": {
            "$ref": "#/components/schemas/bank_accountsBankAccount",
            "description": "The `BankAccount` to be created. Required.",
            "x-excluded-fields": [
              "id",
              "status",
              "create_timestamp",
              "update_timestamp",
              "migration_info"
            ]
          },
          "account_id": {
            "type": "string",
            "description": "The Account ID that a target account token will be automatically generated for. Required if `target_account_token` is not populated.",
            "x-release-info": {
              "noticeVersion": {
                "major": 2,
                "minor": 2
              },
              "releaseVersion": {
                "major": 4
              },
              "changeType": "REMOVE_FIELD",
              "description": "This field's functionality is replaced by bank_account.account_id"
            }
          }
        }
      },
      "bank_accountsListBankAccountsResponse": {
        "type": "object",
        "properties": {
          "bank_accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bank_accountsBankAccount"
            },
            "description": "A list of matching `BankAccount`s in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, the first page of results will be returned."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, the last page of results will be returned."
          }
        }
      },
      "bank_accountsMigrationInfo": {
        "type": "object",
        "properties": {
          "is_migrated": {
            "type": "boolean",
            "description": "This field indicates whether the `BankAccount` has been migrated from another platform into Vault."
          },
          "tranche_id": {
            "type": "string",
            "description": "The ID of the tranche that the `BankAccount` was migrated within."
          },
          "migration_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the `BankAccount` was migrated."
          },
          "source_resource_id": {
            "type": "string",
            "description": "The ID from the source platform of the migrated `BankAccount`."
          }
        }
      },
      "bank_accountsRoutingAddress": {
        "type": "object",
        "properties": {
          "bank_id_code": {
            "type": "string",
            "description": "The Bank ID Code identifies the country in which this `BankAccount` is located. Required if `iban` is not populated on creation.",
            "x-example-override": "GBDSC"
          },
          "bank_id": {
            "type": "string",
            "description": "The Bank ID identifies a particular bank branch. Required if `iban` is not populated on creation.",
            "x-example-override": "123456"
          },
          "account_number": {
            "type": "string",
            "description": "The Account Number identifies the account within the bank. Required if `iban` is not populated on creation.",
            "x-example-override": "12345678"
          }
        }
      },
      "bank_accountsUpdateBankAccountRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required.",
            "x-example-override": "566dc22e-9630-4e32-ba12-10f7750ca4d8"
          },
          "bank_account": {
            "$ref": "#/components/schemas/bank_accountsBankAccount",
            "description": "The `BankAccount` object to be updated. Required.",
            "x-excluded-fields": [
              "id",
              "routing_address",
              "iban",
              "target_account_token",
              "create_timestamp",
              "update_timestamp",
              "account_id",
              "metadata",
              "migration_info"
            ]
          },
          "update_mask": {
            "$ref": "#/components/schemas/protobufFieldMask",
            "description": "The field mask used to indicate which fields in the resource are to be updated. Required.",
            "x-example-override": "{\"paths\": [\"status\"]}"
          }
        }
      },
      "protobufFieldMask": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The set of field mask paths."
          }
        },
        "description": "\"paths\": [\"f.a\", \"f.b.d\"]\n\nHere `f` represents a field in some root message, `a` and `b` fields in the message found in `f`, and `d` a field found in the message in `f.b`.\n\nFields are represented by their JSON field names.\n\n   \"paths\": [\"f.field1\", \"f.field_on_f.some_field_name\"]\n\nField masks are used to specify a subset of fields that should be, or have been, modified by an update operation.\n\nField masks are JSON encoding as a string array.",
        "title": "FieldMask represents a set of symbolic field paths, for example:"
      },
      "protobufListValue": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/protobufValue"
            },
            "description": "Repeated field of dynamically typed values."
          }
        },
        "description": "`ListValue` is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue` is JSON array."
      },
      "protobufNullValue": {
        "type": "string",
        "enum": [
          "NULL_VALUE"
        ],
        "default": "NULL_VALUE",
        "description": "`NullValue` is a singleton enumeration to represent the null value for the `Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.",
        "x-enum-value-descriptions": {
          "NULL_VALUE": "Null value."
        }
      },
      "protobufStruct": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/protobufValue"
            },
            "description": "Unordered map of dynamically typed values."
          }
        },
        "description": "`Struct` represents a structured data value, consisting of fields which map to dynamically typed values. In some languages, `Struct` might be supported by a native representation. For example, in scripting languages like JS a struct is represented as an object. The details of that representation are described together with the proto support for the language.\n\nThe JSON representation for `Struct` is JSON object."
      },
      "protobufValue": {
        "type": "object",
        "properties": {
          "null_value": {
            "$ref": "#/components/schemas/protobufNullValue",
            "required": false
          },
          "number_value": {
            "$ref": "#/components/schemas/number_value",
            "required": false
          },
          "string_value": {
            "$ref": "#/components/schemas/string_value",
            "required": false
          },
          "bool_value": {
            "$ref": "#/components/schemas/bool_value",
            "required": false
          },
          "struct_value": {
            "$ref": "#/components/schemas/protobufStruct",
            "required": false
          },
          "list_value": {
            "$ref": "#/components/schemas/protobufListValue",
            "required": false
          }
        },
        "description": "`Value` represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values. A producer of value is expected to set one of that variants, absence of any variant indicates an error.\n\nThe JSON representation for `Value` is JSON value."
      },
      "claim_actionsBatchGetClaimActionsResponse": {
        "type": "object",
        "properties": {
          "claim_actions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/claim_actionsClaimAction"
            },
            "description": "A map of the `ClaimAction.id` to the `ClaimAction`."
          }
        }
      },
      "claim_actionsClaimAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the `ClaimAction`, generated on creation. Output only.",
            "x-output-only": true,
            "x-example-override": "208983c1-a7f9-49c3-a3a6-f9d727ce1db6"
          },
          "type": {
            "$ref": "#/components/schemas/claim_actionsClaimActionType",
            "description": "The type of this `ClaimAction`. Output only, as on creation the type is already defined by the provided `ClaimAction` request.",
            "x-output-only": true,
            "x-example-override": "CLAIM_ACTION_TYPE_SCHEME_VALIDATION"
          },
          "status": {
            "$ref": "#/components/schemas/claim_actionsClaimActionStatus",
            "description": "The current status of the resource. Defaults to PENDING on creation.",
            "x-output-only": true,
            "x-example-override": "CLAIM_ACTION_STATUS_PENDING"
          },
          "claim_id": {
            "type": "string",
            "description": "The ID of the `Claim` this `ClaimAction` refers to.",
            "x-create-only": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          },
          "scheme_id": {
            "type": "string",
            "description": "The Scheme ID that the `ClaimAction` belongs to. This field helps a `ClaimAction` processor to decide whether to consume or discard the message.",
            "x-create-only": true,
            "x-example-override": "BACS"
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the `ClaimAction` was created. Output only.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the last change to the `ClaimAction` occurred. Output only.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "scheme_validation": {
            "$ref": "#/components/schemas/claim_actionsClaimSchemeValidationAction",
            "required": false
          },
          "scheme_submission": {
            "$ref": "#/components/schemas/claim_actionsClaimSchemeSubmissionAction",
            "required": false
          },
          "paying_bank_validation": {
            "$ref": "#/components/schemas/claim_actionsClaimPayingBankValidationAction",
            "required": false
          },
          "scheduled_settlement": {
            "$ref": "#/components/schemas/claim_actionsClaimScheduledSettlementAction",
            "required": false
          }
        }
      },
      "claim_actionsClaimActionStatus": {
        "type": "string",
        "enum": [
          "CLAIM_ACTION_STATUS_UNKNOWN",
          "CLAIM_ACTION_STATUS_PENDING",
          "CLAIM_ACTION_STATUS_RESOLVED"
        ],
        "default": "CLAIM_ACTION_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "CLAIM_ACTION_STATUS_PENDING": "The `ClaimAction` requires processing according to its type.",
          "CLAIM_ACTION_STATUS_RESOLVED": "The `ClaimAction` has been resolved.",
          "CLAIM_ACTION_STATUS_UNKNOWN": "Default `ClaimAction` status."
        }
      },
      "claim_actionsClaimActionType": {
        "type": "string",
        "enum": [
          "CLAIM_ACTION_TYPE_UNKNOWN",
          "CLAIM_ACTION_TYPE_SCHEME_VALIDATION",
          "CLAIM_ACTION_TYPE_SCHEME_SUBMISSION",
          "CLAIM_ACTION_TYPE_PAYING_BANK_VALIDATION",
          "CLAIM_ACTION_TYPE_SCHEDULED_SETTLEMENT"
        ],
        "default": "CLAIM_ACTION_TYPE_UNKNOWN",
        "x-enum-value-release-info": {
          "CLAIM_ACTION_TYPE_SCHEDULED_SETTLEMENT": {
            "releaseVersion": {
              "major": 2,
              "minor": 6
            },
            "changeType": "ADD_ENUM_VALUE",
            "description": "Added to allow claims to be settled at a scheduled later date"
          }
        },
        "x-enum-value-descriptions": {
          "CLAIM_ACTION_TYPE_PAYING_BANK_VALIDATION": "Paying bank validation `ClaimAction` type.",
          "CLAIM_ACTION_TYPE_SCHEDULED_SETTLEMENT": "Scheduled settlement `ClaimAction` type.",
          "CLAIM_ACTION_TYPE_SCHEME_SUBMISSION": "Scheme submission `ClaimAction` type.",
          "CLAIM_ACTION_TYPE_SCHEME_VALIDATION": "Scheme validation `ClaimAction` type.",
          "CLAIM_ACTION_TYPE_UNKNOWN": "Default `ClaimAction` type."
        }
      },
      "claim_actionsClaimPayingBankValidationAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/claim_actionsClaimPayingBankValidationActionRequest",
            "x-create-only": true
          },
          "response": {
            "$ref": "#/components/schemas/claim_actionsClaimPayingBankValidationActionResponse",
            "x-update-only": true
          }
        }
      },
      "claim_actionsClaimPayingBankValidationActionRequest": {
        "type": "object",
        "properties": {
          "scheme_reason_code": {
            "type": "string",
            "description": "The scheme-specific reason for the claim."
          },
          "reference": {
            "type": "string",
            "description": "The unique reference of the claim."
          },
          "mandate_id": {
            "type": "string",
            "description": "The ID of the mandate associated with the claim."
          },
          "direct_debit_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/claim_actionsDirectDebitDetails"
            },
            "description": "Details of the Direct Debits being disputed as part of the claim."
          }
        }
      },
      "claim_actionsClaimPayingBankValidationActionResponse": {
        "type": "object",
        "properties": {
          "is_successful": {
            "type": "boolean",
            "description": "Indicates whether validation of the paying bank was successful."
          },
          "reason": {
            "type": "string",
            "description": "A human-readable reason indicating why validation of the paying bank failed. This should be empty if is_successful is true. Required if is_successful is false."
          }
        }
      },
      "claim_actionsClaimScheduledSettlementAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/claim_actionsClaimScheduledSettlementActionRequest",
            "description": "The ClaimScheduledSettlementAction request. Required on resource creation.",
            "x-create-only": true
          },
          "response": {
            "$ref": "#/components/schemas/claim_actionsClaimScheduledSettlementActionResponse",
            "description": "The ClaimScheduledSettlementAction response, set by the client resolving the `ClaimAction`.",
            "x-update-only": true
          }
        }
      },
      "claim_actionsClaimScheduledSettlementActionRequest": {
        "type": "object",
        "properties": {
          "submission_date": {
            "type": "string",
            "description": "A string representation of the date that the `Claim` was submitted to the scheme.",
            "x-example-override": "2021-01-01"
          }
        }
      },
      "claim_actionsClaimScheduledSettlementActionResponse": {
        "type": "object"
      },
      "claim_actionsClaimSchemeSubmissionAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/claim_actionsClaimSchemeSubmissionActionRequest",
            "description": "The ClaimSchemeSubmissionAction request. Required on resource creation.",
            "x-create-only": true
          },
          "response": {
            "$ref": "#/components/schemas/claim_actionsClaimSchemeSubmissionActionResponse",
            "description": "The ClaimSchemeSubmissionAction response, set by the client resolving the `ClaimAction`.",
            "x-update-only": true
          }
        }
      },
      "claim_actionsClaimSchemeSubmissionActionRequest": {
        "type": "object",
        "properties": {
          "scheme_reason_code": {
            "type": "string",
            "description": "The scheme-specific reason for the claim."
          },
          "reference": {
            "type": "string",
            "description": "The unique reference of the claim."
          },
          "mandate_reference": {
            "type": "string",
            "description": "The reference of the mandate associated with the claim."
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The create timestamp of the claim, to be used for the request_date on Form3."
          },
          "debitor_bank_scheme_id": {
            "type": "string",
            "description": "The unique ID of the paying bank within the scheme. Optional but required by Bacs."
          },
          "debitor_party": {
            "$ref": "#/components/schemas/partyParty",
            "description": "Details of the beneficiary party being credited with a refund; the debtor party of the mandate."
          },
          "creditor_party": {
            "$ref": "#/components/schemas/partyParty",
            "description": "Details of the party that originally collected the Direct Debit and is subsequently being debited the refund amount; the creditor party of the mandate."
          },
          "direct_debit_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/claim_actionsDirectDebitDetails"
            },
            "description": "Details of the Direct Debits being disputed as part of the `Claim`."
          },
          "creditor_scheme_id": {
            "type": "string",
            "description": "The unique ID of the creditor within the scheme."
          }
        }
      },
      "claim_actionsClaimSchemeSubmissionActionResponse": {
        "type": "object",
        "properties": {
          "is_successful": {
            "type": "boolean",
            "description": "Indicates whether scheme submission was successful."
          },
          "reason": {
            "type": "string",
            "description": "A human-readable reason for why scheme submission has failed. Should be empty is is_successful is true. Required if is_successful is false."
          },
          "submission_date": {
            "type": "string",
            "description": "A string representation of the date that the `Claim` was submitted to the scheme. Will not be present before a `Claim` reaches the `SUBMITTED` status.",
            "x-update-only": true,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 6
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to record date of scheme submission to help calculate date of settlement"
            }
          }
        }
      },
      "claim_actionsClaimSchemeValidationAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/claim_actionsClaimSchemeValidationActionRequest",
            "description": "The ClaimSchemeValidationAction request. Required on resource creation.",
            "x-create-only": true
          },
          "response": {
            "$ref": "#/components/schemas/claim_actionsClaimSchemeValidationActionResponse",
            "description": "The ClaimSchemeValidationAction response, set by the client resolving the `ClaimAction`.",
            "x-update-only": true
          }
        }
      },
      "claim_actionsClaimSchemeValidationActionRequest": {
        "type": "object",
        "properties": {
          "scheme_reason_code": {
            "type": "string",
            "description": "The scheme-specific reason for the claim."
          },
          "reference": {
            "type": "string",
            "description": "The unique reference of the claim."
          },
          "direct_debit_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/claim_actionsDirectDebitDetails"
            },
            "description": "Details of the Direct Debits being disputed as part of the `Claim`."
          },
          "debitor_bank_scheme_id": {
            "type": "string",
            "description": "The unique ID of the paying bank within the scheme. Optional but required by Bacs."
          }
        }
      },
      "claim_actionsClaimSchemeValidationActionResponse": {
        "type": "object",
        "properties": {
          "is_valid": {
            "type": "boolean",
            "description": "Indicates whether scheme validation has passed or failed."
          },
          "reason": {
            "type": "string",
            "description": "A human-readable reason for why scheme validation has failed. Should be empty is is_valid is true. Required if is_valid is false."
          }
        }
      },
      "claim_actionsDirectDebitDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Direct Debit that is being refunded. Only populated if the Direct Debit is present within Vault."
          },
          "amount": {
            "type": "string",
            "description": "The amount of the Direct Debit. This is an unsigned floating point number with an optional decimal point, for example, \"10.00\", \"10.1\", \"0.0123\", \"5\". It is positive and non-zero."
          },
          "currency": {
            "type": "string",
            "description": "The three-letter alphabetic currency code based on ISO 4217, for example GBP or USD."
          },
          "settlement_date": {
            "type": "string",
            "title": "A string representation of the date that the Direct Debit was settled. Format: YYYY-MM-DD",
            "x-example-override": "2020-02-20"
          }
        }
      },
      "claim_actionsListClaimActionsResponse": {
        "type": "object",
        "properties": {
          "claim_actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/claim_actionsClaimAction"
            },
            "description": "A list of matching `Claim`s in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, this is the first page of results."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, this is the last page of results."
          }
        }
      },
      "claim_actionsUpdateClaimActionRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID to ensure the request is idempotent. Required.",
            "x-example-override": "009deeb0-bd00-416b-845c-9e6b8f57ae9c"
          },
          "claim_action": {
            "$ref": "#/components/schemas/claim_actionsClaimAction",
            "description": "The `ClaimAction` that is to be updated. Required."
          },
          "update_mask": {
            "$ref": "#/components/schemas/protobufFieldMask",
            "description": "The field mask used to indicate which field in the resource is to be updated. The mask can only contain one of `scheme_validation.response`, `scheme_submission.response`, `paying_bank_validation.response`, or `scheduled_settlement.response`. Required."
          }
        }
      },
      "partyBankAccount": {
        "type": "object",
        "properties": {
          "bank_id_code": {
            "type": "string",
            "description": "The `bank_id_code` enables unique identification of a single BankAccount held by a branch of a bank. Together with the `bank_id`, these two fields enable the identification of a single account within a country. The allowed value is `GBDSC`, which identifies a `bank_id` that is a UK sort code."
          },
          "bank_id": {
            "type": "string",
            "description": "The ID of the bank branch the account is held in. If the `bank_id_code` is a GB Domestic Sort Code (GBDSC), this must be a UK sort code."
          },
          "account_number": {
            "type": "string",
            "description": "The account number."
          }
        }
      },
      "partyParty": {
        "type": "object",
        "properties": {
          "bank_account": {
            "$ref": "#/components/schemas/partyBankAccount",
            "description": "The BankAccount details associated with the Party."
          },
          "name": {
            "type": "string",
            "description": "The customer name associated with the Party."
          },
          "account_id": {
            "type": "string",
            "description": "The Party's Vault account ID. Output only.",
            "x-output-only": true
          }
        }
      },
      "claim_direct_debit_associationBatchGetClaimDirectDebitAssociationsResponse": {
        "type": "object",
        "properties": {
          "claim_direct_debit_associations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/claim_direct_debit_associationClaimDirectDebitAssociation"
            },
            "description": "A map of the `ClaimDirectDebitAssociation.id` to the `ClaimDirectDebitAssociation`."
          }
        }
      },
      "claim_direct_debit_associationClaimDirectDebitAssociation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the resource in the Payments Hub (UUID). Output only.",
            "x-output-only": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          },
          "claim_id": {
            "type": "string",
            "description": "The ID of the [Claim](/api/payments_hub_api/#Claims) in this `ClaimDirectDebitAssociation`. Required.",
            "x-create-only": true
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the `Claim` was created.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "direct_debit_id": {
            "$ref": "#/components/schemas/direct_debit_id",
            "required": false
          },
          "direct_debit_item": {
            "$ref": "#/components/schemas/claim_direct_debit_associationDirectDebitItem",
            "required": false
          }
        }
      },
      "claim_direct_debit_associationCreateClaimDirectDebitAssociationRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required."
          },
          "claim_direct_debit_association": {
            "$ref": "#/components/schemas/claim_direct_debit_associationClaimDirectDebitAssociation",
            "description": "The `ClaimDirectDebitAssociation` that is to be created. Required."
          }
        }
      },
      "claim_direct_debit_associationDirectDebitItem": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount of the Direct Debit. This is an unsigned floating point number with an optional decimal point; for example, \"10.00\", \"10.1\", \"0.0123\", \"5\". It must be positive and non-zero."
          },
          "currency": {
            "type": "string",
            "description": "The three-letter alphabetic currency code based on ISO 4217, for example GBP or USD. Required on resource creation."
          },
          "settlement_date": {
            "type": "string",
            "description": "A string representation of the date that the Direct Debit is settled. Optional. If populated, validation is performed on the YYYY-MM-DD format of this value.",
            "x-example-override": "2020-02-20"
          }
        }
      },
      "claim_direct_debit_associationListClaimDirectDebitAssociationsResponse": {
        "type": "object",
        "properties": {
          "claim_direct_debit_associations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/claim_direct_debit_associationClaimDirectDebitAssociation"
            },
            "description": "A list of matching `ClaimDirectDebitAssociation`s in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, this is the first page of results."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, this is the last page of results."
          }
        }
      },
      "claim_reversal_actionsBatchGetClaimReversalActionsResponse": {
        "type": "object",
        "properties": {
          "claim_reversal_actions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/claim_reversal_actionsClaimReversalAction"
            },
            "description": "A map of the `ClaimReversalAction.id` to the `ClaimReversalAction`."
          }
        }
      },
      "claim_reversal_actionsClaimReversalAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the `ClaimReversalAction`.",
            "x-output-only": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          },
          "type": {
            "$ref": "#/components/schemas/claim_reversal_actionsClaimReversalActionType",
            "description": "The type of this `ClaimReversalAction`. Output only, as on creation the type is already defined by the provided `ClaimReversalAction` request.",
            "x-output-only": true,
            "x-example-override": "CLAIM_REVERSAL_ACTION_TYPE_SCHEME_SUBMISSION"
          },
          "status": {
            "$ref": "#/components/schemas/claim_reversal_actionsClaimReversalActionStatus",
            "description": "The current status of the resource. Defaults to `CLAIM_REVERSAL_ACTION_STATUS_PENDING` on creation.",
            "x-output-only": true,
            "x-example-override": "CLAIM_ACTION_STATUS_PENDING"
          },
          "claim_reversal_id": {
            "type": "string",
            "description": "The ID of the `ClaimReversal` this `ClaimReversalAction` refers to."
          },
          "scheme_id": {
            "type": "string",
            "description": "The Scheme ID that the `ClaimReversalAction` belongs to. This field helps an action processor to decide whether to consume or discard the message.",
            "x-create-only": true,
            "x-example-override": "BACS"
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the `ClaimReversalAction` was created. Output only.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the last change to the `ClaimReversalAction` occurred. Output only.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "scheme_validation": {
            "$ref": "#/components/schemas/claim_reversal_actionsClaimReversalSchemeValidationAction",
            "required": false
          },
          "scheme_submission": {
            "$ref": "#/components/schemas/claim_reversal_actionsClaimReversalSchemeSubmissionAction",
            "required": false
          },
          "posting": {
            "$ref": "#/components/schemas/claim_reversal_actionsClaimReversalPostingAction",
            "required": false
          }
        }
      },
      "claim_reversal_actionsClaimReversalActionStatus": {
        "type": "string",
        "enum": [
          "CLAIM_REVERSAL_ACTION_STATUS_UNKNOWN",
          "CLAIM_REVERSAL_ACTION_STATUS_PENDING",
          "CLAIM_REVERSAL_ACTION_STATUS_RESOLVED"
        ],
        "default": "CLAIM_REVERSAL_ACTION_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "CLAIM_REVERSAL_ACTION_STATUS_PENDING": "The `ClaimReversalAction` requires processing according to its type.",
          "CLAIM_REVERSAL_ACTION_STATUS_RESOLVED": "The `ClaimReversalAction` has been resolved.",
          "CLAIM_REVERSAL_ACTION_STATUS_UNKNOWN": "Default `ClaimReversalAction` status."
        }
      },
      "claim_reversal_actionsClaimReversalActionType": {
        "type": "string",
        "enum": [
          "CLAIM_REVERSAL_ACTION_TYPE_UNKNOWN",
          "CLAIM_REVERSAL_ACTION_TYPE_SCHEME_VALIDATION",
          "CLAIM_REVERSAL_ACTION_TYPE_SCHEME_SUBMISSION",
          "CLAIM_REVERSAL_ACTION_TYPE_POSTING"
        ],
        "default": "CLAIM_REVERSAL_ACTION_TYPE_UNKNOWN",
        "x-enum-value-descriptions": {
          "CLAIM_REVERSAL_ACTION_TYPE_POSTING": "Refund posting `ClaimReversalAction` type.",
          "CLAIM_REVERSAL_ACTION_TYPE_SCHEME_SUBMISSION": "Scheme submission `ClaimReversalAction` type.",
          "CLAIM_REVERSAL_ACTION_TYPE_SCHEME_VALIDATION": "Scheme validation `ClaimReversalAction` type.",
          "CLAIM_REVERSAL_ACTION_TYPE_UNKNOWN": "Default `ClaimReversalAction` type."
        }
      },
      "claim_reversal_actionsClaimReversalPostingAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/claim_reversal_actionsClaimReversalPostingActionRequest",
            "x-create-only": true
          },
          "response": {
            "$ref": "#/components/schemas/claim_reversal_actionsClaimReversalPostingActionResponse",
            "x-update-only": true
          }
        }
      },
      "claim_reversal_actionsClaimReversalPostingActionFailureType": {
        "type": "string",
        "enum": [
          "CLAIM_REVERSAL_POSTING_ACTION_FAILURE_TYPE_UNKNOWN",
          "CLAIM_REVERSAL_POSTING_ACTION_FAILURE_TYPE_REJECTED",
          "CLAIM_REVERSAL_POSTING_ACTION_FAILURE_TYPE_POSTING_ERROR"
        ],
        "default": "CLAIM_REVERSAL_POSTING_ACTION_FAILURE_TYPE_UNKNOWN",
        "x-enum-value-descriptions": {
          "CLAIM_REVERSAL_POSTING_ACTION_FAILURE_TYPE_POSTING_ERROR": "Indicates an error was returned from the Postings API.",
          "CLAIM_REVERSAL_POSTING_ACTION_FAILURE_TYPE_REJECTED": "Indicates the postings were rejected by the Postings API.",
          "CLAIM_REVERSAL_POSTING_ACTION_FAILURE_TYPE_UNKNOWN": "Default `ClaimReversalAction` failure type."
        }
      },
      "claim_reversal_actionsClaimReversalPostingActionRequest": {
        "type": "object",
        "properties": {
          "claim_id": {
            "type": "string",
            "description": "The ID of the original `Claim` resource."
          },
          "amount": {
            "type": "string",
            "description": "The total amount of the `Claim`. This is an unsigned floating point number with an optional decimal point, for example, \"10.00\", \"10.1\", \"0.0123\", \"5\". It must be positive and non-zero."
          },
          "currency": {
            "type": "string",
            "description": "The three-letter alphabetic currency code based on ISO 4217, for example GBP or USD."
          },
          "debitor_party": {
            "$ref": "#/components/schemas/partyParty",
            "description": "Details of the beneficiary party being debited with the refund; the debtor party of the mandate."
          }
        }
      },
      "claim_reversal_actionsClaimReversalPostingActionResponse": {
        "type": "object",
        "properties": {
          "is_successful": {
            "type": "boolean",
            "description": "Indicates whether the creation of refund postings was successful."
          },
          "failure_type": {
            "$ref": "#/components/schemas/claim_reversal_actionsClaimReversalPostingActionFailureType",
            "description": "If validation was unsuccessful, this indicates whether the failure was due to an error or rejection."
          },
          "reason": {
            "type": "string",
            "description": "A human-readable reason indicating why postings failed. This must be empty if `is_successful` is `true`. Required if `is_successful` is `false`."
          }
        }
      },
      "claim_reversal_actionsClaimReversalSchemeSubmissionAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/claim_reversal_actionsClaimReversalSchemeSubmissionActionRequest",
            "x-create-only": true
          },
          "response": {
            "$ref": "#/components/schemas/claim_reversal_actionsClaimReversalSchemeSubmissionActionResponse",
            "x-update-only": true
          }
        }
      },
      "claim_reversal_actionsClaimReversalSchemeSubmissionActionRequest": {
        "type": "object",
        "properties": {
          "claim_clearing_system_ref": {
            "type": "string",
            "description": "The clearing system ID of the original `Claim`. Optional, required for Bacs scheme."
          },
          "claim_id": {
            "type": "string",
            "description": "The ID of the original `Claim` resource."
          }
        }
      },
      "claim_reversal_actionsClaimReversalSchemeSubmissionActionResponse": {
        "type": "object",
        "properties": {
          "is_successful": {
            "type": "boolean",
            "description": "Indicates whether scheme validation was successful."
          },
          "reason": {
            "type": "string",
            "description": "A human-readable reason indicating why scheme submission failed. This must be empty if `is_successful` is `true`. Required if `is_successful` is `false`."
          }
        }
      },
      "claim_reversal_actionsClaimReversalSchemeValidationAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/claim_reversal_actionsClaimReversalSchemeValidationActionRequest",
            "x-create-only": true
          },
          "response": {
            "$ref": "#/components/schemas/claim_reversal_actionsClaimReversalSchemeValidationActionResponse",
            "x-update-only": true
          }
        }
      },
      "claim_reversal_actionsClaimReversalSchemeValidationActionRequest": {
        "type": "object",
        "properties": {
          "claim_clearing_system_ref": {
            "type": "string",
            "description": "The clearing system ID of the original `Claim`. Optional, Required for Bacs scheme."
          }
        }
      },
      "claim_reversal_actionsClaimReversalSchemeValidationActionResponse": {
        "type": "object",
        "properties": {
          "is_valid": {
            "type": "boolean",
            "description": "Indicates whether validation of the paying bank was successful."
          },
          "reason": {
            "type": "string",
            "description": "A human-readable reason indicating why scheme validation failed. This must be empty if `is_valid` is `true`. Required if `is_valid` is `false`."
          }
        }
      },
      "claim_reversal_actionsListClaimReversalActionsResponse": {
        "type": "object",
        "properties": {
          "claim_reversal_actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/claim_reversal_actionsClaimReversalAction"
            },
            "description": "A list of matching `ClaimReversalAction`s in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, this is the first page of results."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, this is the last page of results."
          }
        }
      },
      "claim_reversal_actionsUpdateClaimReversalActionRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID to ensure the request is idempotent. Required.",
            "x-example-override": "009deeb0-bd00-416b-845c-9e6b8f57ae9c"
          },
          "claim_reversal_action": {
            "$ref": "#/components/schemas/claim_reversal_actionsClaimReversalAction",
            "description": "The `ClaimReversalAction` that is to be updated. Required."
          },
          "update_mask": {
            "$ref": "#/components/schemas/protobufFieldMask",
            "description": "The field mask used to indicate which fields in the resource are to be updated. Required."
          }
        }
      },
      "claim_reversalsBatchGetClaimReversalsResponse": {
        "type": "object",
        "properties": {
          "claim_reversals": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/claim_reversalsClaimReversal"
            },
            "description": "A map of the `ClaimReversal.id` to the `ClaimReversal`."
          }
        }
      },
      "claim_reversalsClaimReversal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the `ClaimReversal`.",
            "x-output-only": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          },
          "claim_id": {
            "type": "string",
            "description": "The ID of the `Claim` being reversed.",
            "x-create-only": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          },
          "scheme_id": {
            "type": "string",
            "description": "The ID of the scheme that the `Claim` belongs to.",
            "x-output-only": true,
            "x-example-override": "BACS"
          },
          "cause": {
            "$ref": "#/components/schemas/claim_reversalsClaimReversalCause",
            "description": "The cause of the creation of the `ClaimReversal`.",
            "x-create-only": true
          },
          "status": {
            "$ref": "#/components/schemas/claim_reversalsClaimReversalStatus",
            "description": "The current status of the `ClaimReversal`.",
            "x-output-only": true
          },
          "failure_type": {
            "$ref": "#/components/schemas/claim_reversalsClaimReversalFailureType",
            "description": "If the `ClaimReversal` has a status of `CLAIM_REVERSAL_STATUS_FAILED`, this indicates the reason why it failed. This field is empty if the `ClaimReversal` status is not `CLAIM_REVERSAL_STATUS_FAILED`.",
            "x-output-only": true
          },
          "failure_reason": {
            "type": "string",
            "description": "A human-readable reason why the `ClaimReversal` failed. This field is empty if the `ClaimReversal` status is not `CLAIM_REVERSAL_STATUS_FAILED`.",
            "x-output-only": true
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the `ClaimReversal` was created.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the last change to the `ClaimReversal` occurred.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          }
        }
      },
      "claim_reversalsClaimReversalCause": {
        "type": "string",
        "enum": [
          "CLAIM_REVERSAL_CAUSE_UNKNOWN",
          "CLAIM_REVERSAL_CAUSE_CLAIM_CANCELLATION",
          "CLAIM_REVERSAL_CAUSE_SCHEME_SUBMISSION_FAILURE",
          "CLAIM_REVERSAL_CAUSE_PAYING_BANK_VALIDATION_FAILURE"
        ],
        "default": "CLAIM_REVERSAL_CAUSE_UNKNOWN",
        "x-enum-value-descriptions": {
          "CLAIM_REVERSAL_CAUSE_CLAIM_CANCELLATION": "Payments Hub API clients can use this reversal reason when attempting to cancel a `Claim` that has a `RECEIVED` or `SUBMITTED` status. Only applies to outbound `Claim`s.",
          "CLAIM_REVERSAL_CAUSE_PAYING_BANK_VALIDATION_FAILURE": "This reason is exclusively reserved for Payments Hub API clients to use upon failure of `ClaimPayingBankValidationAction`. Only applies to outbound `Claim`s.",
          "CLAIM_REVERSAL_CAUSE_SCHEME_SUBMISSION_FAILURE": "This reason is exclusively reserved for Payments Hub API clients to use upon failure of `ClaimSchemeSubmissionAction`. Only applies to outbound `Claim`s.",
          "CLAIM_REVERSAL_CAUSE_UNKNOWN": "Default `ClaimReversal` cause."
        }
      },
      "claim_reversalsClaimReversalFailureType": {
        "type": "string",
        "enum": [
          "CLAIM_REVERSAL_FAILURE_TYPE_UNKNOWN",
          "CLAIM_REVERSAL_FAILURE_TYPE_SCHEME_VALIDATION",
          "CLAIM_REVERSAL_FAILURE_TYPE_SCHEME_SUBMISSION",
          "CLAIM_REVERSAL_FAILURE_TYPE_REFUND_REVERSAL"
        ],
        "default": "CLAIM_REVERSAL_FAILURE_TYPE_UNKNOWN",
        "x-enum-value-descriptions": {
          "CLAIM_REVERSAL_FAILURE_TYPE_REFUND_REVERSAL": "The `ClaimReversal` was successfully submitted to the scheme but the movement of funds from the customer's account failed.",
          "CLAIM_REVERSAL_FAILURE_TYPE_SCHEME_SUBMISSION": "The `ClaimReversal` failed to make a submission to the scheme and there was no movement of funds from the customer's account.",
          "CLAIM_REVERSAL_FAILURE_TYPE_SCHEME_VALIDATION": "The `ClaimReversal` failed validation by the scheme and there was no movement of funds from the customer's account.",
          "CLAIM_REVERSAL_FAILURE_TYPE_UNKNOWN": "Default `ClaimReversal` failure type, when no failure has occurred."
        }
      },
      "claim_reversalsClaimReversalStatus": {
        "type": "string",
        "enum": [
          "CLAIM_REVERSAL_STATUS_UNKNOWN",
          "CLAIM_REVERSAL_STATUS_RECEIVED",
          "CLAIM_REVERSAL_STATUS_VALIDATED",
          "CLAIM_REVERSAL_STATUS_SUBMITTED",
          "CLAIM_REVERSAL_STATUS_COMPLETED",
          "CLAIM_REVERSAL_STATUS_FAILED"
        ],
        "default": "CLAIM_REVERSAL_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "CLAIM_REVERSAL_STATUS_COMPLETED": "The `ClaimReversal` has been settled and applied to the `Claim`. For outbound `Claim`s, the customer refund has been reversed.",
          "CLAIM_REVERSAL_STATUS_FAILED": "The `ClaimReversal` has failed. Applies to both inbound and outbound `Claim`s.",
          "CLAIM_REVERSAL_STATUS_RECEIVED": "For inbound `Claim`s, a `ClaimReversal` has been received from the scheme. For outbound `Claim`s, a outbound `ClaimReversal` has been created by an Payments Hub API client and processing of the `ClaimReversal` is in progress.",
          "CLAIM_REVERSAL_STATUS_SUBMITTED": "The `ClaimReversal` has been submitted to the scheme. For outbound `Claims` only.",
          "CLAIM_REVERSAL_STATUS_UNKNOWN": "Default `ClaimReversal` status.",
          "CLAIM_REVERSAL_STATUS_VALIDATED": "The `ClaimReversal` has been validated. For `ClaimReversals` that required scheme submission only."
        }
      },
      "claim_reversalsCreateClaimReversalRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required."
          },
          "claim_reversal": {
            "$ref": "#/components/schemas/claim_reversalsClaimReversal",
            "description": "The `ClaimReversal` that is to be created. Required."
          }
        }
      },
      "claim_reversalsListClaimReversalsResponse": {
        "type": "object",
        "properties": {
          "claim_reversals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/claim_reversalsClaimReversal"
            },
            "description": "A list of matching `ClaimReversal`s in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, this is the first page of results."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, this is the last page of results."
          }
        }
      },
      "claimsBatchGetClaimsResponse": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/claimsClaim"
            },
            "description": "A map of the `Claim.id` to the `Claim`."
          }
        }
      },
      "claimsClaim": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the resource in the Payments Hub (UUID). Output only.",
            "x-output-only": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          },
          "mandate_id": {
            "type": "string",
            "description": "The ID of the [Mandate](/api/payments_hub_api/#Mandates) this Direct Debit belongs to. Required.",
            "x-create-only": true
          },
          "scheme_id": {
            "type": "string",
            "description": "Identifies the scheme that the `Claim` belongs to. Required on resource creation.",
            "x-create-only": true,
            "x-example-override": "BACS"
          },
          "scheme_reason_code": {
            "type": "string",
            "description": "The scheme-specific reason for the `Claim`. Optional, except for Bacs where it is required."
          },
          "reference": {
            "type": "string",
            "description": "The unique reference of the `Claim`. Optional, except for Bacs where it is required. Bacs requires the reference to start with `DDIC` followed by at least two characters, with a maximum length of 18 characters. It can contain numbers only, uppercase letters, `/`, `-` and space ` ` characters.",
            "x-example-override": "DDIC-123TBS-S3"
          },
          "debitor_bank_scheme_id": {
            "type": "string",
            "description": "The unique ID of the paying bank within the scheme. Optional.",
            "x-create-only": true
          },
          "status": {
            "$ref": "#/components/schemas/claimsClaimStatus",
            "description": "The current status of the resource.",
            "x-update-only": true
          },
          "failure_type": {
            "$ref": "#/components/schemas/claimsClaimFailureType",
            "description": "The reason for failure when the `Claim` status is FAILED.",
            "x-update-only": true
          },
          "claim_reversal_id": {
            "type": "string",
            "description": "The ID of the Claim Reversal that reverses this `Claim`. `Claim`s that have a reversal can no longer change status.",
            "x-output-only": true
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the `Claim` was created.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the last change to the `Claim` occurred.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "submission_date": {
            "type": "string",
            "description": "A string representation of the date that the `Claim` was submitted to the scheme. Will not be present before a `Claim` reaches the `SUBMITTED` status.",
            "x-update-only": true,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 6
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to record date of scheme submission to help calculate date of settlement"
            }
          },
          "identifiers": {
            "$ref": "#/components/schemas/claimsPaymentIdentifiers",
            "description": "`identifiers` provide a means of referencing a `Claim`.",
            "x-update-only": true,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 6
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to hold identifiers needed for reversals"
            }
          }
        }
      },
      "claimsClaimFailureType": {
        "type": "string",
        "enum": [
          "CLAIM_FAILURE_TYPE_UNKNOWN",
          "CLAIM_FAILURE_TYPE_SCHEME_VALIDATION",
          "CLAIM_FAILURE_TYPE_CUSTOMER_REFUND"
        ],
        "default": "CLAIM_FAILURE_TYPE_UNKNOWN",
        "x-enum-value-descriptions": {
          "CLAIM_FAILURE_TYPE_CUSTOMER_REFUND": "The customer refund postings failed or were rejected. No financial movements have been made.",
          "CLAIM_FAILURE_TYPE_SCHEME_VALIDATION": "The scheme validation action failed. No financial movements have been made."
        }
      },
      "claimsClaimStatus": {
        "type": "string",
        "enum": [
          "CLAIM_STATUS_UNKNOWN",
          "CLAIM_STATUS_RECEIVED",
          "CLAIM_STATUS_INITIATED",
          "CLAIM_STATUS_REFUNDED",
          "CLAIM_STATUS_SUBMITTED",
          "CLAIM_STATUS_SETTLED",
          "CLAIM_STATUS_FAILED"
        ],
        "default": "CLAIM_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "CLAIM_STATUS_FAILED": "The `Claim` has failed to initiate. Only applies to outbound claims.",
          "CLAIM_STATUS_INITIATED": "The `Claim` processing has been initiated. Only applies to outbound `Claim`s.",
          "CLAIM_STATUS_RECEIVED": "The `Claim` has been received from the customer and further actions are required to trigger its processing.",
          "CLAIM_STATUS_REFUNDED": "The funds have been returned to the customer. Only applies to outbound `Claim`s.",
          "CLAIM_STATUS_SETTLED": "The `Claim` has been settled. All financial movements are complete and the `Claim` can no longer be reversed.",
          "CLAIM_STATUS_SUBMITTED": "The `Claim` has been submitted to the scheme. Only applies to outbound `Claim`s.",
          "CLAIM_STATUS_UNKNOWN": "Default `Claim` status."
        }
      },
      "claimsCreateClaimRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required."
          },
          "claim": {
            "$ref": "#/components/schemas/claimsClaim",
            "description": "The `Claim` that is to be created. Required."
          }
        }
      },
      "claimsInitiateClaimRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required."
          },
          "claim_id": {
            "type": "string",
            "title": "The ID of the `Claim` that is to be initiated. Required"
          }
        }
      },
      "claimsInitiateClaimResponse": {
        "type": "object"
      },
      "claimsListClaimsResponse": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/claimsClaim"
            },
            "description": "A list of matching `Claim`s in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, this is the first page of results."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, this is the last page of results."
          }
        }
      },
      "claimsPaymentIdentifiers": {
        "type": "object",
        "properties": {
          "clearing_system_ref": {
            "type": "string",
            "description": "This provides unique identification of the instruction in the form of a reference, as assigned by a clearing system. Optional. It can only be set when a `Claim` is in the `SUBMITTED` status."
          }
        },
        "description": "`PaymentIdentifiers` provide means of referencing a payment transaction."
      },
      "claimsUpdateClaimRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID to ensure the request is idempotent. Required.",
            "x-example-override": "009deeb0-bd00-416b-845c-9e6b8f57ae9c"
          },
          "claim": {
            "$ref": "#/components/schemas/claimsClaim",
            "description": "The `Claim` that is to be updated. Required."
          },
          "update_mask": {
            "$ref": "#/components/schemas/protobufFieldMask",
            "description": "The field mask used to indicate which fields in the resource are to be updated. The only allowed field is `identifiers.clearing_system_ref`. Required."
          }
        }
      },
      "direct_debit_actionsDirectDebitAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the DirectDebitAction, generated on creation. Required for update calls."
          },
          "type": {
            "$ref": "#/components/schemas/direct_debit_actionsDirectDebitActionType",
            "description": "The type of this DirectDebitAction. Output-only as on creation the type of the Action is already defined by the payload."
          },
          "status": {
            "$ref": "#/components/schemas/direct_debit_actionsDirectDebitActionStatus",
            "description": "The current status of this DirectDebitAction. Defaults to `PENDING` on creation. Required for update calls."
          },
          "status_reason": {
            "type": "string",
            "description": "The reason for the status of the action. Indicates why the `status` is `FAILURE` or `SUCCESS`."
          },
          "direct_debit_id": {
            "type": "string",
            "description": "The ID of the DirectDebit this action refers to."
          },
          "direct_debit_request_id": {
            "type": "string",
            "description": "The request ID of the DirectDebit this action refers to. This may be used to resolve async operation which triggered this action."
          },
          "scheme_id": {
            "type": "string",
            "description": "The scheme ID of the action. This field helps the action processor to decide whether to consume or discard the message."
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the DirectDebitAction was created. Output-only.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the last change to the DirectDebitAction occurred. Output-only.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "schedule_settlement": {
            "$ref": "#/components/schemas/direct_debit_actionsDirectDebitScheduleSettlementAction",
            "required": false
          },
          "scheme_submission": {
            "$ref": "#/components/schemas/direct_debit_actionsDirectDebitSchemeSubmissionAction",
            "required": false
          },
          "retry_posting": {
            "$ref": "#/components/schemas/direct_debit_actionsDirectDebitRetryPostingAction",
            "required": false
          }
        }
      },
      "direct_debit_actionsDirectDebitActionStatus": {
        "type": "string",
        "enum": [
          "DIRECT_DEBIT_ACTION_STATUS_UNKNOWN",
          "DIRECT_DEBIT_ACTION_STATUS_PENDING",
          "DIRECT_DEBIT_ACTION_STATUS_RESOLVED"
        ],
        "default": "DIRECT_DEBIT_ACTION_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "DIRECT_DEBIT_ACTION_STATUS_PENDING": "The direct debit action requires processing according to its type.",
          "DIRECT_DEBIT_ACTION_STATUS_RESOLVED": "The direct debit action has successfully been processed.",
          "DIRECT_DEBIT_ACTION_STATUS_UNKNOWN": "Default direct debit action status."
        }
      },
      "direct_debit_actionsDirectDebitActionType": {
        "type": "string",
        "enum": [
          "DIRECT_DEBIT_ACTION_TYPE_UNKNOWN",
          "DIRECT_DEBIT_ACTION_TYPE_SCHEDULE_SETTLEMENT",
          "DIRECT_DEBIT_ACTION_TYPE_SCHEME_SUBMISSION",
          "DIRECT_DEBIT_ACTION_TYPE_RETRY_POSTING"
        ],
        "default": "DIRECT_DEBIT_ACTION_TYPE_UNKNOWN",
        "x-enum-value-descriptions": {
          "DIRECT_DEBIT_ACTION_TYPE_RETRY_POSTING": "Retry posting action type.",
          "DIRECT_DEBIT_ACTION_TYPE_SCHEDULE_SETTLEMENT": "Schedule settlement action type. Direct debit settlement will occur once this action is resolved.",
          "DIRECT_DEBIT_ACTION_TYPE_SCHEME_SUBMISSION": "Scheme submission action type. Direct debit submission will occur once this action is resolved.",
          "DIRECT_DEBIT_ACTION_TYPE_UNKNOWN": "Default direct debit action type."
        }
      },
      "direct_debit_actionsDirectDebitRetryPostingAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/direct_debit_actionsDirectDebitRetryPostingActionRequest",
            "description": "The action request. Required on resource creation."
          },
          "response": {
            "$ref": "#/components/schemas/direct_debit_actionsDirectDebitRetryPostingActionResponse",
            "description": "The action response, set by the client resolving the action."
          }
        }
      },
      "direct_debit_actionsDirectDebitRetryPostingActionRequest": {
        "type": "object"
      },
      "direct_debit_actionsDirectDebitRetryPostingActionResponse": {
        "type": "object"
      },
      "direct_debit_actionsDirectDebitScheduleSettlementAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/direct_debit_actionsDirectDebitScheduleSettlementActionRequest",
            "description": "The action request. Required on resource creation."
          },
          "response": {
            "$ref": "#/components/schemas/direct_debit_actionsDirectDebitScheduleSettlementActionResponse",
            "description": "The action response, set by the client resolving the action."
          }
        }
      },
      "direct_debit_actionsDirectDebitScheduleSettlementActionRequest": {
        "type": "object",
        "properties": {
          "settlement_date": {
            "type": "string",
            "description": "The date that a Direct Debit needs to be settled on, in YYYY-MM-DD format.",
            "x-example-override": "2020-01-01"
          }
        }
      },
      "direct_debit_actionsDirectDebitScheduleSettlementActionResponse": {
        "type": "object"
      },
      "direct_debit_actionsDirectDebitSchemeSubmissionAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/direct_debit_actionsDirectDebitSchemeSubmissionActionRequest",
            "description": "The action request. Required on resource creation."
          },
          "response": {
            "$ref": "#/components/schemas/direct_debit_actionsDirectDebitSchemeSubmissionActionResponse",
            "description": "The action response, set when resolving the action."
          }
        }
      },
      "direct_debit_actionsDirectDebitSchemeSubmissionActionRequest": {
        "type": "object",
        "properties": {
          "scheme_status_code": {
            "type": "string",
            "description": "A scheme-specific code which explains the direct debit status according to the scheme. Optional."
          },
          "pid_instruction": {
            "type": "string",
            "description": "This provides unique identification of the payment identifier instruction related to the direct debit. Used for Inbound Returns, not used for Outbound Direct Debits."
          }
        }
      },
      "direct_debit_actionsDirectDebitSchemeSubmissionActionResponse": {
        "type": "object",
        "properties": {
          "input_date": {
            "type": "string",
            "description": "This date marks the Bacs Day 1 and is equal to the day when the DD was admitted by the scheme.",
            "x-example-override": "2020-01-01"
          },
          "pid_instruction": {
            "type": "string",
            "description": "This provides unique identification of the payment identifier instruction related to the direct debit."
          },
          "status": {
            "$ref": "#/components/schemas/direct_debit_actionsDirectDebitSchemeSubmissionActionStatus",
            "description": "The status of Scheme Submission action upon resolution."
          }
        }
      },
      "direct_debit_actionsDirectDebitSchemeSubmissionActionStatus": {
        "type": "string",
        "enum": [
          "DIRECT_DEBIT_SCHEME_SUBMISSION_ACTION_STATUS_UNKNOWN",
          "DIRECT_DEBIT_SCHEME_SUBMISSION_ACTION_STATUS_ACCEPTED",
          "DIRECT_DEBIT_SCHEME_SUBMISSION_ACTION_STATUS_REJECTED"
        ],
        "default": "DIRECT_DEBIT_SCHEME_SUBMISSION_ACTION_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "DIRECT_DEBIT_SCHEME_SUBMISSION_ACTION_STATUS_ACCEPTED": "Submission succeded.",
          "DIRECT_DEBIT_SCHEME_SUBMISSION_ACTION_STATUS_REJECTED": "Submission failed.",
          "DIRECT_DEBIT_SCHEME_SUBMISSION_ACTION_STATUS_UNKNOWN": "Default value."
        }
      },
      "direct_debit_actionsListDirectDebitActionsResponse": {
        "type": "object",
        "properties": {
          "direct_debit_actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/direct_debit_actionsDirectDebitAction"
            },
            "description": "A list of matching Direct Debit Actions in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, this is the first page of results."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, this is the last page of results."
          }
        }
      },
      "direct_debit_actionsUpdateDirectDebitActionRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID to ensure the request is idempotent. Required."
          },
          "direct_debit_action": {
            "$ref": "#/components/schemas/direct_debit_actionsDirectDebitAction",
            "description": "The DirectDebitAction to be updated. Required.",
            "x-excluded-fields": [
              "type",
              "direct_debit_id",
              "direct_debit_request_id",
              "scheme_id",
              "create_timestamp",
              "update_timestamp",
              "schedule_settlement.request",
              "scheme_submission.request",
              "retry_posting.request"
            ]
          },
          "update_mask": {
            "$ref": "#/components/schemas/protobufFieldMask",
            "description": "The field mask used to indicate which fields in the resource are to be updated. The allowed fields are `status` and the DirectDebit updatable fields. Required."
          }
        }
      },
      "direct_debitsBatchGetDirectDebitsResponse": {
        "type": "object",
        "properties": {
          "direct_debits": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/direct_debitsDirectDebit"
            },
            "description": "A map of the `DirectDebit.id` to the Direct Debit."
          }
        }
      },
      "direct_debitsCreateDirectDebitRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required."
          },
          "direct_debit": {
            "$ref": "#/components/schemas/direct_debitsDirectDebit",
            "description": "The Direct Debit to be created. Required.",
            "x-excluded-fields": [
              "mandate_id",
              "debitor_party.account_id",
              "creditor_party.account_id",
              "update_timestamp",
              "returned_by_direct_debit_id",
              "reversed_by_direct_debit_id",
              "refunded_by_claim_id",
              "status_details",
              "migration_info"
            ]
          }
        }
      },
      "direct_debitsDirectDebit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the resource in the PaymentHub (UUID). Optional on resource creation; if it is not set, a UUID will be generated.",
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          },
          "scheme_id": {
            "type": "string",
            "description": "The payment [Scheme](/api/payments_hub_api/#Schemes) that the Direct Debit belongs to. The scheme must be `ACTIVE` for the resource to be created. Required on resource creation.",
            "x-example-override": "BACS"
          },
          "identifiers": {
            "$ref": "#/components/schemas/direct_debitsPaymentIdentifiers",
            "description": "Payment identifiers provides means of referencing a Direct Debit transaction."
          },
          "mandate_id": {
            "type": "string",
            "description": "The ID of the [Mandate](/api/payments_hub_api/#Mandates) this Direct Debit belongs to.",
            "x-example-override": "5c35ad08-6c81-4584-a5e3-38448a6fdb4e"
          },
          "mandate_reference": {
            "type": "string",
            "description": "The reference of the [Mandate](/api/payments_hub_api/#Mandates). This field is used during mandate validation to match a Direct Debit with an existing active mandate. Upon successful mandate resolution, `mandate_id` will be populated with the mandate ID. Required.\n\nNote that this field may not be the exact match of the actual mandate reference as some schemes support partial matching. For example, a Bacs Direct Debit collection which relates to a mandate with reference `ABCD1234` may have this field set to `ABCD1234/1-JAN`, `ABCD1234/2-FEB`, etc.",
            "x-example-override": "ABCD1234/1-JAN"
          },
          "debitor_party": {
            "$ref": "#/components/schemas/partyParty",
            "description": "The details of the party receiving the Direct Debit (the party sending the funds). Required on resource creation."
          },
          "creditor_party": {
            "$ref": "#/components/schemas/partyParty",
            "description": "The details of the party sending the Direct Debit (the party receiving the funds). Required on resource creation."
          },
          "creditor_scheme_id": {
            "type": "string",
            "description": "The unique ID of the creditor within the scheme. Required on resource creation.",
            "x-example-override": "112233"
          },
          "amount": {
            "type": "string",
            "description": "The amount of the Direct Debit. This is an unsigned floating point number with an optional decimal point, for example, \"10.00\", \"10.1\", \"0.0123\", \"5\". It must be positive and non-zero."
          },
          "currency": {
            "type": "string",
            "description": "The three-letter alphabetic currency code based on ISO 4217, for example GBP or USD. Required on resource creation."
          },
          "direction": {
            "$ref": "#/components/schemas/direct_debitsDirectDebitDirection",
            "description": "The direction of the Direct Debit. Required on resource creation.",
            "x-example-override": "DIRECT_DEBIT_DIRECTION_OUTBOUND"
          },
          "type": {
            "$ref": "#/components/schemas/direct_debitsDirectDebitType",
            "description": "The type of the Direct Debit. Required on resource creation."
          },
          "status": {
            "$ref": "#/components/schemas/direct_debitsDirectDebitStatus",
            "description": "The current status of the resource. It can be either empty or set to `RETURNED` on creation if the user wants to record returned inbound direct debits. If left empty on creation, the resource is returned with status `RECEIVED` on successful initial validation of the field syntax."
          },
          "metadata": {
            "$ref": "#/components/schemas/protobufStruct",
            "description": "Metadata related to the Direct Debit. Optional.",
            "x-third-party": "GOOGLE_PROTOBUF_STRUCT",
            "x-example-override": "{\"Example key\": \"Example value\"}"
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The logical time indicating when the Direct Debit was created. For non-migrated Direct Debits, this is the time the Direct Debit was created within Vault and it should not be manually set on mutation requests. In the case of migrated Direct Debits, the `created_timestamp` value should be set on create requests to the time that the Direct Debit was created in the legacy system, and the `migration_info.migration_timestamp` field should contain the time the Direct Debit was migrated to Vault.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the last change to the Direct Debit occurred.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "scheme_status_code": {
            "type": "string",
            "description": "A scheme-specific code whose meaning in the scheme explains the current resource status. Optional.",
            "x-example-override": "6"
          },
          "settlement_date": {
            "type": "string",
            "description": "A string representation of the date that the payment is settled. Validation is performed on the YYYY-MM-DD format of this value.",
            "x-example-override": "2020-02-20"
          },
          "status_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/direct_debitsStatusDetails"
            },
            "description": "Provides information about why the Direct Debit has a specific `status`. Optional.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 5
              },
              "changeType": "ADD_FIELD",
              "description": "Field added so client can have the reason for the Direct Debit `status`"
            }
          },
          "migration_info": {
            "$ref": "#/components/schemas/direct_debitsMigrationInfo",
            "description": "Migration information for Direct Debits that have been migrated into Vault from another platform.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 5
              },
              "changeType": "ADD_FIELD",
              "description": "Field added so client can migrate Direct Debit from legacy system"
            }
          },
          "returned_by_direct_debit_id": {
            "$ref": "#/components/schemas/returned_by_direct_debit_id",
            "required": false
          },
          "reversed_by_direct_debit_id": {
            "$ref": "#/components/schemas/reversed_by_direct_debit_id",
            "required": false
          },
          "refunded_by_claim_id": {
            "$ref": "#/components/schemas/refunded_by_claim_id",
            "required": false
          }
        }
      },
      "direct_debitsDirectDebitDirection": {
        "type": "string",
        "enum": [
          "DIRECT_DEBIT_DIRECTION_UNKNOWN",
          "DIRECT_DEBIT_DIRECTION_INBOUND",
          "DIRECT_DEBIT_DIRECTION_OUTBOUND"
        ],
        "default": "DIRECT_DEBIT_DIRECTION_UNKNOWN",
        "x-enum-value-descriptions": {
          "DIRECT_DEBIT_DIRECTION_INBOUND": "Incoming Direct Debit processed by the debitor party's bank.",
          "DIRECT_DEBIT_DIRECTION_OUTBOUND": "Outgoing Direct Debit generated by the creditor party's bank.",
          "DIRECT_DEBIT_DIRECTION_UNKNOWN": "Default Direct Debit direction."
        }
      },
      "direct_debitsDirectDebitStatus": {
        "type": "string",
        "enum": [
          "DIRECT_DEBIT_STATUS_UNKNOWN",
          "DIRECT_DEBIT_STATUS_RECEIVED",
          "DIRECT_DEBIT_STATUS_INITIATED",
          "DIRECT_DEBIT_STATUS_SUBMITTED",
          "DIRECT_DEBIT_STATUS_COMPLETED",
          "DIRECT_DEBIT_STATUS_RETURNED",
          "DIRECT_DEBIT_STATUS_CANCELLED",
          "DIRECT_DEBIT_STATUS_COMPLETED_WITH_FAILURE",
          "DIRECT_DEBIT_STATUS_COMPLETED_UNMATCHED"
        ],
        "default": "DIRECT_DEBIT_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "DIRECT_DEBIT_STATUS_CANCELLED": "The Direct Debit has been cancelled by the originator.",
          "DIRECT_DEBIT_STATUS_COMPLETED": "The Direct Debit cycle has been completed (the transaction has been accepted by the counterparty).",
          "DIRECT_DEBIT_STATUS_COMPLETED_UNMATCHED": "The Direct Debit cycle has been completed but it has not been possible to match the resource to the original Direct Debit.",
          "DIRECT_DEBIT_STATUS_COMPLETED_WITH_FAILURE": "The Direct Debit cycle has been completed but the original posting has failed so an alternative posting to a unapplied account has been made.",
          "DIRECT_DEBIT_STATUS_INITIATED": "The Direct Debit processing has been initiated.",
          "DIRECT_DEBIT_STATUS_RECEIVED": "The Direct Debit has been received and further actions are required to trigger its processing.",
          "DIRECT_DEBIT_STATUS_RETURNED": "The Direct Debit has been returned by the counterparty due to validation failure.",
          "DIRECT_DEBIT_STATUS_SUBMITTED": "The Direct Debit has been submitted to the counterparty and is waiting to be confirmed or returned.",
          "DIRECT_DEBIT_STATUS_UNKNOWN": "Default Direct Debit status."
        }
      },
      "direct_debitsDirectDebitStatusReason": {
        "type": "string",
        "enum": [
          "DIRECT_DEBIT_STATUS_REASON_UNKNOWN",
          "DIRECT_DEBIT_STATUS_REASON_ACCOUNT_NOT_PRESENT",
          "DIRECT_DEBIT_STATUS_REASON_ACCOUNT_STATUS_INVALID",
          "DIRECT_DEBIT_STATUS_REASON_INSUFFICIENT_FUNDS",
          "DIRECT_DEBIT_STATUS_REASON_CONTRACT_TERMS_AND_CONDITIONS",
          "DIRECT_DEBIT_STATUS_REASON_RESTRICTIONS_PREVENT",
          "DIRECT_DEBIT_STATUS_REASON_MANDATE_NOT_PRESENT",
          "DIRECT_DEBIT_STATUS_REASON_MANDATE_STATUS_INACTIVE",
          "DIRECT_DEBIT_STATUS_REASON_SCHEME_SUBMISSION_FAILED"
        ],
        "default": "DIRECT_DEBIT_STATUS_REASON_UNKNOWN",
        "x-enum-value-descriptions": {
          "DIRECT_DEBIT_STATUS_REASON_ACCOUNT_NOT_PRESENT": "The Vault account is not present.",
          "DIRECT_DEBIT_STATUS_REASON_ACCOUNT_STATUS_INVALID": "The Vault account has an invalid status.",
          "DIRECT_DEBIT_STATUS_REASON_CONTRACT_TERMS_AND_CONDITIONS": "Movement of funds has failed because the Direct Debit violates the terms and conditions of the Smart Contract associated with the Vault account.",
          "DIRECT_DEBIT_STATUS_REASON_INSUFFICIENT_FUNDS": "Movement of funds has failed because the Vault account has insufficient funds.",
          "DIRECT_DEBIT_STATUS_REASON_MANDATE_NOT_PRESENT": "There is no matching Mandate for the Direct Debit in the system.",
          "DIRECT_DEBIT_STATUS_REASON_MANDATE_STATUS_INACTIVE": "The corresponding Mandate has a `status` that is not `ACTIVE` and the Direct Debit cannot be processed.",
          "DIRECT_DEBIT_STATUS_REASON_RESTRICTIONS_PREVENT": "Movement of funds has failed because the Direct Debit violates the restrictions set on the Vault account.",
          "DIRECT_DEBIT_STATUS_REASON_SCHEME_SUBMISSION_FAILED": "Scheme Submission failed for Outbound Direct Debit.",
          "DIRECT_DEBIT_STATUS_REASON_UNKNOWN": "Default Direct Debit status reason."
        }
      },
      "direct_debitsDirectDebitType": {
        "type": "string",
        "enum": [
          "DIRECT_DEBIT_TYPE_UNKNOWN",
          "DIRECT_DEBIT_TYPE_FIRST",
          "DIRECT_DEBIT_TYPE_RECURRING",
          "DIRECT_DEBIT_TYPE_FINAL",
          "DIRECT_DEBIT_TYPE_REPRESENTED",
          "DIRECT_DEBIT_TYPE_ONE_OFF",
          "DIRECT_DEBIT_TYPE_RETURN",
          "DIRECT_DEBIT_TYPE_REVERSAL",
          "DIRECT_DEBIT_TYPE_REFUND"
        ],
        "default": "DIRECT_DEBIT_TYPE_UNKNOWN",
        "x-enum-value-descriptions": {
          "DIRECT_DEBIT_TYPE_FINAL": "Final Direct Debit.",
          "DIRECT_DEBIT_TYPE_FIRST": "First Direct Debit.",
          "DIRECT_DEBIT_TYPE_ONE_OFF": "One-off Direct Debit.",
          "DIRECT_DEBIT_TYPE_RECURRING": "Recurring Direct Debit.",
          "DIRECT_DEBIT_TYPE_REFUND": "Direct Debit refund.",
          "DIRECT_DEBIT_TYPE_REPRESENTED": "Re-presented Direct Debit; for example, when the originally presented Direct Debit is returned for some reason, it can be re-presented.",
          "DIRECT_DEBIT_TYPE_RETURN": "Direct Debit return.",
          "DIRECT_DEBIT_TYPE_REVERSAL": "Direct Debit reversal.",
          "DIRECT_DEBIT_TYPE_UNKNOWN": "Default Direct Debit type."
        }
      },
      "direct_debitsInitiateDirectDebitRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required.",
            "x-example-override": "2ec2c9b7-c760-4e12-8e59-17de121f410f"
          },
          "direct_debit_id": {
            "type": "string",
            "description": "The ID of the Direct Debit to be initiated. In order to initiate a Direct Debit, this ID must reference a previously created DirectDebit that has a `status` of DIRECT_DEBIT_STATUS_RECEIVED. Required.",
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          }
        }
      },
      "direct_debitsInitiateDirectDebitResponse": {
        "type": "object"
      },
      "direct_debitsListDirectDebitsResponse": {
        "type": "object",
        "properties": {
          "direct_debits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/direct_debitsDirectDebit"
            },
            "description": "A list of matching Direct Debits in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, this is the first page of results."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, this is the last page of results."
          }
        }
      },
      "direct_debitsMigrationInfo": {
        "type": "object",
        "properties": {
          "is_migrated": {
            "type": "boolean",
            "description": "This field indicates whether the Direct Debit has been migrated from another platform into Vault."
          },
          "tranche_id": {
            "type": "string",
            "description": "The ID of the tranche that the Direct Debit was migrated within."
          },
          "migration_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the Direct Debit was migrated."
          },
          "source_resource_id": {
            "type": "string",
            "description": "The ID from the source platform of the migrated Direct Debit."
          }
        }
      },
      "direct_debitsPaymentIdentifiers": {
        "type": "object",
        "properties": {
          "end_to_end_id": {
            "type": "string",
            "description": "This provides unique identification of the transaction, as assigned by the initiating party. It is passed on, unchanged, throughout the entire end-to-end chain. Optional."
          },
          "transaction_id": {
            "type": "string",
            "description": "This provides unique identification of the transaction, as assigned by the first instructing agent. It is passed on, unchanged, throughout the entire interbank chain. Optional."
          },
          "instruction_id": {
            "type": "string",
            "description": "This provides unique identification of the instruction, as assigned by an instructing party for an instructed party. Optional."
          },
          "clearing_system_ref": {
            "type": "string",
            "description": "This provides unique identification of the instruction in the form of a reference, as assigned by a clearing system. Optional."
          },
          "uetr": {
            "type": "string",
            "description": "This is a universally unique end-to-end transaction reference (UETR). Optional."
          }
        },
        "description": "`PaymentIdentifiers` provides means of referencing a payment transaction. Constraints: - `transaction` or `uetr` must be present. Both may be present. - All fields except `uetr` and `instruction` are strings with a maximum length of 35 characters."
      },
      "direct_debitsStatusDetails": {
        "type": "object",
        "properties": {
          "status_reason": {
            "$ref": "#/components/schemas/direct_debitsDirectDebitStatusReason",
            "description": "One of a set of predefined reasons for the `status` of the Direct Debit. Required."
          },
          "status_description": {
            "type": "string",
            "description": "A free-form string to give a more detailed description of the reason. It is intended to be read by human operators. Optional."
          }
        },
        "description": "Provides information for why the Direct Debit has the specific `status`."
      },
      "filesBatchGetFileVersionsResponse": {
        "type": "object",
        "properties": {
          "file_versions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/filesFileVersion"
            },
            "description": "A map of the FileVersion ID to the FileVersion."
          }
        }
      },
      "filesBatchGetFilesResponse": {
        "type": "object",
        "properties": {
          "files": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/filesFile"
            },
            "description": "A map of the File ID to the File."
          }
        }
      },
      "filesCreateFileRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required.",
            "x-example-override": "e7a581ec-3c2d-4a0e-b229-bc28e95773c8"
          },
          "file": {
            "$ref": "#/components/schemas/filesFile",
            "description": "The File that is to be created. Required.",
            "x-excluded-fields": [
              "update_count",
              "create_timestamp",
              "update_timestamp"
            ]
          }
        }
      },
      "filesCreateFileVersionRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required.",
            "x-example-override": "e9392eca-c7a3-4094-8d5b-d56780ba7dcd"
          },
          "file_version": {
            "$ref": "#/components/schemas/filesFileVersion",
            "description": "The FileVersion that is to be created. Required.",
            "x-excluded-fields": [
              "id",
              "status",
              "create_timestamp",
              "update_timestamp"
            ]
          }
        }
      },
      "filesFile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The name of the File that is to be created. Must be unique. Required on resource creation.",
            "x-example-override": "EISCD"
          },
          "active_file_version_id": {
            "type": "string",
            "description": "The ID of a FileVersion present in the Payments Hub. Required on resource creation.",
            "x-example-override": "7c06e999-e06e-415c-ae7e-d2f91b6bb59e"
          },
          "update_count": {
            "type": "string",
            "description": "A monotonically increasing number of updates. This is generated by the Payments Hub.",
            "x-example-override": "1"
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the File was created. This is generated by the Payments Hub.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating the last time the File was updated. This is generated by the Payments Hub.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          }
        }
      },
      "filesFileVersion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the FileVersion assigned by the Payments Hub.",
            "x-example-override": "8e12d076-d867-48c0-9573-f71cfed94c43"
          },
          "url": {
            "type": "string",
            "description": "The URL where the file can be downloaded from. Only GCP Cloud Storage URLs are supported.",
            "x-example-override": "gs://some/path/eiscd-20200601.xml"
          },
          "file_id": {
            "type": "string",
            "description": "The ID of the File this FileVersion will be associated with.",
            "x-example-override": "EISCD"
          },
          "status": {
            "$ref": "#/components/schemas/filesFileVersionStatus",
            "description": "The status of this FileVersion.",
            "x-example-override": "FILE_VERSION_STATUS_VALID"
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the FileVersion was created. This is generated by the Payments Hub.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating the last time the FileVersion was updated. This is generated by the Payments Hub.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          }
        }
      },
      "filesFileVersionStatus": {
        "type": "string",
        "enum": [
          "FILE_VERSION_STATUS_UNKNOWN",
          "FILE_VERSION_STATUS_PENDING_VALIDATION",
          "FILE_VERSION_STATUS_VALID",
          "FILE_VERSION_STATUS_INVALID"
        ],
        "default": "FILE_VERSION_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "FILE_VERSION_STATUS_INVALID": "The user of this File has deemed the FileVersion to be invalid.",
          "FILE_VERSION_STATUS_PENDING_VALIDATION": "The user of this File needs to validate the FileVersion.",
          "FILE_VERSION_STATUS_UNKNOWN": "Default value.",
          "FILE_VERSION_STATUS_VALID": "The user of this File has successfully validated the FileVersion."
        }
      },
      "filesListFileVersionsResponse": {
        "type": "object",
        "properties": {
          "file_versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/filesFileVersion"
            },
            "description": "A list of matching FileVersions in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, the first page of results will be returned."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, the last page of results will be returned."
          }
        }
      },
      "filesListFilesResponse": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/filesFile"
            },
            "description": "A list of matching Files in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, the first page of results will be returned."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, the last page of results will be returned."
          }
        }
      },
      "filesUpdateFileRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID to ensure the request is idempotent. Required.",
            "x-example-override": "8c913dfb-dd93-4af6-a45a-89bd41d5fab3"
          },
          "file": {
            "$ref": "#/components/schemas/filesFile",
            "description": "The File object that is to be updated. Required.",
            "x-excluded-fields": [
              "id",
              "update_count",
              "create_timestamp",
              "update_timestamp"
            ]
          },
          "update_mask": {
            "$ref": "#/components/schemas/protobufFieldMask",
            "description": "The field mask used to indicate which fields in the resource are to be updated. Required.",
            "x-example-override": "{\"paths\": [\"active_file_version_id\"]}"
          }
        }
      },
      "filesUpdateFileVersionRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID to ensure the request is idempotent. Required.",
            "x-example-override": "84afc1f6-e947-48aa-92b8-5f7ac0484900"
          },
          "file_version": {
            "$ref": "#/components/schemas/filesFileVersion",
            "description": "The FileVersion object that is to be updated. Required.",
            "x-excluded-fields": [
              "id",
              "url",
              "file_id",
              "create_timestamp",
              "update_timestamp"
            ]
          },
          "update_mask": {
            "$ref": "#/components/schemas/protobufFieldMask",
            "description": "The field mask used to indicate which fields in the resource are to be updated. Required.",
            "x-example-override": "{\"paths\": [\"status\"]}"
          }
        }
      },
      "mandate_actionsBatchGetMandateActionsResponse": {
        "type": "object",
        "properties": {
          "mandate_actions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/mandate_actionsMandateAction"
            },
            "description": "A map of the MandateAction ID to the MandateAction."
          }
        }
      },
      "mandate_actionsListMandateActionsResponse": {
        "type": "object",
        "properties": {
          "mandate_actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/mandate_actionsMandateAction"
            },
            "description": "A list of matching MandateActions."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, the first page of results will be returned."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, the last page of results will be returned."
          }
        }
      },
      "mandate_actionsMandateAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the MandateAction in the PaymentHub (UUID); if not provided, this is generated on creation.",
            "x-create-only": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          },
          "type": {
            "$ref": "#/components/schemas/mandate_actionsMandateActionType",
            "description": "The type of the MandateAction. Required on creation.",
            "x-create-only": true
          },
          "status": {
            "$ref": "#/components/schemas/mandate_actionsMandateActionStatus",
            "description": "The current status of the MandateAction. Defaults to `PENDING` on creation. Required for update calls.",
            "x-update-only": true
          },
          "status_reason": {
            "type": "string",
            "description": "The reason for the status of the MandateAction. Indicates why the `status` is `FAILURE` or `SUCCESS`.",
            "x-update-only": true,
            "x-example-override": "INVALID_MANDATE_EXPIRED"
          },
          "current_mandate": {
            "$ref": "#/components/schemas/mandatesMandate",
            "description": "The Mandate resource at the beginning of the Mandate update process.",
            "x-create-only": true
          },
          "current_mandate_request_id": {
            "type": "string",
            "description": "The Mandate Request ID of the `current_mandate`. For internal use only.",
            "x-create-only": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          },
          "update_mandate_request": {
            "$ref": "#/components/schemas/mandatesUpdateMandateRequest",
            "description": "The update Mandate request which triggered this MandateAction.",
            "x-create-only": true
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the MandateAction was created. Output-only.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the last change to the MandateAction occurred. Output-only.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "scheme_submission": {
            "$ref": "#/components/schemas/mandate_actionsMandateSchemeSubmissionAction",
            "required": false
          },
          "scheme_return": {
            "$ref": "#/components/schemas/mandate_actionsMandateSchemeReturnAction",
            "required": false
          },
          "scheme_validation": {
            "$ref": "#/components/schemas/mandate_actionsMandateSchemeValidationAction",
            "required": false
          }
        }
      },
      "mandate_actionsMandateActionStatus": {
        "type": "string",
        "enum": [
          "MANDATE_ACTION_STATUS_UNKNOWN",
          "MANDATE_ACTION_STATUS_PENDING",
          "MANDATE_ACTION_STATUS_SUCCESS",
          "MANDATE_ACTION_STATUS_FAILURE"
        ],
        "default": "MANDATE_ACTION_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "MANDATE_ACTION_STATUS_FAILURE": "The MandateAction failed processing.",
          "MANDATE_ACTION_STATUS_PENDING": "The MandateAction requires processing according to its type.",
          "MANDATE_ACTION_STATUS_SUCCESS": "The MandateAction has successfully been processed.",
          "MANDATE_ACTION_STATUS_UNKNOWN": "Default MandateAction status."
        }
      },
      "mandate_actionsMandateActionType": {
        "type": "string",
        "enum": [
          "MANDATE_ACTION_TYPE_UNKNOWN",
          "MANDATE_ACTION_TYPE_SCHEME_VALIDATION",
          "MANDATE_ACTION_TYPE_INITIATE_MANDATE_UPDATE",
          "MANDATE_ACTION_TYPE_SCHEME_SUBMISSION",
          "MANDATE_ACTION_TYPE_SCHEME_RETURN",
          "MANDATE_ACTION_TYPE_SCHEDULE_ACTIVATION"
        ],
        "default": "MANDATE_ACTION_TYPE_UNKNOWN",
        "x-enum-value-release-info": {
          "MANDATE_ACTION_TYPE_SCHEDULE_ACTIVATION": {
            "releaseVersion": {
              "major": 2,
              "minor": 5
            },
            "changeType": "ADD_ENUM_VALUE",
            "description": "Added to allow mandates to be activated at a scheduled later date"
          }
        },
        "x-enum-value-descriptions": {
          "MANDATE_ACTION_TYPE_INITIATE_MANDATE_UPDATE": "Initiate Mandate Update action type. Used to begin the Mandate update process.",
          "MANDATE_ACTION_TYPE_SCHEDULE_ACTIVATION": "Schedule activation action type.",
          "MANDATE_ACTION_TYPE_SCHEME_RETURN": "Scheme return action type.",
          "MANDATE_ACTION_TYPE_SCHEME_SUBMISSION": "Scheme submission action type.",
          "MANDATE_ACTION_TYPE_SCHEME_VALIDATION": "Scheme validation action type.",
          "MANDATE_ACTION_TYPE_UNKNOWN": "Default MandateAction type."
        }
      },
      "mandate_actionsMandateReturnReason": {
        "type": "string",
        "enum": [
          "MANDATE_RETURN_REASON_UNKNOWN",
          "MANDATE_RETURN_REASON_DEBITOR_ACCOUNT_NOT_FOUND",
          "MANDATE_RETURN_REASON_DEBITOR_ACCOUNT_CLOSED",
          "MANDATE_RETURN_REASON_MANDATE_EXPIRED",
          "MANDATE_RETURN_REASON_MANDATE_ALREADY_EXISTS"
        ],
        "default": "MANDATE_RETURN_REASON_UNKNOWN",
        "x-enum-value-descriptions": {
          "MANDATE_RETURN_REASON_DEBITOR_ACCOUNT_CLOSED": "Mandate returned because the debitor account was closed.",
          "MANDATE_RETURN_REASON_DEBITOR_ACCOUNT_NOT_FOUND": "Mandate returned because the debitor account could not be found.",
          "MANDATE_RETURN_REASON_MANDATE_ALREADY_EXISTS": "Mandate creation returned because it already exists.",
          "MANDATE_RETURN_REASON_MANDATE_EXPIRED": "Mandate re-activation returned because the Mandate had expired.",
          "MANDATE_RETURN_REASON_UNKNOWN": "Default mandate return reason."
        }
      },
      "mandate_actionsMandateSchemeReturnAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/mandate_actionsMandateSchemeReturnActionRequest",
            "description": "The action request. Required on resource creation.",
            "x-create-only": true
          },
          "response": {
            "$ref": "#/components/schemas/mandate_actionsMandateSchemeReturnActionResponse",
            "description": "The action response, set by the client resolving the action.",
            "x-update-only": true
          }
        }
      },
      "mandate_actionsMandateSchemeReturnActionRequest": {
        "type": "object",
        "properties": {
          "return_reason": {
            "$ref": "#/components/schemas/mandate_actionsMandateReturnReason",
            "description": "The reason for the scheme return."
          }
        }
      },
      "mandate_actionsMandateSchemeReturnActionResponse": {
        "type": "object",
        "properties": {
          "scheme_return_id": {
            "type": "string",
            "description": "The scheme return ID from the scheme gateway.",
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          },
          "scheme_return_code": {
            "type": "string",
            "description": "The return code submitted to the scheme.",
            "x-example-override": "H"
          }
        }
      },
      "mandate_actionsMandateSchemeSubmissionAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/mandate_actionsMandateSchemeSubmissionActionRequest",
            "description": "The action request. Required on resource creation.",
            "x-create-only": true
          },
          "response": {
            "$ref": "#/components/schemas/mandate_actionsMandateSchemeSubmissionActionResponse",
            "description": "The action response, set by the client resolving the action.",
            "x-update-only": true
          }
        }
      },
      "mandate_actionsMandateSchemeSubmissionActionRequest": {
        "type": "object"
      },
      "mandate_actionsMandateSchemeSubmissionActionResponse": {
        "type": "object",
        "properties": {
          "scheme_mandate_id": {
            "type": "string",
            "description": "The ID of the submitted mandate in the scheme gateway.",
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          }
        }
      },
      "mandate_actionsMandateSchemeValidationAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/mandate_actionsMandateSchemeValidationActionRequest",
            "description": "The action request. Required on resource creation.",
            "x-create-only": true
          },
          "response": {
            "$ref": "#/components/schemas/mandate_actionsMandateSchemeValidationActionResponse",
            "description": "The action response, set by the client resolving the action.",
            "x-update-only": true
          }
        }
      },
      "mandate_actionsMandateSchemeValidationActionRequest": {
        "type": "object"
      },
      "mandate_actionsMandateSchemeValidationActionResponse": {
        "type": "object",
        "properties": {
          "skip_scheme_submission": {
            "type": "boolean",
            "description": "A flag denoting whether the Mandate should be submitted to the scheme or not."
          }
        }
      },
      "mandate_actionsUpdateMandateActionRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID to ensure the request is idempotent. Required."
          },
          "mandate_action": {
            "$ref": "#/components/schemas/mandate_actionsMandateAction",
            "description": "The MandateAction to be updated. Required."
          },
          "update_mask": {
            "$ref": "#/components/schemas/protobufFieldMask",
            "description": "The field mask used to indicate which fields in the resource are to be updated. The allowed fields are `status`, `status_reason`, `scheme_validation.response`, `scheme_submission.response`, and `scheme_return.response`. Required.",
            "x-example-override": "{\"paths\": [\"status\", \"status_reason\"]}"
          }
        }
      },
      "mandatesMandate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the Mandate in the PaymentHub (UUID); if not provided, this is generated on creation.",
            "x-create-only": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          },
          "scheme_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the Mandate was received by the scheme. This is inferred from the scheme (for example, from `scheme_processing_date` for Bacs).",
            "x-create-only": true
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the Mandate was created.",
            "x-output-only": true
          },
          "scheme_id": {
            "type": "string",
            "description": "Identifies the scheme that the Mandate belongs to.",
            "x-create-only": true,
            "x-example-override": "BACS"
          },
          "debitor_party": {
            "$ref": "#/components/schemas/partyParty",
            "description": "The details of the party receiving the Mandate (the party paying the funds). Required on resource creation."
          },
          "creditor_party": {
            "$ref": "#/components/schemas/partyParty",
            "description": "The details of the party sending the Mandate (the party collecting the funds). Required on resource creation for Mandates with direction `MANDATE_DIRECTION_OUTBOUND`.",
            "x-create-only": true
          },
          "status": {
            "$ref": "#/components/schemas/mandatesMandateStatus",
            "description": "The current status of the Mandate."
          },
          "direction": {
            "$ref": "#/components/schemas/mandatesMandateDirection",
            "description": "The direction of the Mandate. Required.",
            "x-create-only": true
          },
          "source": {
            "$ref": "#/components/schemas/mandatesMandateSource",
            "description": "The source of the Mandate. Required.",
            "x-create-only": true
          },
          "metadata": {
            "$ref": "#/components/schemas/protobufStruct",
            "description": "Metadata related to the Mandate. Optional.",
            "x-example-override": "{\"Example key\": \"Example value\"}"
          },
          "reference": {
            "type": "string",
            "description": "The reference of the Mandate that is assigned by the creditor. Optional.",
            "x-create-only": true,
            "x-example-override": "ExampleReference"
          },
          "frequency": {
            "type": "string",
            "description": "The frequency of direct debit collections against the Mandate. Optional.",
            "x-create-only": true,
            "x-example-override": "monthly"
          },
          "creditor_scheme_id": {
            "type": "string",
            "description": "Unique ID of the creditor within the scheme. Required on resource creation.",
            "x-create-only": true,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 1
              },
              "changeType": "ADD_FIELD",
              "description": "Field added so resource can record creditor scheme id"
            },
            "x-example-override": "ExampleCreditorSchemeID"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the last change to the Mandate occurred. Output-only.",
            "x-output-only": true,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 1
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to record update time on existing resource"
            }
          },
          "scheme_code": {
            "type": "string",
            "description": "The most recent scheme-specific code set by the scheme or submitted to the scheme.",
            "x-update-only": true,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 4
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to record the scheme reason code for a previous change in status."
            },
            "x-example-override": "H"
          },
          "cancellation_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "If the Mandate has status `CANCELLED` this field contains the timestamp indicating when the Mandate was cancelled.",
            "x-update-only": true,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 4
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to record the cancellation timestamp for a mandate cancellation."
            }
          },
          "migration_info": {
            "$ref": "#/components/schemas/mandatesMigrationInfo",
            "description": "Migration information for Mandates that have been migrated into Vault from another platform.",
            "x-output-only": true,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 5
              },
              "changeType": "ADD_FIELD",
              "description": "Field added so client can migrate a Mandate from legacy system"
            }
          }
        }
      },
      "mandatesMandateDirection": {
        "type": "string",
        "enum": [
          "MANDATE_DIRECTION_UNKNOWN",
          "MANDATE_DIRECTION_INBOUND",
          "MANDATE_DIRECTION_OUTBOUND"
        ],
        "default": "MANDATE_DIRECTION_UNKNOWN",
        "x-enum-value-descriptions": {
          "MANDATE_DIRECTION_INBOUND": "A Mandate whose origin is external; not Vault.",
          "MANDATE_DIRECTION_OUTBOUND": "A Mandate whose origin is Vault.",
          "MANDATE_DIRECTION_UNKNOWN": "Default value."
        }
      },
      "mandatesMandateSource": {
        "type": "string",
        "enum": [
          "MANDATE_SOURCE_UNKNOWN",
          "MANDATE_SOURCE_ELECTRONIC",
          "MANDATE_SOURCE_PAPER"
        ],
        "default": "MANDATE_SOURCE_UNKNOWN",
        "x-enum-value-descriptions": {
          "MANDATE_SOURCE_ELECTRONIC": "The Mandate was issued in electronic form.",
          "MANDATE_SOURCE_PAPER": "The Mandate was issued in paper form. Note that paper Mandates are currently not supported.",
          "MANDATE_SOURCE_UNKNOWN": "Default value."
        }
      },
      "mandatesMandateStatus": {
        "type": "string",
        "enum": [
          "MANDATE_STATUS_UNKNOWN",
          "MANDATE_STATUS_RECEIVED",
          "MANDATE_STATUS_ACTIVE",
          "MANDATE_STATUS_REJECTED",
          "MANDATE_STATUS_CANCELLED"
        ],
        "default": "MANDATE_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "MANDATE_STATUS_ACTIVE": "The Mandate is active.",
          "MANDATE_STATUS_CANCELLED": "The Mandate has been cancelled.",
          "MANDATE_STATUS_RECEIVED": "The Mandate has been received.",
          "MANDATE_STATUS_REJECTED": "The Mandate has been rejected.",
          "MANDATE_STATUS_UNKNOWN": "Default value."
        }
      },
      "mandatesMigrationInfo": {
        "type": "object",
        "properties": {
          "is_migrated": {
            "type": "boolean",
            "description": "This field indicates whether the Mandate has been migrated from another platform into Vault.",
            "x-output-only": true
          },
          "tranche_id": {
            "type": "string",
            "description": "The ID of the tranche that the Mandate was migrated within.",
            "x-output-only": true
          },
          "migration_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the Mandate was migrated.",
            "x-output-only": true
          },
          "source_resource_id": {
            "type": "string",
            "description": "The ID from the source platform of the migrated Mandate.",
            "x-output-only": true
          }
        }
      },
      "mandatesUpdateActor": {
        "type": "string",
        "enum": [
          "UPDATE_ACTOR_UNKNOWN",
          "UPDATE_ACTOR_CHANNEL",
          "UPDATE_ACTOR_SCHEME"
        ],
        "default": "UPDATE_ACTOR_UNKNOWN",
        "x-enum-value-descriptions": {
          "UPDATE_ACTOR_CHANNEL": "An update on behalf of the channel (e.g. Vault)",
          "UPDATE_ACTOR_SCHEME": "An update on behalf of the scheme (e.g. Bacs)",
          "UPDATE_ACTOR_UNKNOWN": "Default value."
        }
      },
      "mandatesUpdateMandateRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required."
          },
          "mandate": {
            "$ref": "#/components/schemas/mandatesMandate",
            "description": "The Mandate to be updated."
          },
          "update_mask": {
            "$ref": "#/components/schemas/protobufFieldMask",
            "description": "The field mask used to indicate which fields in the resource are to be updated. The allowed fields are `status`, `metadata`, `debitor_party`, `cancellation_timestamp`, and `scheme_code`. Required.",
            "x-example-override": "{\"paths\": [\"status\"]}"
          },
          "update_actor": {
            "$ref": "#/components/schemas/mandatesUpdateActor",
            "description": "The actor that the update is on behalf of, e.g. Vault (Channel), Bacs (Scheme).",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 3
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to allow update sourcing"
            }
          }
        }
      },
      "async_operationsAsyncOperation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID that can be used to retrieve this operation."
          },
          "metadata": {
            "$ref": "#/components/schemas/protobufAny",
            "description": "Metadata of the operation.",
            "x-third-party": "GOOGLE_PROTOBUF_ANY"
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "When this operation was created.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "done_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "When this operation was completed.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "done": {
            "type": "boolean",
            "description": "Whether the operation is completed or not."
          },
          "response": {
            "$ref": "#/components/schemas/protobufAny",
            "required": false
          },
          "error": {
            "$ref": "#/components/schemas/rpcStatus",
            "required": false
          }
        },
        "description": "Represents a long-running or asynchronous operation in a service. It contains the status of this operation and, upon successful completion, the resource that was created or mutated as part of this operation."
      },
      "mandatesBatchGetMandatesResponse": {
        "type": "object",
        "properties": {
          "mandates": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/mandatesMandate"
            },
            "description": "A map of the Mandate ID to the Mandate."
          }
        }
      },
      "mandatesCreateMandateRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. If it is not present, it will be assigned by the Payments Hub.",
            "x-create-only": true,
            "x-example-override": "a9c0acc2-d256-4ee0-bcbe-3c4cb7b0265a"
          },
          "mandate": {
            "$ref": "#/components/schemas/mandatesMandate",
            "description": "The Mandate to be created. Required on resource creation.",
            "x-create-only": true
          }
        }
      },
      "mandatesListMandatesResponse": {
        "type": "object",
        "properties": {
          "mandates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/mandatesMandate"
            },
            "description": "A list of matching Mandates."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, the first page of results will be returned."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, the last page of results will be returned."
          }
        }
      },
      "protobufAny": {
        "type": "object",
        "properties": {
          "type_url": {
            "type": "string",
            "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)\n\nNote: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
          },
          "value": {
            "type": "string",
            "format": "byte",
            "description": "Must be a valid serialized protocol buffer of the above specified type."
          }
        },
        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}      any, err := anypb.New(foo)      if err != nil {        ...      }      ...      foo := &pb.Foo{}      if err := any.UnmarshalTo(foo); err != nil {        ...      }\n\nThe pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".\n\n\nJSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:\n\n    package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }\n\n    {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }\n\nIf the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):\n\n    {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }"
      },
      "rpcStatus": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
          },
          "message": {
            "type": "string",
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [thoughtmachine.rpc.Status.details][thoughtmachine.rpc.Status.details] field, or localized by the client."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/protobufAny"
            },
            "description": "A list of messages that carry the error details.  There will be a common set of message types for APIs to use."
          }
        },
        "description": "- Simple to use and understand for most users - Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message, and error details. The error code should be an enum value of [google.rpc.Code][google.rpc.Code], but it may accept additional error codes if needed.  The error message should be a developer-facing English message that helps developers *understand* and *resolve* the error. If a localized user-facing error message is needed, put the localized message in the error details or localize it in the client. The optional error details may contain arbitrary information about the error. There is a predefined set of error detail types in the package `google.rpc` which can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it is not necessarily the actual wire format. When the `Status` message is exposed in different client libraries and different wire protocols, it can be mapped differently. For example, it will likely be mapped to some exceptions in Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of environments, either with or without APIs, to provide a consistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,     it may embed the `Status` in the normal response to indicate the partial     errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may     have a `Status` message for error reporting purpose.\n\n- Batch operations. If a client uses batch request and batch response, the     `Status` message should be used directly inside batch response, one for     each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation     results in its response, the status of those operations should be     represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could     be used directly after any stripping needed for security/privacy reasons.",
        "title": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). The error model is designed to be:"
      },
      "payment_actionsBatchGetPaymentActionsResponse": {
        "type": "object",
        "properties": {
          "payment_actions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/payment_actionsPaymentAction"
            },
            "description": "A map of the `PaymentAction` ID to the `PaymentAction`."
          }
        }
      },
      "payment_actionsEnrichmentField": {
        "type": "string",
        "enum": [
          "ENRICHMENT_FIELD_UNKNOWN",
          "ENRICHMENT_FIELD_SCHEME_TRANSACTION_ID",
          "ENRICHMENT_FIELD_SCHEME_PAYMENT_TYPE",
          "ENRICHMENT_FIELD_SETTLEMENT_DATE"
        ],
        "default": "ENRICHMENT_FIELD_UNKNOWN",
        "x-enum-value-release-info": {
          "ENRICHMENT_FIELD_SCHEME_PAYMENT_TYPE": {
            "noticeVersion": {
              "major": 2,
              "minor": 8
            },
            "releaseVersion": {
              "major": 6
            },
            "changeType": "REMOVE_ENUM_VALUE",
            "description": "Deprecated with removal of field."
          },
          "ENRICHMENT_FIELD_SCHEME_TRANSACTION_ID": {
            "noticeVersion": {
              "major": 2,
              "minor": 8
            },
            "releaseVersion": {
              "major": 6
            },
            "changeType": "REMOVE_ENUM_VALUE",
            "description": "Deprecated with removal of field."
          },
          "ENRICHMENT_FIELD_SETTLEMENT_DATE": {
            "noticeVersion": {
              "major": 2,
              "minor": 8
            },
            "releaseVersion": {
              "major": 6
            },
            "changeType": "REMOVE_ENUM_VALUE",
            "description": "Deprecated with removal of field."
          },
          "ENRICHMENT_FIELD_UNKNOWN": {
            "noticeVersion": {
              "major": 2,
              "minor": 8
            },
            "releaseVersion": {
              "major": 6
            },
            "changeType": "REMOVE_ENUM_VALUE",
            "description": "Deprecated with removal of field."
          }
        },
        "x-enum-value-descriptions": {
          "ENRICHMENT_FIELD_SCHEME_PAYMENT_TYPE": "Indicates that a value must be generated to be used for the `scheme_payment_type` field of the associated `Payment`.",
          "ENRICHMENT_FIELD_SCHEME_TRANSACTION_ID": "Indicates that a value must be generated to be used for the `scheme_transaction_id` field of the associated `Payment`.",
          "ENRICHMENT_FIELD_SETTLEMENT_DATE": "Indicates that a value must be generated to be used for the `settlement_date` field of the associated `Payment`.",
          "ENRICHMENT_FIELD_UNKNOWN": "Default value."
        }
      },
      "payment_actionsListPaymentActionsResponse": {
        "type": "object",
        "properties": {
          "payment_actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/payment_actionsPaymentAction"
            },
            "description": "A list of matching `PaymentAction`s in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, this is the first page of results."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, this is the last page of results."
          }
        }
      },
      "payment_actionsPaymentAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the `PaymentAction`, generated on creation. Required for update requests.",
            "x-example-override": "208983c1-a7f9-49c3-a3a6-f9d727ce1db6"
          },
          "type": {
            "$ref": "#/components/schemas/payment_actionsPaymentActionType",
            "description": "The type of this `PaymentAction`. Present on resource creation.",
            "x-example-override": "PAYMENT_ACTION_TYPE_SCHEDULE_SETTLEMENT"
          },
          "status": {
            "$ref": "#/components/schemas/payment_actionsPaymentActionStatus",
            "description": "The current status of the resource. `PENDING` on resource creation.",
            "x-example-override": "PAYMENT_ACTION_STATUS_PENDING"
          },
          "payment_id": {
            "type": "string",
            "description": "The ID of the [Payment](/api/payments_hub_api/#Payments) this `PaymentAction` refers to. Present on resource creation.",
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          },
          "scheme_id": {
            "type": "string",
            "description": "The Scheme ID that the `PaymentAction` belongs to. This field helps a PaymentAction processor to decide whether to consume or discard the message. Present on resource creation. Support for BACS is now deprecated.",
            "x-example-override": "BACS"
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the `PaymentAction` was created. Output only.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the last change to the `PaymentAction` occurred. Output only.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "schedule_settlement": {
            "$ref": "#/components/schemas/payment_actionsPaymentScheduleSettlementAction",
            "required": false
          },
          "create_return": {
            "$ref": "#/components/schemas/payment_actionsPaymentCreateReturnAction",
            "required": false
          },
          "scheme_submission": {
            "$ref": "#/components/schemas/payment_actionsPaymentSchemeSubmissionAction",
            "required": false
          },
          "scheme_enrichment": {
            "$ref": "#/components/schemas/payment_actionsPaymentSchemeEnrichmentAction",
            "required": false
          },
          "scheme_validation": {
            "$ref": "#/components/schemas/payment_actionsPaymentSchemeValidationAction",
            "required": false
          },
          "determine_reversal_settlement_date": {
            "$ref": "#/components/schemas/payment_actionsPaymentDetermineReversalSettlementDateAction",
            "required": false
          },
          "determine_reversal_exception_handling_approach": {
            "$ref": "#/components/schemas/payment_actionsPaymentDetermineReversalExceptionHandlingApproachAction",
            "required": false
          },
          "create_posting_instruction_batch": {
            "$ref": "#/components/schemas/payment_actionsPaymentCreatePostingInstructionBatchAction",
            "required": false
          }
        }
      },
      "payment_actionsPaymentActionStatus": {
        "type": "string",
        "enum": [
          "PAYMENT_ACTION_STATUS_UNKNOWN",
          "PAYMENT_ACTION_STATUS_PENDING",
          "PAYMENT_ACTION_STATUS_RESOLVED"
        ],
        "default": "PAYMENT_ACTION_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "PAYMENT_ACTION_STATUS_PENDING": "When a `PaymentAction` is `PENDING` it requires processing according to its type.",
          "PAYMENT_ACTION_STATUS_RESOLVED": "When a `PaymentAction` is `RESOLVED` it can no longer be updated. This indicates that all side effects and work associated with the action has been completed and that the `response` field has been updated.",
          "PAYMENT_ACTION_STATUS_UNKNOWN": "Default value."
        }
      },
      "payment_actionsPaymentActionType": {
        "type": "string",
        "enum": [
          "PAYMENT_ACTION_TYPE_UNKNOWN",
          "PAYMENT_ACTION_TYPE_SCHEDULE_SETTLEMENT",
          "PAYMENT_ACTION_TYPE_CREATE_RETURN",
          "PAYMENT_ACTION_TYPE_SCHEME_SUBMISSION",
          "PAYMENT_ACTION_TYPE_SCHEME_ENRICHMENT",
          "PAYMENT_ACTION_TYPE_SCHEME_VALIDATION",
          "PAYMENT_ACTION_TYPE_DETERMINE_REVERSAL_SETTLEMENT_DATE",
          "PAYMENT_ACTION_TYPE_DETERMINE_REVERSAL_EXCEPTION_HANDLING_APPROACH",
          "PAYMENT_ACTION_TYPE_CREATE_POSTING_INSTRUCTION_BATCH"
        ],
        "default": "PAYMENT_ACTION_TYPE_UNKNOWN",
        "x-enum-value-release-info": {
          "PAYMENT_ACTION_TYPE_CREATE_POSTING_INSTRUCTION_BATCH": {
            "releaseVersion": {
              "major": 3
            },
            "changeType": "ADD_ENUM_VALUE",
            "description": "Adds a new type of Payment Action: CreatePostingInstructionBatch",
            "featureFlag": "TMV_E_288_CT_POSTING_ACTIONS"
          }
        },
        "x-enum-value-descriptions": {
          "PAYMENT_ACTION_TYPE_CREATE_POSTING_INSTRUCTION_BATCH": "Create Posting Instruction Batch PaymentAction type.",
          "PAYMENT_ACTION_TYPE_CREATE_RETURN": "Create Return PaymentAction type.",
          "PAYMENT_ACTION_TYPE_DETERMINE_REVERSAL_EXCEPTION_HANDLING_APPROACH": "Determine Reversal Exception Handling Approach PaymentAction type.",
          "PAYMENT_ACTION_TYPE_DETERMINE_REVERSAL_SETTLEMENT_DATE": "Determine Reversal Settlement Date PaymentAction type.",
          "PAYMENT_ACTION_TYPE_SCHEDULE_SETTLEMENT": "Schedule Settlement PaymentAction type.",
          "PAYMENT_ACTION_TYPE_SCHEME_ENRICHMENT": "Scheme Enrichment PaymentAction type.",
          "PAYMENT_ACTION_TYPE_SCHEME_SUBMISSION": "Scheme Submission PaymentAction type.",
          "PAYMENT_ACTION_TYPE_SCHEME_VALIDATION": "Scheme Validation PaymentAction type.",
          "PAYMENT_ACTION_TYPE_UNKNOWN": "Default value."
        }
      },
      "payment_actionsPaymentCreatePostingInstructionBatchAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/payment_actionsPaymentCreatePostingInstructionBatchActionRequest",
            "description": "The request that is specific to the action type. Present on resource creation."
          },
          "response": {
            "$ref": "#/components/schemas/payment_actionsPaymentCreatePostingInstructionBatchActionResponse",
            "description": "The response that is specific to the action type. This is set by the client resolving the `PaymentAction`. Required."
          }
        }
      },
      "payment_actionsPaymentCreatePostingInstructionBatchActionRequest": {
        "type": "object",
        "properties": {
          "posting_instruction_batch": {
            "$ref": "#/components/schemas/v1PostingInstructionBatch",
            "description": "The Posting Instruction Batch object that should be submitted to the Postings API. Required."
          }
        }
      },
      "payment_actionsPaymentCreatePostingInstructionBatchActionResponse": {
        "type": "object",
        "properties": {
          "posting_instruction_batch": {
            "$ref": "#/components/schemas/v1PostingInstructionBatch",
            "description": "The Posting Instruction Batch object received as a response from Postings API. Required."
          }
        }
      },
      "payment_actionsPaymentCreateReturnAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/payment_actionsPaymentCreateReturnActionRequest",
            "description": "The request that is specific to the action type. Present on resource creation."
          },
          "response": {
            "$ref": "#/components/schemas/payment_actionsPaymentCreateReturnActionResponse",
            "description": "The response that is specific to the action type. This is set by the client resolving the `PaymentAction`. Required."
          }
        }
      },
      "payment_actionsPaymentCreateReturnActionRequest": {
        "type": "object",
        "properties": {
          "payment": {
            "$ref": "#/components/schemas/paymentsPayment",
            "description": "The `Payment` which must be returned. Present on resource creation."
          }
        }
      },
      "payment_actionsPaymentCreateReturnActionResponse": {
        "type": "object",
        "properties": {
          "return_payment_id": {
            "type": "string",
            "description": "The `id` of the return `Payment`. Optional."
          },
          "return_code": {
            "type": "string",
            "description": "The return code used in the return `Payment`. Optional."
          }
        }
      },
      "payment_actionsPaymentDetermineReversalExceptionHandlingApproachAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/payment_actionsPaymentDetermineReversalExceptionHandlingApproachActionRequest",
            "description": "The request that is specific to the action type. Present on resource creation."
          },
          "response": {
            "$ref": "#/components/schemas/payment_actionsPaymentDetermineReversalExceptionHandlingApproachActionResponse",
            "description": "The response that is specific to the action type. This is set by the client resolving the `PaymentAction`. Required."
          }
        }
      },
      "payment_actionsPaymentDetermineReversalExceptionHandlingApproachActionRequest": {
        "type": "object"
      },
      "payment_actionsPaymentDetermineReversalExceptionHandlingApproachActionResponse": {
        "type": "object",
        "properties": {
          "approach": {
            "$ref": "#/components/schemas/payment_actionsReversalExceptionHandlingApproach",
            "description": "The approach which should be taken to resolve the exception. Required."
          }
        }
      },
      "payment_actionsPaymentDetermineReversalSettlementDateAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/payment_actionsPaymentDetermineReversalSettlementDateActionRequest",
            "description": "The request that is specific to the action type. Present on resource creation."
          },
          "response": {
            "$ref": "#/components/schemas/payment_actionsPaymentDetermineReversalSettlementDateActionResponse",
            "description": "The response that is specific to the action type. This is set by the client resolving the `PaymentAction`. Required."
          }
        }
      },
      "payment_actionsPaymentDetermineReversalSettlementDateActionRequest": {
        "type": "object",
        "properties": {
          "payment_settlement_date": {
            "type": "string",
            "description": "The date that the associated `Payment` was settled on, in YYYY-MM-DD format. Present on resource creation."
          }
        }
      },
      "payment_actionsPaymentDetermineReversalSettlementDateActionResponse": {
        "type": "object",
        "properties": {
          "reversal_settlement_date": {
            "type": "string",
            "description": "The date that the `Payment` must be reversed on, in YYYY-MM-DD format. Required."
          }
        }
      },
      "payment_actionsPaymentScheduleSettlementAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/payment_actionsPaymentScheduleSettlementActionRequest",
            "description": "The request that is specific to the action type. Present on resource creation."
          },
          "response": {
            "$ref": "#/components/schemas/payment_actionsPaymentScheduleSettlementActionResponse",
            "description": "The response that is specific to the action type. This is set by the client resolving the `PaymentAction`. Required."
          }
        }
      },
      "payment_actionsPaymentScheduleSettlementActionRequest": {
        "type": "object",
        "properties": {
          "settlement_date": {
            "type": "string",
            "description": "The date that the associated `Payment` must be settled on, in YYYY-MM-DD format. Present on resource creation.",
            "x-example-override": "2020-01-01"
          }
        }
      },
      "payment_actionsPaymentScheduleSettlementActionResponse": {
        "type": "object"
      },
      "payment_actionsPaymentSchemeEnrichmentAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/payment_actionsPaymentSchemeEnrichmentActionRequest",
            "description": "The request that is specific to the action type. Present on resource creation."
          },
          "response": {
            "$ref": "#/components/schemas/payment_actionsPaymentSchemeEnrichmentActionResponse",
            "description": "The response that is specific to the action type. This is set by the client resolving the `PaymentAction`. Required."
          }
        }
      },
      "payment_actionsPaymentSchemeEnrichmentActionRequest": {
        "type": "object",
        "properties": {
          "payment_type": {
            "$ref": "#/components/schemas/paymentsPaymentType",
            "description": "The type of the `Payment`. Present on resource creation.",
            "x-release-info": {
              "noticeVersion": {
                "major": 2,
                "minor": 8
              },
              "releaseVersion": {
                "major": 6
              },
              "changeType": "REMOVE_FIELD",
              "description": "Usage being replaced by payment."
            }
          },
          "enrichment_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/payment_actionsEnrichmentField"
            },
            "description": "A list of enum values used to indicate the fields that must be generated and returned in the action response. Present on resource creation.",
            "x-release-info": {
              "noticeVersion": {
                "major": 2,
                "minor": 8
              },
              "releaseVersion": {
                "major": 6
              },
              "changeType": "REMOVE_FIELD",
              "description": "enrichment_fields will be removed with no replacement."
            }
          },
          "payment": {
            "$ref": "#/components/schemas/paymentsPayment",
            "description": "The `Payment` to be enriched. Present on resource creation."
          }
        }
      },
      "payment_actionsPaymentSchemeEnrichmentActionResponse": {
        "type": "object",
        "properties": {
          "scheme_transaction_id": {
            "type": "string",
            "description": "A valid scheme transaction ID. This will be assigned to the `scheme_transaction_id` field of the associated `Payment` resource."
          },
          "scheme_payment_type": {
            "type": "string",
            "description": "The scheme specific payment type. This will be assigned the `scheme_payment_type` field of the associated `Payment` resource."
          },
          "settlement_date": {
            "type": "string",
            "description": "The date that the associated `Payment` must be settled on, in YYYY-MM-DD format. This will be assigned the `settlement_date` field of the associated `Payment` resource."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Scheme Enrichment metadata. This will update the `metadata` field of the associated `Payment` resource. New keys will be appended to the existing metadata. Keys that are already present on the `Payment` will be updated. Keys that are already present on the Payment can be unset by setting their value to an empty string. An empty metadata value will result in no changes to the `Payment` metadata.",
            "x-release-info": {
              "releaseVersion": {
                "major": 3
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to allow the capture of optional metadata"
            }
          }
        }
      },
      "payment_actionsPaymentSchemeSubmissionAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/payment_actionsPaymentSchemeSubmissionActionRequest",
            "description": "The request that is specific to the action type. Present on resource creation."
          },
          "response": {
            "$ref": "#/components/schemas/payment_actionsPaymentSchemeSubmissionActionResponse",
            "description": "The response that is specific to the action type. This is set by the client resolving the `PaymentAction`. Required."
          }
        }
      },
      "payment_actionsPaymentSchemeSubmissionActionRequest": {
        "type": "object",
        "properties": {
          "payment": {
            "$ref": "#/components/schemas/paymentsPayment",
            "description": "The `Payment` which must be submitted to the scheme. Present on resource creation."
          }
        }
      },
      "payment_actionsPaymentSchemeSubmissionActionResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/payment_actionsPaymentSubmissionStatus",
            "description": "The status of the scheme submission. Required."
          },
          "scheme_status_code": {
            "type": "string",
            "description": "The scheme-specific status code of the submission. Optional."
          },
          "reason": {
            "type": "string",
            "description": "A string value containing information about the reason for the status. Optional.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 7
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to allow the capture of additional information regarding scheme submission"
            }
          },
          "interbank_settlement_information": {
            "$ref": "#/components/schemas/paymentsInterbankSettlementInformation",
            "description": "Scheme-specific payment settlement information. Optional.",
            "x-release-info": {
              "releaseVersion": {
                "major": 3
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to allow the capture of interbank settlement information"
            }
          },
          "redirected_party": {
            "$ref": "#/components/schemas/paymentsBBAN",
            "description": "If funds were redirected, the party that funds were redirected to. Optional.",
            "x-release-info": {
              "releaseVersion": {
                "major": 3
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to allow the capture of redirected information"
            }
          }
        }
      },
      "payment_actionsPaymentSchemeValidationAction": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/payment_actionsPaymentSchemeValidationActionRequest",
            "description": "The request that is specific to the action type. Present on resource creation."
          },
          "response": {
            "$ref": "#/components/schemas/payment_actionsPaymentSchemeValidationActionResponse",
            "description": "The response that is specific to the action type. This is set by the client resolving the `PaymentAction`. Required."
          }
        }
      },
      "payment_actionsPaymentSchemeValidationActionRequest": {
        "type": "object",
        "properties": {
          "payment": {
            "$ref": "#/components/schemas/paymentsPayment",
            "description": "The `Payment` which must be validated in accordance with the rules of the relevant Scheme. Present on resource creation."
          }
        }
      },
      "payment_actionsPaymentSchemeValidationActionResponse": {
        "type": "object",
        "properties": {
          "is_valid": {
            "type": "boolean",
            "description": "The outcome of the validation. Required."
          },
          "reason": {
            "type": "string",
            "description": "A string value containing information about the reason for validation. Optional."
          }
        }
      },
      "payment_actionsPaymentSubmissionStatus": {
        "type": "string",
        "enum": [
          "SUBMISSION_STATUS_UNKNOWN",
          "SUBMISSION_STATUS_ACCEPTED",
          "SUBMISSION_STATUS_REJECTED",
          "SUBMISSION_STATUS_FAILED"
        ],
        "default": "SUBMISSION_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "SUBMISSION_STATUS_ACCEPTED": "The `Payment` has been submitted to the scheme and has been accepted by the scheme and receiving member.",
          "SUBMISSION_STATUS_FAILED": "The `Payment` has failed scheme submission due to being rejected by the scheme's gateway.",
          "SUBMISSION_STATUS_REJECTED": "The `Payment` has been submitted to the scheme but has been rejected by the scheme or receiving member.",
          "SUBMISSION_STATUS_UNKNOWN": "Default value."
        }
      },
      "payment_actionsReversalExceptionHandlingApproach": {
        "type": "string",
        "enum": [
          "REVERSAL_EXCEPTION_HANDLING_APPROACH_UNKNOWN",
          "REVERSAL_EXCEPTION_HANDLING_APPROACH_FORCE_DEBIT_ORIGINAL_CREDITOR",
          "REVERSAL_EXCEPTION_HANDLING_APPROACH_MANUAL"
        ],
        "default": "REVERSAL_EXCEPTION_HANDLING_APPROACH_UNKNOWN",
        "x-enum-value-descriptions": {
          "REVERSAL_EXCEPTION_HANDLING_APPROACH_FORCE_DEBIT_ORIGINAL_CREDITOR": "Indicates the `Payment` should attempt to force a debit of the original creditor.",
          "REVERSAL_EXCEPTION_HANDLING_APPROACH_MANUAL": "Indicates that the exception has been handled manually.",
          "REVERSAL_EXCEPTION_HANDLING_APPROACH_UNKNOWN": "Default value."
        }
      },
      "payment_actionsUpdatePaymentActionRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID to ensure the request is idempotent. Required.",
            "x-example-override": "009deeb0-bd00-416b-845c-9e6b8f57ae9c"
          },
          "payment_action": {
            "$ref": "#/components/schemas/payment_actionsPaymentAction",
            "description": "The `PaymentAction` that is to be updated. Required.",
            "x-excluded-fields": [
              "type",
              "status",
              "payment_id",
              "scheme_id",
              "create_timestamp",
              "update_timestamp",
              "schedule_settlement.request",
              "create_return.request",
              "scheme_submission.request",
              "scheme_enrichment.request",
              "scheme_validation.request",
              "determine_reversal_settlement_date.request",
              "determine_reversal_exception_handling_approach.request"
            ]
          },
          "update_mask": {
            "$ref": "#/components/schemas/protobufFieldMask",
            "description": "The field mask used to indicate which fields in the resource are to be updated. Required. The allowed fields are: `schedule_settlement.response`, `create_return.response`, `scheme_submission.response`, `scheme_validation.response`, `scheme_enrichment.response`, `determine_reversal_settlement_date.response`. `determine_reversal_exception_handling_approach.response`.",
            "x-example-override": "{\"paths\": [\"schedule_settlement.response\"]}"
          }
        }
      },
      "paymentsAdditionalCreditInformation": {
        "type": "object",
        "properties": {
          "redirected_internal_account_id": {
            "type": "string",
            "description": "The internal account that funds were redirected to during INBOUND Payment exception handling flows, if funds were redirected. Optional.",
            "x-example-override": ""
          },
          "redirected_party": {
            "$ref": "#/components/schemas/paymentsBBAN",
            "description": "The party that funds were redirected to, if funds were redirected. Only applicable to OUTBOUND Payments. Optional."
          }
        },
        "description": "AdditionalCreditInformation contains information about the creditor."
      },
      "paymentsAdditionalDebitInstructions": {
        "type": "object",
        "properties": {
          "internal_account_id": {
            "type": "string",
            "description": "If set, the internal account specified will be debited instead of the account associated with the `debitor_party` provided. If not set on creation, this field is never populated. The field can only be set for OUTBOUND payments of type RETURN.",
            "x-example-override": ""
          }
        },
        "description": "AdditionalDebitInstructions contains instructions specific to the debiting of a Payment."
      },
      "paymentsBBAN": {
        "type": "object",
        "properties": {
          "bank_id_code": {
            "type": "string",
            "description": "The `bank_id_code` enables unique identification of a single bank account held by a branch of a bank. Together with the `bank_id`, these two fields enable the identification of a single account within a country. Use `GBDSC` here to identify a `bank_id` that is a UK sort code. Use `SWBIC` to identify a `bank_id` that is a BIC.\n\nFor OUTBOUND payments with a `scheme` value of FPS, this must be set to `GBDSC` for both the `debitor_party` and `creditor_party`.\n\nFor INBOUND payments with a `scheme` value of FPS that have originated overseas (POOs), this will be set to be `SWBIC` for the `debitor_party`. The Payments Hub will not automatically reject payments that have originated overseas. Users that intend to reject such payments should implement this logic at a product level (in the associated Smart Contract).",
            "x-example-override": "GBDSC"
          },
          "bank_id": {
            "type": "string",
            "description": "The ID of the bank branch the account is held in. Required on resource creation. If the `bank_id_code` is a GB Domestic Sort Code (GBDSC), this must be a UK sort code. If the `bank_id_code` is SWBIC, this must be a Bank Identifier Code (BIC).",
            "x-example-override": "123456"
          },
          "account_number": {
            "type": "string",
            "description": "The account number. Optional on resource creation. It is mutually exclusive with `iban`.",
            "x-example-override": "12345678"
          }
        },
        "description": "A BBAN message contains fields required to create a Basic Bank Account Number (BBAN). The exact form of any BBAN is decided by the country it applies to. However, all BBANs must contain the domestic bank account number, a branch identifier and potential routing information."
      },
      "paymentsCoreRestrictions": {
        "type": "object",
        "properties": {
          "all": {
            "type": "boolean",
            "description": "If set to `true`, then all restriction checks performed by the Core API when creating postings will be overridden."
          },
          "restriction_set_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of all IDs of [RestrictionSets](/api/core_api/#Restrictions-RestrictionSet) that should be overridden by the Core API. Any restriction encountered by the Core API that belongs to one of the listed `restriction_set_ids` will be ignored. A user error will be returned if this field is populated while the `all` field is set to `true`."
          }
        },
        "description": "CoreRestrictions allows for certain restrictions in the Core API to be overridden."
      },
      "paymentsInterbankSettlementInformation": {
        "type": "object",
        "properties": {
          "interbank_settlement_date": {
            "type": "string",
            "description": "A string representation of the date that the Payment is settled within the relevant payment scheme. While no validation is performed on the format of this value, a YYYY-MM-DD format is recommended. Optional.",
            "x-example-override": "2020-05-14"
          },
          "interbank_settlement_cycle_id": {
            "type": "string",
            "description": "Indicates the settlement cycle the Payment was or will be settled in. For FPS, possible values are `1`, `2` and `3`. Optional.",
            "x-example-override": "1"
          }
        },
        "description": "InterbankSettlementInformation records additional information about the settlement of a Payment in regards to the relevant Payment scheme. This information can be considered metadata in that it will never be used to trigger an action."
      },
      "paymentsMigrationInfo": {
        "type": "object",
        "properties": {
          "is_migrated": {
            "type": "boolean",
            "description": "This field indicates whether the Payment has been migrated from another platform into Vault."
          },
          "tranche_id": {
            "type": "string",
            "description": "The ID of the tranche that the Payment was migrated within."
          },
          "migration_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the Payment was migrated."
          },
          "source_resource_id": {
            "type": "string",
            "description": "The ID from the source platform of the migrated Payment."
          }
        },
        "description": "MigrationInfo contains information specific to migrated Payment resources."
      },
      "paymentsOverrides": {
        "type": "object",
        "properties": {
          "core_restrictions": {
            "$ref": "#/components/schemas/paymentsCoreRestrictions",
            "description": "Instructions to override [Restrictions](/api/core_api/#Restrictions) that are enforced by the Core API. These include [Account](/api/core_api/#Accounts-Account), [PaymentDevice](/api/core_api/#Payment_devices-PaymentDevice) and [Customer](/api/core_api/#Customers-Customer)-level restrictions.",
            "x-example-override": "{}"
          }
        },
        "description": "Overrides are used to override certain checks for a payment."
      },
      "paymentsParty": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "The Vault account identifier of the specified party. Automatically populated if a Vault account matches the supplied Party information. For further information, see [BankAccount](/api/payments_hub_api/#Bank_Accounts-BankAccount). Optional."
          },
          "name": {
            "type": "string",
            "description": "The customer name associated with the account. For FPS this is required for OUTBOUND payments, but optional for INBOUND payments. For OnUs payments this is optional.",
            "x-example-override": "John Doe"
          },
          "iban": {
            "type": "string",
            "description": "The International Bank Account Number (IBAN) is a unique identifier that contains information about the owner of a bank account such as the account number, bank and branch information and country code. Optional on resource creation. It is mutually exclusive with `bban.account_number`.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to allow collection of IBAN routing information"
            },
            "x-example-override": "GB29BICA12345612345678"
          },
          "identification": {
            "type": "string",
            "description": "Identification of a party. It can identify an individual or an organisation. Optional.",
            "x-release-info": {
              "releaseVersion": {
                "major": 1,
                "minor": 13
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to allow collection of party identification"
            },
            "x-example-override": ""
          },
          "bban": {
            "$ref": "#/components/schemas/paymentsBBAN",
            "required": true
          }
        },
        "description": "The party represents either the sending or receiving party's account details."
      },
      "paymentsPayment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the payment inside Payments Hub. This will be included in any postings created as a result of the payment. Optional on resource creation; if it is not set, a UUID will be generated. Required for update calls.",
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          },
          "create_request_id": {
            "type": "string",
            "description": "The ID of the request that originally generated the payment.",
            "x-release-info": {
              "noticeVersion": {
                "major": 2,
                "minor": 8
              },
              "releaseVersion": {
                "major": 6
              },
              "changeType": "REMOVE_FIELD",
              "description": "create_request_id will be removed with no replacement. Do not use the information in this field. Access to request ID that originally created the resource is not necessary to use the API."
            },
            "x-example-override": "0693bd86-694b-439e-83ff-a3e3229c2e6c"
          },
          "scheme_transaction_id": {
            "type": "string",
            "description": "An identifier for the payment within the payment scheme that it belongs to.\n\nOptional for OUTBOUND payments. It is recommended that this field is not set when creating a `Payment`. The Payments Hub will generate a valid value when it has determined which scheme the payment will be routed through. If this field is set by the caller for OUTBOUND payments, the value must match the regex value set in `transaction_id_pattern` in the relevant SchemeConfig. For further information, see [SchemeConfig](/api/payments_hub_api/#Schemes-SchemeConfig).\n\nRequired for INBOUND payments. The Payments Hub performs no validation on this field for INBOUND payments.\n\nFor FPS, this field maps to the Transaction Reference Number (TRN).",
            "x-example-override": "TMFPS14213203K6RX7"
          },
          "scheme": {
            "type": "string",
            "description": "The intended payment [Scheme](/api/payments_hub_api/#Schemes) that the payment belongs to. This scheme must exist in the Payments Hub. A payment is eligible to have specific combinations of attributes based on the specified payment scheme. Required on resource creation. For OUTBOUND payments, the payment scheme that will be used to make the payment could be routed to OnUs if the Payments Hub detects that the creditor and debitor accounts are both held within Vault.\n\nSupport for BACS Payments is now deprecated.\n\nOptions: [BACS, FPS, OnUs]",
            "x-example-override": "FPS"
          },
          "execution_plan": {
            "type": "string",
            "description": "The intended execution plan within the given scheme. This will affect how the Payment is processed. Valid values for this field are dictated per scheme. If not populated on creation a value will be set according to the default value set in the Payments Hub configuration values. Optional.\n\nValid values:\n\n**FPS**:\n\n\"FPS_STANDARD_V1\" - Immediate requests to/responses from the scheme that are used to accept and reject payments. \"FPS_CLEARED_V1\" - Payments already cleared with the scheme upon arrival in Vault. This uses return payments rather than rejection messages. Inbound only.\n\n**OnUs**:\n\n\"ONUS_DEFAULT_V1\" - The default and only value for OnUs payments. Funds are transferred between Vault accounts using a single posting instruction.\n\n**BACS**:(deprecated)\n\n\"BACS_INBOUND_V1\" - Used for inbound credit transfers (Direct Credits). \"BACS_ARUCS_OUTBOUND_V1\" - Used for Automated Return of Unapplied Credits Service (ARUCS).",
            "x-example-override": "FPS_STANDARD_V1"
          },
          "settlement_information": {
            "$ref": "#/components/schemas/paymentsSettlementInformation",
            "description": "Scheme-specific payment settlement information. If you are using a Thought Machine-provided gateway connector, you do not need to populate this field.",
            "x-release-info": {
              "noticeVersion": {
                "major": 2,
                "minor": 4
              },
              "releaseVersion": {
                "major": 6
              },
              "changeType": "REMOVE_FIELD",
              "description": "Replaced by `interbank_settlement_information`: during the migration period, `settlement_information` and `interbank_settlement_information` contain the same information."
            }
          },
          "interbank_settlement_information": {
            "$ref": "#/components/schemas/paymentsInterbankSettlementInformation",
            "description": "Scheme-specific payment settlement information. If you are using a Thought Machine-provided gateway connector, you do not need to populate this field."
          },
          "settlement_date": {
            "type": "string",
            "description": "The date on which funds are settled within Vault, and when all associated movements of funds will be completed by. It will be in the format YYYY-MM-DD. This date can be in the future if the Payment is scheduled for settlement at a later date. For INBOUND Payments, the value of this field is dictated by the relevant payment scheme and will be set on creation. For OUTBOUND Payments, the value of this field will be calculated and populated automatically during processing and will not be populated on creation.",
            "x-example-override": "2020-06-21"
          },
          "amount": {
            "type": "string",
            "description": "A string value of the payment amount. This is an unsigned floating point number with an optional decimal point, for example, \"10.00\", \"10.1\", \"0.0123\", \"5\". It must be positive and non-zero. Required on resource creation. Optional if it is a RETURN type payment; the amount of the original payment will be used if omitted.\n\nFor FPS-only OUTBOUND RETURN payments, the amount of the original payment will be used even if the value has been set.",
            "x-example-override": "1000.00"
          },
          "currency": {
            "type": "string",
            "description": "The three-letter alphabetic currency code based on ISO 4217, for example, GBP and USD. Required on resource creation. Optional if it is a RETURN type payment; the currency of the original payment will be used if omitted.\n\nFor FPS-only OUTBOUND RETURN payments, the currency of the original payment will be used even if the value has been set.",
            "x-example-override": "GBP"
          },
          "reference": {
            "type": "string",
            "description": "Reference information associated with the payment that will be passed to the beneficiary. Optional. If omitted on a RETURN type payment, the reference of the original payment will be used.",
            "x-example-override": "Rent"
          },
          "current_status": {
            "$ref": "#/components/schemas/paymentsPaymentStatus",
            "description": "The current status of the payment. Output only.",
            "x-example-override": "PAYMENT_STATUS_SETTLED"
          },
          "status_reason": {
            "$ref": "#/components/schemas/paymentsStatusReason",
            "description": "The reason for the current status of the payment. Status reason can be used to infer why a payment was REJECTED or CANCELLED for example. Output only.",
            "x-example-override": "STATUS_REASON_ACCEPT"
          },
          "current_status_details": {
            "$ref": "#/components/schemas/paymentsStatusDetails",
            "description": "Provides additional information about the current status of a payment."
          },
          "target_status": {
            "$ref": "#/components/schemas/paymentsPaymentStatus",
            "description": "The target status of the payment. This can be set during a `PUT` call to the payment resource and must be set after resource creation so the payment execution engine can process the payment and perform any financial operations that might result as a consequence of the change in the target_status.\n\nOnly certain statuses can be passed as valid target statuses: For FPS:\n\nPAYMENT_STATUS_AUTHORISED, PAYMENT_STATUS_SUBMITTED, PAYMENT_STATUS_REJECTED, PAYMENT_STATUS_SETTLED, and PAYMENT_STATUS_REVERSED.\n\nIf the target_status of the payment is updated, actions will be generated in an attempt to transition the payment to its new target_status. These actions could include, for example, postings being submitted to the Postings API.",
            "x-example-override": "PAYMENT_STATUS_SETTLED"
          },
          "target_status_reason": {
            "$ref": "#/components/schemas/paymentsStatusReason",
            "description": "The justification for the target_status. For example, a payment may have a target_status of REJECTED and this could be due to STATUS_REASON_ACCOUNT_CLOSED or STATUS_REASON_INSUFFICIENT_FUNDS or many others. This field can only be set during an UpdatePayment call. Optional; Defaults to STATUS_REASON_UNKNOWN.",
            "x-example-override": "STATUS_REASON_ACCEPT"
          },
          "target_status_details": {
            "$ref": "#/components/schemas/paymentsStatusDetails",
            "description": "Provides additional information about the target status of a payment."
          },
          "debitor_party": {
            "$ref": "#/components/schemas/paymentsParty",
            "description": "The details of the party sending the Payment. Required on resource creation, except for `payment_type` RETURN where the `creditor_party` of the original Payment will be used if not specified."
          },
          "creditor_party": {
            "$ref": "#/components/schemas/paymentsParty",
            "description": "The details of the party receiving the payment. Required on resource creation, except for `payment_type` RETURN where the `debitor_party` of the original Payment will be used if not specified."
          },
          "direction": {
            "$ref": "#/components/schemas/paymentsPaymentDirection",
            "description": "Indicates whether the payment originates from within Vault (OUTBOUND) or from outside Vault (INBOUND). Required on resource creation.",
            "x-example-override": "PAYMENT_DIRECTION_OUTBOUND"
          },
          "payment_type": {
            "$ref": "#/components/schemas/paymentsPaymentType",
            "description": "The type of payment. The `payment_type` value used here determines what validation is applied to the payment. The Payments Hub performs the same validation on all enum values detailed here, apart from PAYMENT_TYPE_RETURN where validation differences get listed on the individual fields. Required on resource creation.",
            "x-example-override": "PAYMENT_TYPE_IMMEDIATE_PAYMENT"
          },
          "scheme_payment_type": {
            "type": "string",
            "description": "A freeform string representation of the payment type indicated by the selected payment scheme. This field is for information purposes only and will not affect processing in the core Payments Hub, unlike the `payment_type` field which may affect how a payment is validated and processed. No validation is performed on this field. Optional on resource creation.\n\n`scheme_payment_type` is set by the Thought Machine gateway connectors (both Form3 and Bottomline) for inbound payments. This field will be populated for outbound payments.",
            "x-example-override": "SIP"
          },
          "payment_channel": {
            "$ref": "#/components/schemas/paymentsPaymentChannel",
            "description": "The channel used to initiate the payment. Optional on resource creation.",
            "x-example-override": "PAYMENT_CHANNEL_INTERNET"
          },
          "processing_priority": {
            "$ref": "#/components/schemas/paymentsProcessingPriority",
            "description": "The processing priority of the payment, set by the gateway connector that processed it. Optional.\n\nNote that when processing a payment, the Payments Hub does not use this value to determine its priority.",
            "x-example-override": "PROCESSING_PRIORITY_HIGH"
          },
          "purpose": {
            "$ref": "#/components/schemas/paymentsPurpose",
            "description": "Provides the underlying reason for the Payment transaction. Optional."
          },
          "tax_reference": {
            "type": "string",
            "description": "Indicates information related to regulatory reporting, such as tax-related payroll data. Optional.",
            "x-release-info": {
              "releaseVersion": {
                "major": 1,
                "minor": 13
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to allow collection of regulatory reporting reference tag"
            },
            "x-example-override": "Example tax reference"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Metadata related to the payment. Optional.",
            "x-example-override": "{\"Example key\": \"Example value\"}"
          },
          "value_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the payment was created. This is generated by the Payments Hub. If set, this will be used to populate the `value_timestamp` field on submission of posting instruction batches to the Postings API (applies to Payments of all schemes, except Bacs). Use `create_timestamp` rather than `value_timestamp` as the recommended field for providing the time a Payment was created. Optional."
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the Payment was created.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 5
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to allow displaying of time of resource creation"
            }
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the last change to the payment occurred."
          },
          "standing_order_instruction_id": {
            "type": "string",
            "description": "The standing order instruction that this Payment was created under. This field is automatically populated for payments that were created due to a\n[StandingOrderInstruction](/api/payments_hub_api/#Scheduled_payments-StandingOrderInstruction). Optional.",
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          },
          "return_details": {
            "$ref": "#/components/schemas/relationsReturnDetails",
            "description": "Reference information relating to the original payment the current payment is returning and the reason for the return. Optional on resource creation; only required if the payment being created is a return and only supported for FPS payments. Return details must only be set on a payment that is of type RETURN.\n\nOnly payments in certain statuses can be returned:\n\nFor INBOUND: PAYMENT_STATUS_SETTLED, PAYMENT_STATUS_QUALIFIED_ACCEPTANCE, PAYMENT_STATUS_UNAPPLIED_ACCOUNT_SETTLED.\n\nFor OUTBOUND: All statuses.\n\nPreviously returned payments and payments of type RETURN cannot be returned."
          },
          "returned_by_details": {
            "$ref": "#/components/schemas/relationsReturnedByDetails",
            "description": "Holds return information if the payment is subsequently returned by another payment. Output only."
          },
          "additional_credit_information": {
            "$ref": "#/components/schemas/paymentsAdditionalCreditInformation",
            "description": "Additional information associated with this Payment; this is populated only once an attempt has been made to transfer funds to the `creditor_party`. In most cases, this field will not be populated."
          },
          "additional_debit_instructions": {
            "$ref": "#/components/schemas/paymentsAdditionalDebitInstructions",
            "description": "Additional instructions that can be used when creating outbound payments."
          },
          "overrides": {
            "$ref": "#/components/schemas/paymentsOverrides",
            "description": "Options to override certain checks and restrictions for the Payment."
          },
          "migration_info": {
            "$ref": "#/components/schemas/paymentsMigrationInfo",
            "description": "Migration information for Payments that have been migrated into Vault from another platform.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 5
              },
              "changeType": "ADD_FIELD",
              "description": "Field added so that clients can migrate a Payment from legacy system"
            }
          }
        }
      },
      "paymentsPaymentChannel": {
        "type": "string",
        "enum": [
          "PAYMENT_CHANNEL_UNKNOWN",
          "PAYMENT_CHANNEL_INTERNET",
          "PAYMENT_CHANNEL_PHONE",
          "PAYMENT_CHANNEL_BRANCH",
          "PAYMENT_CHANNEL_LETTER",
          "PAYMENT_CHANNEL_EMAIL",
          "PAYMENT_CHANNEL_PAYM"
        ],
        "default": "PAYMENT_CHANNEL_UNKNOWN",
        "x-enum-value-descriptions": {
          "PAYMENT_CHANNEL_BRANCH": "Thought Machine FPS gateway connectors map this to the FPS Payment Sub-type code 003 (branch instruction).",
          "PAYMENT_CHANNEL_EMAIL": "Thought Machine FPS gateway connectors map this to the FPS Payment Sub-type code 005 (email).",
          "PAYMENT_CHANNEL_INTERNET": "Thought Machine FPS gateway connectors map this to the FPS Payment Sub-type code 002 (internet banking).",
          "PAYMENT_CHANNEL_LETTER": "Thought Machine FPS gateway connectors map this to the FPS Payment Sub-type code 004 (letter).",
          "PAYMENT_CHANNEL_PAYM": "Thought Machine FPS gateway connectors map this to the FPS Payment Sub-type code 006 (Paym, formerly Mobile Payments Service).",
          "PAYMENT_CHANNEL_PHONE": "Thought Machine FPS gateway connectors map this to the FPS Payment Sub-type code 001 (telephone banking).",
          "PAYMENT_CHANNEL_UNKNOWN": "Default value."
        }
      },
      "paymentsPaymentDirection": {
        "type": "string",
        "enum": [
          "PAYMENT_DIRECTION_UNKNOWN",
          "PAYMENT_DIRECTION_INBOUND",
          "PAYMENT_DIRECTION_OUTBOUND"
        ],
        "default": "PAYMENT_DIRECTION_UNKNOWN",
        "x-enum-value-descriptions": {
          "PAYMENT_DIRECTION_INBOUND": "A payment whose origin is external; not Vault.",
          "PAYMENT_DIRECTION_OUTBOUND": "A payment whose origin is Vault.",
          "PAYMENT_DIRECTION_UNKNOWN": "Default value."
        }
      },
      "paymentsPaymentStatus": {
        "type": "string",
        "enum": [
          "PAYMENT_STATUS_UNKNOWN",
          "PAYMENT_STATUS_RECEIVED",
          "PAYMENT_STATUS_AWAITING_AUTHORISATION",
          "PAYMENT_STATUS_AUTHORISED",
          "PAYMENT_STATUS_SUBMITTED",
          "PAYMENT_STATUS_AWAITING_SETTLEMENT",
          "PAYMENT_STATUS_AWAITING_HARD_SETTLEMENT",
          "PAYMENT_STATUS_AWAITING_RELEASE",
          "PAYMENT_STATUS_REJECTED",
          "PAYMENT_STATUS_SETTLED",
          "PAYMENT_STATUS_RECEIVING_MEMBER_REJECTED",
          "PAYMENT_STATUS_AWAITING_REVERSAL",
          "PAYMENT_STATUS_REVERSED",
          "PAYMENT_STATUS_QUALIFIED_ACCEPTANCE",
          "PAYMENT_STATUS_AWAITING_QUALIFIED_ACCEPTANCE",
          "PAYMENT_STATUS_CANCELLED",
          "PAYMENT_STATUS_REVERSAL_REQUIRES_REVIEW",
          "PAYMENT_STATUS_AWAITING_UNAPPLIED_ACCOUNT_SETTLEMENT",
          "PAYMENT_STATUS_UNAPPLIED_ACCOUNT_SETTLED",
          "PAYMENT_STATUS_RETURNED",
          "PAYMENT_STATUS_AWAITING_SCHEME_VALIDATION",
          "PAYMENT_STATUS_AWAITING_SCHEDULED_SETTLEMENT",
          "PAYMENT_STATUS_AWAITING_SCHEME_SUBMISSION"
        ],
        "default": "PAYMENT_STATUS_UNKNOWN",
        "x-enum-value-release-info": {
          "PAYMENT_STATUS_AWAITING_SCHEME_SUBMISSION": {
            "releaseVersion": {
              "major": 2,
              "minor": 4
            },
            "changeType": "ADD_ENUM_VALUE",
            "description": "Value added to allow align statuses for payment flows"
          }
        },
        "x-enum-value-descriptions": {
          "PAYMENT_STATUS_AUTHORISED": "A payment is AUTHORISED once the check to verify if the account can receive/send the funds has been successfully run and the Auth postings have been accepted.",
          "PAYMENT_STATUS_AWAITING_AUTHORISATION": "A payment is AWAITING AUTHORISATION once its authorisation postings have been submitted to the Postings API. Payments Hub then waits for a response from the Postings API for these postings.",
          "PAYMENT_STATUS_AWAITING_HARD_SETTLEMENT": "A payment is AWAITING HARD SETTLEMENT once its hard settlement postings have been submitted to the Postings API and Payments Hub is awaiting a response.",
          "PAYMENT_STATUS_AWAITING_QUALIFIED_ACCEPTANCE": "A payment is AWAITING QUALIFIED ACCEPTANCE once postings have been submitted to the Postings API to move the funds to an exception handling account and the Payments Hub is awaiting a response.",
          "PAYMENT_STATUS_AWAITING_RELEASE": "A payment is AWAITING RELEASE once its release postings have been sent to the Postings API and Payments Hub is awaiting a response.",
          "PAYMENT_STATUS_AWAITING_REVERSAL": "A payment is AWAITING REVERSAL once postings to undo the payment have been submitted to the Postings API and Payments Hub is awaiting a response. The payment will typically be undone using release or hard settlement postings.",
          "PAYMENT_STATUS_AWAITING_SCHEDULED_SETTLEMENT": "A payment enters the AWAITING SCHEDULED SETTLEMENT status to indicate that the payment is waiting for the triggering of a given schedule in order to complete settlement. Payments that require multi-day processing will enter this state while they await the date at which the settlement processing may begin.",
          "PAYMENT_STATUS_AWAITING_SCHEME_SUBMISSION": "An OUTBOUND payment enters the AWAITING SCHEME SUBMISSION status to indicate that the payment is waiting to be submitted to the appropriate scheme. The duration a payment remains in this state is dependent on the response time for the scheme.",
          "PAYMENT_STATUS_AWAITING_SCHEME_VALIDATION": "An OUTBOUND payment enters the transient AWAITING SCHEME VALIDATION status to indicate that scheme-specific validation checks are currently being performed. Payments should not stay in this status for a prolonged period of time.",
          "PAYMENT_STATUS_AWAITING_SETTLEMENT": "A payment is AWAITING SETTLEMENT once its settlement postings have been submitted to the Postings API and Payments Hub is awaiting a response.",
          "PAYMENT_STATUS_AWAITING_UNAPPLIED_ACCOUNT_SETTLEMENT": "A cleared INBOUND payment is AWAITING UNAPPLIED ACCOUNT SETTLEMENT when it has been rejected and postings have been sent to the Postings API to place the funds in an unapplied funds account. The Payments Hub is awaiting a response at this point. The AWAITING UNAPPLIED ACCOUNT SETTLEMENT status does not get applied to an OUTBOUND payment.",
          "PAYMENT_STATUS_CANCELLED": "A payment is CANCELLED if the payment execution has been stopped. This could happen, for example, if an OUTBOUND payment cannot be validated during creation OR if the payment cannot be processed due to failed scheme validation or insufficient debitor funds.",
          "PAYMENT_STATUS_QUALIFIED_ACCEPTANCE": "An INBOUND payment can be placed into qualified acceptance; this means funds have been credited to the bank but placed in an exception handling account.",
          "PAYMENT_STATUS_RECEIVED": "A payment is RECEIVED once it has been validated and persisted in the Payments Hub.",
          "PAYMENT_STATUS_RECEIVING_MEMBER_REJECTED": "An OUTBOUND payment is RECEIVING MEMBER REJECTED when the receiving party has rejected the payment.",
          "PAYMENT_STATUS_REJECTED": "Indicates that a payment has been rejected.",
          "PAYMENT_STATUS_RETURNED": "A payment is RETURNED if it has been initially rejected and then successfully returned by a separate payment of type RETURN. A payment in this status indicates that the return payment has been completed.",
          "PAYMENT_STATUS_REVERSAL_REQUIRES_REVIEW": "If an INBOUND payment is reversed in a state from which automatic reversals are not supported, it will be given the REVERSAL REQUIRES REVIEW status. This status is a prompt that manual intervention is required to complete the reversal of the payment. It is recommended that the status of the payment is reviewed, and the ledger adjusted to reflect the reversal if required. The REVERSAL REQUIRES REVIEW status does not get applied to an OUTBOUND payment.",
          "PAYMENT_STATUS_REVERSED": "A payment may be reversed. If a payment has the status REVERSED, the reversal is complete and any movement of funds resulting from the reversal has already occurred.",
          "PAYMENT_STATUS_SETTLED": "A payment is SETTLED once the settlement postings have been accepted. Settlement is the final action of any payment process. Once settlement postings are accepted, the payment is considered SETTLED and no further action on that payment is possible/necessary.",
          "PAYMENT_STATUS_SUBMITTED": "A payment is SUBMITTED once the request to execute the payment has been submitted to the appropriate payment scheme and Payments Hub is awaiting a response.",
          "PAYMENT_STATUS_UNAPPLIED_ACCOUNT_SETTLED": "An INBOUND payment is UNAPPLIED ACCOUNT SETTLED when its funds have been placed in the unapplied funds account specified in the Payments Hub configuration. This is due to being unable to apply the funds to the customer's account for some reason. The UNAPPLIED ACCOUNT SETTLED status does not get applied to an OUTBOUND payment.",
          "PAYMENT_STATUS_UNKNOWN": "Default value."
        }
      },
      "paymentsPaymentType": {
        "type": "string",
        "enum": [
          "PAYMENT_TYPE_UNKNOWN",
          "PAYMENT_TYPE_IMMEDIATE_PAYMENT",
          "PAYMENT_TYPE_RETURN",
          "PAYMENT_TYPE_FORWARD_DATED_PAYMENT",
          "PAYMENT_TYPE_STANDING_ORDER_PAYMENT",
          "PAYMENT_TYPE_CREDIT_TRANSFER"
        ],
        "default": "PAYMENT_TYPE_UNKNOWN",
        "x-enum-value-release-info": {
          "PAYMENT_TYPE_CREDIT_TRANSFER": {
            "releaseVersion": {
              "major": 1,
              "minor": 13
            },
            "changeType": "ADD_ENUM_VALUE",
            "description": "Enum value added to indicate a generic and scheme agnostic credit transfer payment"
          }
        },
        "x-enum-value-descriptions": {
          "PAYMENT_TYPE_CREDIT_TRANSFER": "A payment that cannot be categorised using the other payment types.",
          "PAYMENT_TYPE_FORWARD_DATED_PAYMENT": "A payment that was scheduled to be processed on a specific date. This is typically an *unattended* payment (a payment that is not initiated by the customer via online banking, phone banking or in branch). Payments created as a result of a [FuturePaymentInstruction](/api/payments_hub_api/#Scheduled_payments-FuturePaymentInstruction) use this payment type.",
          "PAYMENT_TYPE_IMMEDIATE_PAYMENT": "A payment that is processed immediately. This is typically used for what are known as *attended* payments (payments that are initiated by the customer via online banking, phone banking or in branch).",
          "PAYMENT_TYPE_RETURN": "A payment that is returning a previously processed payment. This is typically created as part of an exception handling payment flow.",
          "PAYMENT_TYPE_STANDING_ORDER_PAYMENT": "A payment that was created due to a standing order. This is typically an *unattended* payment (a payment that is not initiated by the customer via online banking, phone banking or in branch). Payments created as a result of a [StandingOrderInstruction](/api/payments_hub_api/#Scheduled_payments-StandingOrderInstruction) use this payment type.",
          "PAYMENT_TYPE_UNKNOWN": "Default value. This is equivalent to a value that has not been set."
        }
      },
      "paymentsProcessingPriority": {
        "type": "string",
        "enum": [
          "PROCESSING_PRIORITY_UNKNOWN",
          "PROCESSING_PRIORITY_NORM",
          "PROCESSING_PRIORITY_HIGH"
        ],
        "default": "PROCESSING_PRIORITY_UNKNOWN",
        "x-enum-value-descriptions": {
          "PROCESSING_PRIORITY_HIGH": "High processing priority.",
          "PROCESSING_PRIORITY_NORM": "Normal processing priority.",
          "PROCESSING_PRIORITY_UNKNOWN": "Default value."
        }
      },
      "paymentsPurpose": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/code",
            "required": false
          },
          "proprietary": {
            "$ref": "#/components/schemas/proprietary",
            "required": false
          }
        },
        "description": "Purpose contains information about the underlying reason for the payment transaction, expressed as either a standard code or in a proprietary form."
      },
      "paymentsSettlementInformation": {
        "type": "object",
        "properties": {
          "settlement_date": {
            "type": "string",
            "description": "A string representation of the date that the Payment is settled within the relevant payment scheme. While no validation is performed on the format of this value, a YYYY-MM-DD format is recommended. Optional.",
            "x-example-override": "2020-05-14"
          },
          "settlement_cycle_id": {
            "type": "string",
            "description": "Indicates the settlement cycle the Payment was or will be settled in. For FPS, possible values are `1`, `2` and `3`. Optional.",
            "x-example-override": "1"
          }
        },
        "description": "SettlementInformation records additional information about the settlement of a payment. This information can be considered metadata in that it will never be used to trigger an action. Usage of this object is deprecated, and to be replaced by InterbankSettlementInformation."
      },
      "paymentsStatusDetails": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "This field is only set by the Payments Hub in particular scenarios and it informs callers why a payment reached its current status. The field is derived from the Payments Hub and the Postings API (for account, restriction and Smart Contract violations).",
            "x-example-override": "STATUS_REASON_ACCEPT"
          },
          "external_code": {
            "type": "string",
            "description": "Code explaining the scheme-specific status code associated with the payment. For OUTBOUND payments, only populated once a response has been received from an external party via the relevant gateway connector and the payment has transitioned past a `SUBMITTED` current status. For INBOUND payments, only populated if supported by the `execution_plan` of the payment.",
            "x-example-override": "0000"
          }
        },
        "description": "StatusDetails records the justification for the status including both internal and external information."
      },
      "paymentsStatusReason": {
        "type": "string",
        "enum": [
          "STATUS_REASON_UNKNOWN",
          "STATUS_REASON_ACCEPT",
          "STATUS_REASON_ACCOUNT_NOT_PRESENT",
          "STATUS_REASON_ACCOUNT_CLOSED",
          "STATUS_REASON_UNSUPPORTED_CURRENCY",
          "STATUS_REASON_TERMS_AND_CONDITIONS",
          "STATUS_REASON_INSUFFICIENT_FUNDS",
          "STATUS_REASON_RESTRICTIONS_PREVENT",
          "STATUS_REASON_REJECTED_BY_RECEIVER",
          "STATUS_REASON_REQUEST_TIMED_OUT",
          "STATUS_REASON_INVALID_DEBITOR_PARTY",
          "STATUS_REASON_INVALID_CREDITOR_PARTY",
          "STATUS_REASON_SCHEME_TRANSACTION_LIMIT_BREACH",
          "STATUS_REASON_BANK_OUTBOUND_TRANSACTION_LIMIT_BREACH",
          "STATUS_REASON_INVALID_CURRENCY",
          "STATUS_REASON_PAYMENT_ORIGINATED_OVERSEAS",
          "STATUS_REASON_ACCEPT_WITH_QUALIFICATION",
          "STATUS_REASON_ACCEPT_SAME_DAY",
          "STATUS_REASON_ACCEPT_NEXT_CALENDAR_DAY",
          "STATUS_REASON_ACCEPT_NEXT_WORKING_DAY",
          "STATUS_REASON_ACCEPT_NEXT_DAY_PSD",
          "STATUS_REASON_INVALID_AMOUNT",
          "STATUS_REASON_SCHEME_VALIDATION_FAILED"
        ],
        "default": "STATUS_REASON_UNKNOWN",
        "x-enum-value-descriptions": {
          "STATUS_REASON_ACCEPT": "The payment suceeded.",
          "STATUS_REASON_ACCEPT_NEXT_CALENDAR_DAY": "The payment was accepted and funds will be applied to the creditor on the next calendar day.",
          "STATUS_REASON_ACCEPT_NEXT_DAY_PSD": "The payment was be accepted and funds will be applied to the creditor at an unspecified time within PSD guidelines. Not used.",
          "STATUS_REASON_ACCEPT_NEXT_WORKING_DAY": "The payment was accepted and funds will be applied to the creditor on the next working day.",
          "STATUS_REASON_ACCEPT_SAME_DAY": "The payment was accepted on the same day and funds will be applied to the creditor on the same day.",
          "STATUS_REASON_ACCEPT_WITH_QUALIFICATION": "The payment was accepted with qualification.",
          "STATUS_REASON_ACCOUNT_CLOSED": "Postings were rejected due to the status of the underlying Account. For example, this status reason is likely to be observed if the Account is closed.",
          "STATUS_REASON_ACCOUNT_NOT_PRESENT": "[Postings](/api/core_api/#Posting_instruction_batches-CreatePostingInstructionBatchRequest) were rejected because an [Account](/api/core_api/#Accounts) with a [PaymentDevice](/api/core_api/#Payment_devices-PaymentDevice) matching the details set in `creditor_party` for INBOUND payments or `debitor_party` for OUTBOUND payments was not found.",
          "STATUS_REASON_BANK_OUTBOUND_TRANSACTION_LIMIT_BREACH": "The payment was cancelled as it breached the individual outbound transaction limit set in the Payments Hub configuration. This configuration and status reason was only available for payments with `scheme` value of \"FPS\". As of version 1.13, `STATUS_REASON_SCHEME_TRANSACTION_LIMIT_BREACH` is used instead. However, the value `STATUS_REASON_BANK_OUTBOUND_TRANSACTION_LIMIT_BREACH` may still be applied to outbound payments that were created prior to version 1.13.",
          "STATUS_REASON_INSUFFICIENT_FUNDS": "Postings were rejected because the Balance of the underlying Account was insufficient to proceed with the payment.",
          "STATUS_REASON_INVALID_AMOUNT": "The payment was cancelled due to the specified `amount` not being valid for the specified `currency`. For example, a Payment with a `currency` of \"GBP\" and an amount of \"0.001\" would be cancelled due to the minor unit specified.",
          "STATUS_REASON_INVALID_CREDITOR_PARTY": "The OUTBOUND payment was cancelled due to the `creditor_party`. This could occur because:\n\n - For non-OnUs payments, the `bank_id` and `account_number` are not valid for the scheme specified; or\n\n - For OnUs payments, if specified, the `vault_account_id` does not match the `bank_id` and `account_number`",
          "STATUS_REASON_INVALID_CURRENCY": "The payment was cancelled due to the specified `currency` not being supported by the specified `scheme`.",
          "STATUS_REASON_INVALID_DEBITOR_PARTY": "The OUTBOUND payment was cancelled due to the `debitor_party`. This could occur because:\n\n - The `vault_account_id`, if specified, does not match the `bank_id` and `account_number` specified; or\n\n - An Account could not be identified for the `bank_id` and `account_number` specified; or\n\n - The status of the underlying Account is closed.",
          "STATUS_REASON_PAYMENT_ORIGINATED_OVERSEAS": "The payment was cancelled as it is a Payment Originating Overseas (POO).",
          "STATUS_REASON_REJECTED_BY_RECEIVER": "The OUTBOUND payment was rejected by the creditor party.",
          "STATUS_REASON_REQUEST_TIMED_OUT": "The OUTBOUND payment did not succeed because of a timeout downstream.",
          "STATUS_REASON_RESTRICTIONS_PREVENT": "Postings were rejected due to the presence of [Restrictions](/api/core_api/#Restrictions) on the underlying Account, [Customer](/api/core_api/#Customers-Customer) and/or Payment Device.",
          "STATUS_REASON_SCHEME_TRANSACTION_LIMIT_BREACH": "The payment was cancelled as it breached the individual transaction limit set in the [SchemeConfig](/api/payments_hub_api/#Schemes) of the [Scheme](/api/payments_hub_api/#Schemes).",
          "STATUS_REASON_SCHEME_VALIDATION_FAILED": "The OUTBOUND payment was cancelled because it failed the scheme validation stage.",
          "STATUS_REASON_TERMS_AND_CONDITIONS": "Postings were rejected to a breach of the terms and conditions of the financial product associated with the Account.",
          "STATUS_REASON_UNKNOWN": "Default value.",
          "STATUS_REASON_UNSUPPORTED_CURRENCY": "Postings were rejected due to the `currency` of the payment not being supported by the underlying Account."
        }
      },
      "relationsReturnDetails": {
        "type": "object",
        "properties": {
          "returned_payment_id": {
            "type": "string",
            "description": "The ID of the payment that is to be returned.",
            "x-example-override": ""
          },
          "reason": {
            "type": "string",
            "description": "This is a free form string field that you can set when you create a return payment, to store additional information about the reason for that return payment. This field is optional. The contents of this field are for informational purposes only, and are not used in any later processing of the return Payment.",
            "x-example-override": ""
          },
          "external_code": {
            "type": "string",
            "description": "This is the scheme-specific code that provides the reason for the return payment. This can be set by any caller on creation of a payment of type `PAYMENT_TYPE_RETURN`. For an INBOUND payment, this will be the value of the return reason code provided by the relevant scheme/gateway component. For an OUTBOUND payment, this can be set to define the exact action code that will be used when sending the payment to the relevant scheme/gateway. If the value provided is not a valid action code for the selected scheme, the payment will be CANCELLED with status reason `STATUS_REASON_SCHEME_VALIADTION_FAILED`. Required on resource creation, unless the `return_reason` field has been populated.",
            "x-example-override": ""
          }
        }
      },
      "relationsReturnedByDetails": {
        "type": "object",
        "properties": {
          "returned_by_payment_id": {
            "type": "string",
            "description": "The ID of the original payment that created the returned payment.",
            "x-example-override": ""
          }
        }
      },
      "v1AccountViolation": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "The ID of the account affected by the violation."
          },
          "payment_device_token": {
            "type": "string",
            "description": "The payment device token affected by the violation."
          },
          "type": {
            "$ref": "#/components/schemas/v1AccountViolationType",
            "description": "The type of violation."
          }
        },
        "description": "* AccountViolation describes a violation related to an account targeted by a PostingInstruction."
      },
      "v1AccountViolationType": {
        "type": "string",
        "enum": [
          "ACCOUNT_VIOLATION_ACCOUNT_NOT_PRESENT",
          "ACCOUNT_VIOLATION_ACCOUNT_STATUS_INVALID",
          "ACCOUNT_VIOLATION_UNSUPPORTED_DENOMINATION",
          "ACCOUNT_VIOLATION_PAYMENT_DEVICE_INVALID"
        ],
        "default": "ACCOUNT_VIOLATION_ACCOUNT_NOT_PRESENT",
        "description": "* AccountViolation type characterises an account violations.",
        "x-enum-value-descriptions": {
          "ACCOUNT_VIOLATION_ACCOUNT_NOT_PRESENT": "The instruction's target account is not present.",
          "ACCOUNT_VIOLATION_ACCOUNT_STATUS_INVALID": "The instruction's target account is in a status that doesn't allow postings (for example, CLOSED or PENDING_OPENING).",
          "ACCOUNT_VIOLATION_PAYMENT_DEVICE_INVALID": "The instruction's payment device token resolved to a payment device that has an invalid status as of this batch's value_timestamp.",
          "ACCOUNT_VIOLATION_UNSUPPORTED_DENOMINATION": "The instruction's target account does not support the posted denomination."
        }
      },
      "v1AuthorisationAdjustment": {
        "type": "object",
        "properties": {
          "denomination": {
            "type": "string",
            "description": "The instruction denomination.",
            "x-output-only": true
          },
          "advice": {
            "type": "boolean",
            "description": "Can be set to true to ensure that funds are ringfenced regardless of the outcome of balance checks. To ensure that posting instructions with `advice` set to true are excluded from the contract balance check, the flag `exclude_advice` must also be set to true. See [Balance check](/reference/contracts/contracts_api_4xx/common_examples/#generic-balance_check)."
          },
          "target_account_id": {
            "type": "string",
            "description": "The `account_id` of the `target_account` for this `client_transaction`.",
            "x-output-only": true
          },
          "internal_account_id": {
            "type": "string",
            "description": "The `account_id` of the `internal_account` for this `client_transaction`.",
            "x-output-only": true
          },
          "authorised_amount": {
            "type": "string",
            "description": "The total amount authorised for this client transaction after the accepted instruction was accepted. This field is not returned if the instruction is rejected.",
            "x-output-only": true
          },
          "delta_amount": {
            "type": "string",
            "description": "The change the accepted instruction has made to the amount authorised for this client transaction. This field is not returned if the instruction is rejected.",
            "x-output-only": true
          },
          "amount": {
            "$ref": "#/components/schemas/amount",
            "required": false
          },
          "replacement_amount": {
            "$ref": "#/components/schemas/replacement_amount",
            "required": false
          }
        },
        "description": "* AuthorisationAdjustment can be used to change the amount that was ring-fenced by either: - A previously accepted OutboundAuthorisation or InboundAuthorisation; or - A previous AuthorisationAdjustment. The authorisation is identified by the PostingInstruction client_transaction_id.\n\nFor this instruction Vault will perform: - idempotency check - Posting logic checks (which verify that a previously accepted OutboundAuthorisation or   InboundAuthorisation exists and the client_transaction has not entered the   clearing/release state yet) - contract execution (only for positive ring-fenced amounts)\n\nResulting postings committed (if accepted):\n\nPostings for AuthorisationAdjustment of OutboundAuthorisation:  <> adjustment_amount = amount; amount > 0:   - Dr | amount | auth[target_account_id]   | PHASE_PENDING_OUTGOING   - Cr | amount | auth[internal_account_id] | PHASE_PENDING_OUTGOING  <> adjustment_amount = amount; amount < 0:   - Cr | amount | auth[target_account_id]   | PHASE_PENDING_OUTGOING   - Dr | amount | auth[internal_account_id] | PHASE_PENDING_OUTGOING  <> adjustment_amount = replacement_amount; replacement_amount > current amount   - Dr | delta_amount | auth[target_account_id]   | PHASE_PENDING_OUTGOING   - Cr | delta_amount | auth[internal_account_id] | PHASE_PENDING_OUTGOING  <> adjustment_amount = replacement_amount; replacement_amount < current amount   - Cr | delta_amount | auth[target_account_id]   | PHASE_PENDING_OUTGOING   - Dr | delta_amount | auth[internal_account_id] | PHASE_PENDING_OUTGOING\n\n--------------------------------------------------------------------------------------\n\n Postings for AuthorisationAdjustment of InboundAuthorisation:  <> adjustment_amount = amount; amount > 0:   - Cr | amount | auth[target_account_id]   | PHASE_PENDING_INCOMING   - Dr | amount | auth[internal_account_id] | PHASE_PENDING_INCOMING  <> adjustment_amount = amount; amount < 0:   - Dr | amount | auth[target_account_id]   | PHASE_PENDING_INCOMING   - Cr | amount | auth[internal_account_id] | PHASE_PENDING_INCOMING  <> adjustment_amount = replacement_amount; replacement_amount > current amount   - Cr | delta_amount | auth[target_account_id]   | PHASE_PENDING_INCOMING   - Dr | delta_amount | auth[internal_account_id] | PHASE_PENDING_INCOMING  <> adjustment_amount = replacement_amount; replacement_amount < current amount   - Dr | delta_amount | auth[target_account_id]   | PHASE_PENDING_INCOMING   - Cr | delta_amount | auth[internal_account_id] | PHASE_PENDING_INCOMING"
      },
      "v1ContractViolation": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "The ID of the account affected by the violation."
          },
          "type": {
            "$ref": "#/components/schemas/v1ContractViolationType",
            "description": "The type of contract violation."
          },
          "reason": {
            "type": "string",
            "description": "The reason for a contract violation."
          }
        },
        "description": "* ContractViolation characterises a violation regarding contracts."
      },
      "v1ContractViolationType": {
        "type": "string",
        "enum": [
          "CONTRACT_VIOLATION_BREACH_TERMS_AND_CONDITIONS",
          "CONTRACT_VIOLATION_INSUFFICIENT_FUNDS"
        ],
        "default": "CONTRACT_VIOLATION_BREACH_TERMS_AND_CONDITIONS",
        "description": "* ContractViolationType characterises a contract violation.",
        "x-enum-value-descriptions": {
          "CONTRACT_VIOLATION_BREACH_TERMS_AND_CONDITIONS": "The instruction breaches the terms and conditions of the target account's contract.",
          "CONTRACT_VIOLATION_INSUFFICIENT_FUNDS": "The Posting instruction cannot be applied due to insufficient funds."
        }
      },
      "v1CustomInstruction": {
        "type": "object",
        "properties": {
          "postings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1Posting"
            },
            "description": "A list of postings (credits and debits). The net sum of credit postings must equal the net sum of debit postings per asset/denomination/phase."
          }
        },
        "description": "* CustomInstruction specifies a list of credits and debits to be written to the ledger.\n\nFor this instruction Vault will perform the following checks: - There are 128 or fewer postings in the instruction - Net amounts credited and debited are equal - Idempotency - Account status - Account/customer/payment_device restrictions\n\n If they are accepted the resulting postings committed are specified by the postings field."
      },
      "v1InboundAuthorisation": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "The authorisation amount."
          },
          "denomination": {
            "type": "string",
            "description": "The instruction denomination."
          },
          "target_account": {
            "$ref": "#/components/schemas/v1TargetAccount",
            "description": "The instruction `target_account`."
          },
          "internal_account_id": {
            "type": "string",
            "description": "The `internal_account_id` must be the ID of an internal account in Vault."
          },
          "advice": {
            "type": "boolean",
            "description": "Can be set to true to ensure that funds are ringfenced regardless of the outcome of balance checks. To ensure that posting instructions with `advice` set to true are excluded from the contract balance check, the flag `exclude_advice` must also be set to true. See [Balance check](/reference/contracts/contracts_api_4xx/common_examples/#generic-balance_check)."
          },
          "target_account_id": {
            "type": "string",
            "description": "The `account_id` of the instruction's `target_account`.",
            "x-output-only": true
          }
        },
        "description": "* InboundAuthorisation authorises incoming funds into the target_account.\n\nFor this instruction Vault will perform: - idempotency check - account resolution - account checks - account/customer/payment_device restrictions - contract execution\n\nResulting postings committed (if accepted):  - Dr | amount | internal_account_id | PHASE_PENDING_INCOMING  - Cr | amount | target_account_id   | PHASE_PENDING_INCOMING"
      },
      "v1InboundHardSettlement": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "The instruction amount."
          },
          "denomination": {
            "type": "string",
            "description": "The instruction denomination."
          },
          "target_account": {
            "$ref": "#/components/schemas/v1TargetAccount",
            "description": "The instruction `target_account`."
          },
          "internal_account_id": {
            "type": "string",
            "description": "The `internal_account_id` must be the ID of an internal account in Vault."
          },
          "advice": {
            "type": "boolean",
            "description": "Can be set to true to ensure that funds are ringfenced regardless of the outcome of balance checks. To ensure that posting instructions with `advice` set to true are excluded from the contract balance check, the flag `exclude_advice` must also be set to true. See [Balance check](/reference/contracts/contracts_api_4xx/common_examples/#generic-balance_check)."
          },
          "target_account_id": {
            "type": "string",
            "description": "The `account_id` of the instruction's `target_account`.",
            "x-output-only": true
          }
        },
        "description": "* InboundHardSettlement is an instruction that authorises and settles incoming funds into the target account.\n\nFor this instruction Vault will perform: - idempotency check - account resolution - account checks - account/customer/payment_device restrictions - contract execution\n\nResulting postings committed (if accepted): - Dr | amount | internal_account_id | PHASE_COMMITTED - Cr | amount | target_account_id   | PHASE_COMMITTED"
      },
      "v1OutboundAuthorisation": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "The authorisation amount."
          },
          "denomination": {
            "type": "string",
            "description": "The instruction denomination."
          },
          "target_account": {
            "$ref": "#/components/schemas/v1TargetAccount",
            "description": "The instruction `target_account`."
          },
          "internal_account_id": {
            "type": "string",
            "description": "The `internal_account_id` must be the ID of an internal account in Vault."
          },
          "advice": {
            "type": "boolean",
            "description": "This can be set to true to ensure that funds are ringfenced regardless of the outcome of balance checks. To ensure that posting instructions with `advice` set to true are excluded from the contract balance check, the flag `exclude_advice` must also be set to true. See [Balance check](/reference/contracts/contracts_api_4xx/common_examples/#generic-balance_check)."
          },
          "target_account_id": {
            "type": "string",
            "description": "The `account_id` of the instruction's `target_account`.",
            "x-output-only": true
          }
        },
        "description": "* OutboundAuthorisation creates a funds hold (ring-fence the funds) on the the target account.\n\nFor this instruction Vault will perform: - idempotency check - account resolution - account checks - account/customer/payment_device restrictions - contract execution\n\nResulting postings committed (if accepted):  - Dr | amount | target_account_id   | PHASE_PENDING_OUTGOING  - Cr | amount | internal_account_id | PHASE_PENDING_OUTGOING"
      },
      "v1OutboundHardSettlement": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "The instruction amount."
          },
          "denomination": {
            "type": "string",
            "description": "The instruction denomination."
          },
          "target_account": {
            "$ref": "#/components/schemas/v1TargetAccount",
            "description": "The instruction `target_account`."
          },
          "internal_account_id": {
            "type": "string",
            "description": "The `internal_account_id` must be the ID of an internal account in Vault."
          },
          "advice": {
            "type": "boolean",
            "description": "Can be set to true to ensure that funds are ringfenced regardless of the outcome of balance checks. To ensure that posting instructions with `advice` set to true are excluded from the contract balance check, the flag `exclude_advice` must also be set to true. See [Balance check](/reference/contracts/contracts_api_4xx/common_examples/#generic-balance_check)."
          },
          "target_account_id": {
            "type": "string",
            "description": "The `account_id` of the instruction's `target_account`.",
            "x-output-only": true
          }
        },
        "description": "* OutboundHardSettlement is an instruction that authorises and settles outgoing funds from the target account.\n\nFor this instruction Vault will perform: - idempotency check - account resolution - account checks - account/customer/payment_device restrictions - contract execution\n\nResulting postings committed (if accepted): - Dr | amount | target_account_id   | PHASE_COMMITTED - Cr | amount | internal_account_id | PHASE_COMMITTED"
      },
      "v1Override": {
        "type": "object",
        "properties": {
          "restrictions": {
            "$ref": "#/components/schemas/v1OverrideRestrictions"
          }
        },
        "description": "Override is used to override certain checks for a posting instruction."
      },
      "v1OverrideRestrictions": {
        "type": "object",
        "properties": {
          "all": {
            "type": "boolean",
            "description": "The caller may choose to override all account restriction checks for a posting instruction by setting this field to true."
          },
          "restriction_set_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The caller may choose to override certain account restrictions by passing its restriction set ID here."
          }
        },
        "description": "OverrideRestrictions allows a caller to skip all or some restrictions from impacting a PostingInstruction. Caller may not set more than one field. As such, either the `all`, or the `restriction_set_ids` field may be set.\n\nNote that the restrictions specified here will be overridden for each account targeted by this PostingInstruction."
      },
      "v1Posting": {
        "type": "object",
        "properties": {
          "credit": {
            "type": "boolean",
            "description": "Indicates whether the posting is a credit or debit."
          },
          "amount": {
            "type": "string",
            "description": "The posting amount."
          },
          "denomination": {
            "type": "string",
            "description": "The posting denomination."
          },
          "account_id": {
            "type": "string",
            "description": "The ID of the Vault account being posted to."
          },
          "account_address": {
            "type": "string",
            "description": "The address of the Vault account being posted to."
          },
          "asset": {
            "type": "string",
            "description": "The asset value of the posting."
          },
          "phase": {
            "$ref": "#/components/schemas/v1PostingPhase",
            "description": "The posting phase."
          }
        },
        "description": "* Posting represents a Credit/Debit of funds to an account_id/account_address."
      },
      "v1PostingInstruction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Created by Vault. This uniquely identifies the posting instruction in Vault.",
            "x-output-only": true
          },
          "client_transaction_id": {
            "type": "string",
            "description": "Set by the client. This is the ID of the client transaction this posting instruction is creating or mutating. Required."
          },
          "pics": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Posting Identification Codes that can be associated to posting instruction, and consumed by downstream processes.",
            "x-release-info": {
              "noticeVersion": {
                "major": 1,
                "minor": 10
              },
              "releaseVersion": {
                "major": 5
              },
              "changeType": "REMOVE_FIELD",
              "description": "Metadata should instead be attached via the instruction details field"
            }
          },
          "instruction_details": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Stores metadata related to the posting instruction. Contract execution will have access to these. If a restriction has exemption conditions and all the exemption conditions are present as key-value pairs, the restriction will not be applied to this posting instruction."
          },
          "committed_postings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1Posting"
            },
            "description": "Contains the list of Postings written to the Posting ledger if the posting instruction was accepted.",
            "x-output-only": true
          },
          "posting_violations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1PostingViolation"
            },
            "description": "Captures rejection reasons caused by posting logic validity checks. For example: Cannot adjust an authorisation that has already been settled.",
            "x-output-only": true
          },
          "account_violations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1AccountViolation"
            },
            "description": "Captures rejection reasons and details caused by account checks. For example: Account closed.",
            "x-output-only": true
          },
          "restriction_violations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1RestrictionViolation"
            },
            "description": "Captures rejection reasons and rejection details caused by restrictions. For example: Restriction with ID 'xyz123' prevented this instruction.",
            "x-output-only": true
          },
          "contract_violations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1ContractViolation"
            },
            "description": "Captures rejection reasons and rejection details caused by contract execution. For example: Insufficient funds.",
            "x-output-only": true
          },
          "override": {
            "$ref": "#/components/schemas/v1Override",
            "description": "Allows the caller to override certain checks for this PostingInstruction."
          },
          "transaction_code": {
            "$ref": "#/components/schemas/v1TransactionCode",
            "description": "ISO20022 Bank Transaction Code field, a set of properties to identify underlying transaction."
          },
          "outbound_authorisation": {
            "$ref": "#/components/schemas/v1OutboundAuthorisation",
            "required": false
          },
          "inbound_authorisation": {
            "$ref": "#/components/schemas/v1InboundAuthorisation",
            "required": false
          },
          "authorisation_adjustment": {
            "$ref": "#/components/schemas/v1AuthorisationAdjustment",
            "required": false
          },
          "settlement": {
            "$ref": "#/components/schemas/v1Settlement",
            "required": false
          },
          "release": {
            "$ref": "#/components/schemas/v1Release",
            "required": false
          },
          "inbound_hard_settlement": {
            "$ref": "#/components/schemas/v1InboundHardSettlement",
            "required": false
          },
          "outbound_hard_settlement": {
            "$ref": "#/components/schemas/v1OutboundHardSettlement",
            "required": false
          },
          "transfer": {
            "$ref": "#/components/schemas/v1Transfer",
            "required": false
          },
          "custom_instruction": {
            "$ref": "#/components/schemas/v1CustomInstruction",
            "required": false
          }
        },
        "description": "* A PostingInstruction acts against a client transaction. Vault offers a set of predefined PostingInstruction types, which each following a specific set of execution rules. A PostingInstruction may result in a balanced set of committed Postings to the ledger. OutboundAuthoriisations and InboundAuthorisations initiate a client transaction, which can then be acted upon, by the AuthorisationAdjustment, Settlement and Release instruction types. CustomInstruction, OutboundHardSettlement, InboundHardSettlement and Transfer instructions initiate and close a client transaction. As such, no other instructions can subsequently act on their client transactions. If accepted, a PostingInstruction is translated into a balanced set of Postings which are persisted atomically to the Posting Ledger."
      },
      "v1PostingInstructionBatch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies a posting instruction batch in Vault.",
            "x-output-only": true
          },
          "create_request_id": {
            "type": "string",
            "description": "The `request_id` of the `create-posting-instruction-batch` request.",
            "x-output-only": true
          },
          "client_id": {
            "type": "string",
            "description": "Uniquely identifies a client of the Posting API. Used to publish responses to the specified Kafka response topic. Together with `request_id` it forms a unique key used for idempotency. Required."
          },
          "client_batch_id": {
            "type": "string",
            "description": "This must be set by the client, and is used as a correlation ID across different posting instruction batches. The suggested use is to set the same `client_batch_id` across batches that contain posting instructions for the same financial transaction. The posting service provides indexing on this ID, allowing for efficient queries to return all posting instructions that belong to a client transaction. Required."
          },
          "posting_instructions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1PostingInstruction"
            },
            "description": "A non-empty list of posting instruction objects to be processed atomically. Required."
          },
          "batch_details": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Stores metadata related to the posting instruction batch resource. These details can also be retrieved in the posting instruction resource. Optional."
          },
          "value_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Specifies the time at which all committed postings of this batch's posting instructions will affect balances. For most cases, including real time payments or fund movements, this should not be set and will default to the generated `insertion_timestamp`. Should be set only for backdated posting instruction batches and must be between 1970-01-01T00:00:00Z and 9999-12-31T23:59:59Z, inclusive. Optional; defaults to the insertion timestamp in UTC."
          },
          "status": {
            "$ref": "#/components/schemas/v1PostingInstructionBatchStatus",
            "description": "The status of the processing of the posting instruction batch.",
            "x-output-only": true
          },
          "error": {
            "$ref": "#/components/schemas/v1PostingInstructionBatchError",
            "description": "Any errors generated while trying to process the posting instruction batch. If any errors are present, the batch errors and nothing is committed to the database.",
            "x-output-only": true
          },
          "insertion_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Specifies the time this posting instruction batch was inserted in Vault.",
            "x-output-only": true
          },
          "dry_run": {
            "type": "boolean",
            "description": "If true, the `create-posting-instruction-batch` request did not have any side effects and no posting instruction batch resource was created.",
            "x-output-only": true
          }
        },
        "description": "* PostingInstructionBatch is an atomic wrapper around PostingInstructions. All PostingInstruction within a PostingInstructionBatch are either all accepted, all rejected or all errored out."
      },
      "v1PostingInstructionBatchError": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/v1PostingInstructionBatchErrorType",
            "description": "The type of error returned."
          },
          "message": {
            "type": "string",
            "description": "Contains human-readable information about the error raised."
          }
        },
        "description": "* An InstructionBatchError holds information about an error encountered while trying to process an CreatePostingInstructionBatchRequest."
      },
      "v1PostingInstructionBatchErrorType": {
        "type": "string",
        "enum": [
          "POSTING_INSTRUCTION_BATCH_ERROR_TYPE_INVALID_ARGUMENT",
          "POSTING_INSTRUCTION_BATCH_ERROR_TYPE_INTERNAL",
          "POSTING_INSTRUCTION_BATCH_ERROR_TYPE_TTL_EXPIRED"
        ],
        "default": "POSTING_INSTRUCTION_BATCH_ERROR_TYPE_INVALID_ARGUMENT",
        "description": "* A PostingInstructionBatchErrorType is the type a PostingInstructionBatchError. The Vault Postings API are idempotent, and where adviced, requests can be retried. Each error indicates whether it is retriable or non-retriable.",
        "x-enum-value-descriptions": {
          "POSTING_INSTRUCTION_BATCH_ERROR_TYPE_INTERNAL": "An internal error occurred due to unexpected condition while processing the request. Can Retry.",
          "POSTING_INSTRUCTION_BATCH_ERROR_TYPE_INVALID_ARGUMENT": "CreatePostingInstructionBatchRequest contains invalid arguments and the request cannot be processed. See the error message for more details. Cannot Retry.",
          "POSTING_INSTRUCTION_BATCH_ERROR_TYPE_TTL_EXPIRED": "A time to live expiry error occured because the requested `time_to_live` timestamp has expired. Cannot Retry."
        }
      },
      "v1PostingInstructionBatchStatus": {
        "type": "string",
        "enum": [
          "POSTING_INSTRUCTION_BATCH_STATUS_UNKNOWN",
          "POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED",
          "POSTING_INSTRUCTION_BATCH_STATUS_REJECTED"
        ],
        "default": "POSTING_INSTRUCTION_BATCH_STATUS_UNKNOWN",
        "description": "* The status of the posting instruction batch.",
        "x-enum-value-descriptions": {
          "POSTING_INSTRUCTION_BATCH_STATUS_ACCEPTED": "The PostingInstructionBatch has been accepted and Postings have been committed to the ledger.",
          "POSTING_INSTRUCTION_BATCH_STATUS_REJECTED": "The PostingInstructionBatch has been rejected and no Postings have been committed to the ledger.",
          "POSTING_INSTRUCTION_BATCH_STATUS_UNKNOWN": "Default value."
        }
      },
      "v1PostingPhase": {
        "type": "string",
        "enum": [
          "POSTING_PHASE_UNKNOWN",
          "POSTING_PHASE_PENDING_INCOMING",
          "POSTING_PHASE_PENDING_OUTGOING",
          "POSTING_PHASE_COMMITTED"
        ],
        "default": "POSTING_PHASE_UNKNOWN",
        "description": "* PostingPhase characterises the phase of a Posting.",
        "x-enum-value-descriptions": {
          "POSTING_PHASE_COMMITTED": "The posting is committed (hard posting).",
          "POSTING_PHASE_PENDING_INCOMING": "The posting is pending incoming (soft posting).",
          "POSTING_PHASE_PENDING_OUTGOING": "The posting is pending outgoing (soft posting).",
          "POSTING_PHASE_UNKNOWN": "The posting phase is not set which will result in a validation error."
        }
      },
      "v1PostingViolation": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/v1PostingViolationType",
            "description": "The type of violation."
          }
        },
        "description": "* PostingViolation describes a Posting API violation."
      },
      "v1PostingViolationType": {
        "type": "string",
        "enum": [
          "POSTING_VIOLATION_CLIENT_TRANSACTION_ALREADY_EXISTS",
          "POSTING_VIOLATION_CLIENT_TRANSACTION_DOES_NOT_EXIST",
          "POSTING_VIOLATION_ADJUSTMENT_YIELDS_AUTHORISATION_WITH_NEGATIVE_AMOUNT",
          "POSTING_VIOLATION_CLIENT_TRANSACTION_CLOSED",
          "POSTING_VIOLATION_CLIENT_TRANSACTION_INVALID_OPERATION"
        ],
        "default": "POSTING_VIOLATION_CLIENT_TRANSACTION_ALREADY_EXISTS",
        "description": "* PostingViolationType characterises a Posting API violation.",
        "x-enum-value-descriptions": {
          "POSTING_VIOLATION_ADJUSTMENT_YIELDS_AUTHORISATION_WITH_NEGATIVE_AMOUNT": "An AuthorisationAdjustment yields an authorisation with a negative amount.",
          "POSTING_VIOLATION_CLIENT_TRANSACTION_ALREADY_EXISTS": "An OutboundAuthorisation, InboundAuthorisation, Transfer, OutboundHardSettlement or InboundHardSettlement specifies a `client_transaction_id` which already exists in the namespace of the `client_id`.",
          "POSTING_VIOLATION_CLIENT_TRANSACTION_CLOSED": "An instruction is attempting to mutate a client transaction that has been closed.",
          "POSTING_VIOLATION_CLIENT_TRANSACTION_DOES_NOT_EXIST": "An AuthorisationAdjustment, Settlement, Release is referring to a non existent client transaction.",
          "POSTING_VIOLATION_CLIENT_TRANSACTION_INVALID_OPERATION": "An instruction is being added to a client transaction where the `value_timestamp` is not strictly later than the current latest instruction, or the instruction being processed would create a client transaction which has a combination of CustomInstructions and other instruction types."
        }
      },
      "v1Release": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount released.",
            "x-output-only": true
          },
          "denomination": {
            "type": "string",
            "description": "The instruction release denomination.",
            "x-output-only": true
          },
          "target_account_id": {
            "type": "string",
            "description": "The instruction `target_account_id`.",
            "x-output-only": true
          },
          "internal_account_id": {
            "type": "string",
            "description": "The instruction `internal_account_id`.",
            "x-output-only": true
          },
          "require_pre_posting_hook_execution": {
            "type": "boolean",
            "description": "If set to true, the pre-posting hook will be triggered for this instruction. Optional; if not supplied, the pre-posting hook may be triggered by other instructions within this batch, but this instruction will not be visible to the hook.",
            "x-release-info": {
              "releaseVersion": {
                "major": 3,
                "minor": 1
              },
              "changeType": "ADD_FIELD",
              "featureFlag": "TMV_1873_OPTIONAL_PRE_POSTINGS_HOOK_RELEASES"
            }
          }
        },
        "description": "* Release removes an authorisation hold. The client transaction being released is identified by the client_transaction_id in the parent PostingInstruction.\n\nNote: No other Posting Instructions will be accepted after the transaction has been released.\n\nFor this instruction Vault will perform: - idempotency check - Posting logic checks (was there an Inbound or Outbound authorisation for it? was accepted?) - check that underlying authorisation we are settling is still in a clearing state. (No Release   or final Settlement received). - if require_pre_posting_hook_execution is set to true, then the pre-posting hook will be   triggered for this instruction.\n\n Note  - ringfenced_amount = initial OutboundAuth/InboundAuth amount \t\t\t\t          + AuthAdjustment amounts (these can be +ve or -ve) \t\t\t\t          - Settlement amounts\n\nResulting postings committed (if accepted):\n\n <> Release of OutboundAuthorisation:   - Dr | ringfenced_amount | auth[internal_account_id] | PHASE_PENDING_OUTGOING   - Cr | ringfenced_amount | auth[target_account_id]   | PHASE_PENDING_OUTGOING  <> Release of InboundAuthorisation:   - Dr | ringfenced_amount | auth[target_account_id]   | PHASE_PENDING_INCOMING   - Cr | ringfenced_amount | auth[internal_account_id] | PHASE_PENDING_INCOMING"
      },
      "v1RestrictionViolation": {
        "type": "object",
        "properties": {
          "restriction_set_id": {
            "type": "string",
            "description": "Uniquely identifies this restriction in Vault."
          },
          "account_id": {
            "type": "string",
            "description": "This is set if this restriction violation is applied at an account level."
          },
          "payment_device_id": {
            "type": "string",
            "description": "This is set if this restriction violation is applied at a payment device level."
          },
          "customer_id": {
            "type": "string",
            "description": "This is set if this restriction violation is applied at a customer level."
          },
          "requires_review": {
            "type": "boolean",
            "description": "If true, this restriction requires review. Otherwise it simply prevents it."
          }
        },
        "description": "* RestrictionViolation characterises a violation regarding restriction."
      },
      "v1Settlement": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount to be cleared. Optional: if not supplied it will be calculated as amount = total amount authorised for this client transaction - total amount cleared."
          },
          "final": {
            "type": "boolean",
            "description": "If set to true, any remaining amount authorised for this client transaction will be released. No instruction may mutate a client transaction once a final settlement has mutated it."
          },
          "denomination": {
            "type": "string",
            "description": "The instruction denomination.",
            "x-output-only": true
          },
          "target_account_id": {
            "type": "string",
            "description": "The instruction `target_account_id`.",
            "x-output-only": true
          },
          "internal_account_id": {
            "type": "string",
            "description": "The instruction `internal_account_id`.",
            "x-output-only": true
          },
          "require_pre_posting_hook_execution": {
            "type": "boolean",
            "description": "If set to true, the pre-posting hook will be triggered for this instruction. Optional; if not supplied, the pre-posting hook may be triggered by other instructions within this batch, but this instruction will not be visible to the hook.",
            "x-release-info": {
              "releaseVersion": {
                "major": 3,
                "minor": 1
              },
              "changeType": "ADD_FIELD",
              "featureFlag": "TMV_1873_OPTIONAL_PRE_POSTINGS_HOOK_RELEASES"
            }
          }
        },
        "description": "* Settlement clears funds that have previously been authorised.\n\nSettlements can only act on client transactions that have not been release or settled with the final flag set.\n\nFor this instruction Vault will perform: - idempotency check - Posting logic checks (whether or not there was an accepted InboundAuthorisation or   OutboundAuthorisation for the same client transaction) - check that underlying authorisation we are settling is still in a clearing state.   (No Release or final Settlement received). - if the amount is specified and it's different than the authorisation hold, then Vault will   create additional postings to reflect the change. Please note that this may bring the account   balance negative, as contract execution won't be performed. - if final is set to true, Vault will release any outstanding balance ring-fenced by the original   authorisation. - if require_pre_posting_hook_execution is set to true, then the pre-posting hook will be   triggered for this instruction.\n\nNote: in the below examples for a given client_transaction_id:  - ringfenced_amount = initial OutboundAuth/InboundAuth amount \t\t\t\t          + AuthAdjustment amounts (these can be +ve or -ve) \t\t\t\t          - Settlement amounts\n\nResulting postings committed (if accepted):\n\nPostings for Settlement of OutboundAuthorisation:  <> Settlement of OutboundAuthorisation and amount = ringfenced_amount and final = true/false:   - Cr | amount                  | auth[target_account_id]   | PHASE_PENDING_OUTGOING   - Dr | amount                  | auth[internal_account_id] | PHASE_PENDING_OUTGOING   - Dr | amount                  | auth[target_account_id]   | PHASE_COMMITTED   - Cr | amount                  | auth[internal_account_id] | PHASE_COMMITTED\n\n <> Settlement of OutboundAuthorisation and amount > ringfenced_amount and final = true/false:   - Cr | ringfenced_amount       | auth[target_account_id]   | PHASE_PENDING_OUTGOING   - Dr | ringfenced_amount       | auth[internal_account_id] | PHASE_PENDING_OUTGOING   - Dr | amount                  | auth[target_account_id]   | PHASE_COMMITTED   - Cr | amount                  | auth[internal_account_id] | PHASE_COMMITTED\n\n <> Settlement of OutboundAuthorisation and amount < ringfenced_amount and final = false:   - Cr | amount                  | auth[target_account_id]   | PHASE_PENDING_OUTGOING   - Dr | amount                  | auth[internal_account_id] | PHASE_PENDING_OUTGOING   - Dr | amount                  | auth[target_account_id]   | PHASE_COMMITTED   - Cr | amount                  | auth[internal_account_id] | PHASE_COMMITTED\n\n <> Settlement of OutboundAuthorisation and amount < ringfenced_amount and final = true:   - Cr | ringfenced_amount       | auth[target_account_id]   | PHASE_PENDING_OUTGOING   - Dr | ringfenced_amount       | auth[internal_account_id] | PHASE_PENDING_OUTGOING   - Dr | amount                  | auth[target_account_id]   | PHASE_COMMITTED   - Cr | amount                  | auth[internal_account_id] | PHASE_COMMITTED\n\n--------------------------------------------------------------------------------------\n\n Postings for Settlement of InboundAuthorisation:  <> Settlement of InboundAuthorisation and amount = ringfenced_amount and final = true/false:   - Dr | amount                  | auth[target_account_id]   | PHASE_PENDING_INCOMING   - Cr | amount                  | auth[internal_account_id] | PHASE_PENDING_INCOMING   - Cr | amount                  | auth[target_account_id]   | PHASE_COMMITTED   - Dr | amount                  | auth[internal_account_id] | PHASE_COMMITTED\n\n <> Settlement of InboundAuthorisation and amount > ringfenced_amount and final = true/false:   - Dr | ringfenced_amount       | auth[target_account_id]   | PHASE_PENDING_INCOMING   - Cr | ringfenced_amount       | auth[internal_account_id] | PHASE_PENDING_INCOMING   - Cr | amount                  | auth[target_account_id]   | PHASE_COMMITTED   - Dr | amount                  | auth[internal_account_id] | PHASE_COMMITTED\n\n <> Settlement of InboundAuthorisation and amount < ringfenced_amount and final = false:   - Dr | amount                  | auth[target_account_id]   | PHASE_PENDING_INCOMING   - Cr | amount                  | auth[internal_account_id] | PHASE_PENDING_INCOMING   - Cr | amount                  | auth[target_account_id]   | PHASE_COMMITTED   - Dr | amount                  | auth[internal_account_id] | PHASE_COMMITTED\n\n <> Settlement of InboundAuthorisation and amount < ringfenced_amount and final = true:   - Dr | ringfenced_amount       | auth[target_account_id]   | PHASE_PENDING_OUTGOING   - Cr | ringfenced_amount       | auth[internal_account_id] | PHASE_PENDING_OUTGOING   - Cr | amount                  | auth[target_account_id]   | PHASE_COMMITTED   - Dr | amount                  | auth[internal_account_id] | PHASE_COMMITTED"
      },
      "v1TargetAccount": {
        "type": "object",
        "properties": {
          "payment_device_token": {
            "$ref": "#/components/schemas/payment_device_token",
            "required": false
          },
          "account_id": {
            "$ref": "#/components/schemas/account_id",
            "required": false
          }
        },
        "description": "* TargetAccount describes an account being targeted by a Posting instruction."
      },
      "v1TransactionCode": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "description": "Business area of the transaction."
          },
          "family": {
            "type": "string",
            "description": "A family within the domain."
          },
          "subfamily": {
            "type": "string",
            "description": "Sub-product family within a specific family."
          }
        },
        "description": "ISO20022 Bank Transaction Code."
      },
      "v1Transfer": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount to transfer."
          },
          "denomination": {
            "type": "string",
            "description": "The instruction denomination."
          },
          "debtor_target_account": {
            "$ref": "#/components/schemas/v1TargetAccount",
            "description": "The account being debited."
          },
          "debtor_target_account_id": {
            "type": "string",
            "description": "The `account_id` of the debtor.",
            "x-output-only": true
          },
          "creditor_target_account": {
            "$ref": "#/components/schemas/v1TargetAccount",
            "description": "The account being credited."
          },
          "creditor_target_account_id": {
            "type": "string",
            "description": "The `account_id` of the creditor.",
            "x-output-only": true
          }
        },
        "description": "Transfer PostingInstruction models an atomic transaction, no Adjustments, Settlements or other instructions can be passed with the same client_transaction_id.\n\nFor this instruction Vault will perform: - idempotency check - account resolution - account checks on both debitor and creditor's accounts - account/customer/payment_device restrictions on both debitor and creditor's accounts - contract execution on both debitor and creditor's accounts\n\nResulting postings committed (if accepted): - Dr | amount | debtor_account_id   | PHASE_COMMITTED - Cr | amount | creditor_account_id | PHASE_COMMITTED",
        "title": "* Transfer is an instruction that moves funds from the debtor to the creditor target account"
      },
      "payment_reversalsBatchGetPaymentReversalsResponse": {
        "type": "object",
        "properties": {
          "payment_reversals": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/payment_reversalsPaymentReversal"
            },
            "description": "A map of the PaymentReversal ID to the PaymentReversal."
          }
        }
      },
      "payment_reversalsCreatePaymentReversalRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required.",
            "x-example-override": "64f44af7-beb4-450d-9b47-68bcbb5ee599"
          },
          "payment_reversal": {
            "$ref": "#/components/schemas/payment_reversalsPaymentReversal",
            "description": "The PaymentReversal that is to be created. Required.",
            "x-excluded-fields": [
              "status",
              "create_timestamp",
              "update_timestamp"
            ]
          }
        }
      },
      "payment_reversalsListPaymentReversalsResponse": {
        "type": "object",
        "properties": {
          "payment_reversals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/payment_reversalsPaymentReversal"
            },
            "description": "A list of matching PaymentReversals in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, this is the first page of results."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, this is the last page of results."
          }
        }
      },
      "payment_reversalsPaymentReversal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the PaymentReversal. Generated on creation.",
            "x-example-override": "208983c1-a7f9-49c3-a3a6-f9d727ce1db6"
          },
          "type": {
            "$ref": "#/components/schemas/payment_reversalsPaymentReversalType",
            "description": "The type of this PaymentReversal. Required.",
            "x-example-override": "PAYMENT_REVERSAL_TYPE_REVERSAL_PRE_SETTLEMENT"
          },
          "status": {
            "$ref": "#/components/schemas/payment_reversalsPaymentReversalStatus",
            "description": "The current status of the resource. Always PENDING or UNMATCHED on creation. For a PaymentReversal to reach a status other than UNMATCHED, a `Payment` must exist with an `id` and `scheme` value that matches `payment_id` and `scheme_id` respectively.",
            "x-example-override": "PAYMENT_REVERSAL_STATUS_PENDING"
          },
          "payment_id": {
            "type": "string",
            "description": "The ID of the [Payment](/api/payments_hub_api/#Payments) this PaymentReversal is associated with. Optional.\n\nIf this field is not populated, a PaymentReversal will always have the status UNMATCHED. If an associated `Payment` exists, basic validation will be performed:<br/> - The `Payment` direction must be INBOUND<br/> - The `Payment` execution plan must support PaymentReversals. Execution plans that support PaymentReversals: `BACS_STANDARD_INBOUND_V1`\n\nThe associated `Payment` is only guaranteed to exist if the PaymentReversal status is not UNMATCHED. If the field is populated and the status is UNMATCHED, this can indicate that:<br/> - The corresponding `Payment` with matching scheme may not exist<br/> - The corresponding `Payment` has not been created or processed yet",
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          },
          "scheme_id": {
            "type": "string",
            "description": "The [Scheme](/api/payments_hub_api/#Schemes) that the PaymentReversal belongs to. The Scheme must exist for the resource to be created. Required. Support for BACS is now deprecated.",
            "x-example-override": "BACS"
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the PaymentReversal was created.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the last change to the PaymentReversal occurred.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "scheme_reason_code": {
            "type": "string",
            "description": "The scheme code for the reason for the PaymentReversal. Optional.",
            "x-example-override": "R"
          },
          "metadata": {
            "$ref": "#/components/schemas/protobufStruct",
            "description": "Represents scheme/gateway-specific metadata in the form of a JSON object. No validations are performed on this field. Optional.",
            "x-third-party": "GOOGLE_PROTOBUF_STRUCT",
            "x-example-override": "{\"gateway_identifier\": 123456}"
          }
        }
      },
      "payment_reversalsPaymentReversalStatus": {
        "type": "string",
        "enum": [
          "PAYMENT_REVERSAL_STATUS_UNKNOWN",
          "PAYMENT_REVERSAL_STATUS_PENDING",
          "PAYMENT_REVERSAL_STATUS_COMPLETED",
          "PAYMENT_REVERSAL_STATUS_UNMATCHED",
          "PAYMENT_REVERSAL_STATUS_REQUIRES_REVIEW",
          "PAYMENT_REVERSAL_STATUS_PAYMENT_RETURNED"
        ],
        "default": "PAYMENT_REVERSAL_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "PAYMENT_REVERSAL_STATUS_COMPLETED": "Indicates that the associated `Payment` has been reversed.",
          "PAYMENT_REVERSAL_STATUS_PAYMENT_RETURNED": "Indicates that the PaymentReversal could not be completed as the associated `Payment` has been returned.",
          "PAYMENT_REVERSAL_STATUS_PENDING": "Indicates that the PaymentReversal is matched and in progress.",
          "PAYMENT_REVERSAL_STATUS_REQUIRES_REVIEW": "Indicates that the associated `Payment` requires review.",
          "PAYMENT_REVERSAL_STATUS_UNKNOWN": "Default PaymentReversal status.",
          "PAYMENT_REVERSAL_STATUS_UNMATCHED": "Indicates that the PaymentReversal does not match an existing `Payment`."
        }
      },
      "payment_reversalsPaymentReversalType": {
        "type": "string",
        "enum": [
          "PAYMENT_REVERSAL_TYPE_UNKNOWN",
          "PAYMENT_REVERSAL_TYPE_REVERSAL_PRE_SETTLEMENT",
          "PAYMENT_REVERSAL_TYPE_REVERSAL_POST_SETTLEMENT"
        ],
        "default": "PAYMENT_REVERSAL_TYPE_UNKNOWN",
        "x-enum-value-descriptions": {
          "PAYMENT_REVERSAL_TYPE_REVERSAL_POST_SETTLEMENT": "A PaymentReversal that should be completed after the movement of funds.",
          "PAYMENT_REVERSAL_TYPE_REVERSAL_PRE_SETTLEMENT": "A PaymentReversal that should be completed, where possible, before the movement of funds. The Payments Hub will still reverse the `Payment` if settlement has already occurred.",
          "PAYMENT_REVERSAL_TYPE_UNKNOWN": "Default PaymentReversal type."
        }
      },
      "paymentsBatchGetPaymentsResponse": {
        "type": "object",
        "properties": {
          "payments": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/paymentsPayment"
            },
            "description": "A map of the payment ID to the payment."
          }
        }
      },
      "paymentsCreatePaymentRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent.",
            "x-example-override": "0693bd86-694b-439e-83ff-a3e3229c2e6c"
          },
          "payment": {
            "$ref": "#/components/schemas/paymentsPayment",
            "description": "The Payment to be created. Required.",
            "x-excluded-fields": [
              "create_request_id",
              "current_status",
              "status_reason",
              "current_status_details",
              "target_status",
              "target_status_reason",
              "target_status_details",
              "create_timestamp",
              "update_timestamp",
              "returned_by_details",
              "additional_credit_information",
              "migration_info"
            ]
          },
          "create_options": {
            "$ref": "#/components/schemas/paymentsPaymentCreateOptions",
            "description": "Options for payment creation. Optional.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 8
              },
              "changeType": "ADD_FIELD",
              "description": "Field added to allow additional creation options"
            },
            "x-example-override": "{}"
          }
        }
      },
      "paymentsInitiatePaymentRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required.",
            "x-example-override": "2ec2c9b7-c760-4e12-8e59-17de121f410f"
          },
          "payment_id": {
            "type": "string",
            "description": "The ID of the Payment to be initialised. In order to initiate a Payment, this ID must reference a previously created Payment that has a `current_status` of PAYMENT_STATUS_RECEIVED. Required.",
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          }
        }
      },
      "paymentsInitiatePaymentResponse": {
        "type": "object"
      },
      "paymentsListPaymentsResponse": {
        "type": "object",
        "properties": {
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/paymentsPayment"
            },
            "description": "A list of matching payments in order of descending value_timestamp (most recent first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "Token used to retrieve the previous page. If empty, returns the first page of results."
          },
          "next_page_token": {
            "type": "string",
            "description": "Token used to retrieve the next page. If empty, returns the last page of results."
          }
        }
      },
      "paymentsPaymentCreateOptions": {
        "type": "object",
        "properties": {
          "should_initiate": {
            "type": "boolean",
            "description": "If set to `true`, then the payment will be automatically initiated upon creation. Optional."
          }
        }
      },
      "paymentsUpdatePaymentRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Request IDs should not be shared across payment creation and update calls. Required.",
            "x-example-override": "a9c0acc2-d256-4ee0-bcbe-3c4cb7b0265a"
          },
          "payment": {
            "$ref": "#/components/schemas/paymentsPayment",
            "description": "The payment object to be updated. Required.",
            "x-example-override": "{\"target_status\": \"PAYMENT_STATUS_SUBMITTED\"}",
            "x-excluded-fields": [
              "create_request_id",
              "scheme_transaction_id",
              "scheme",
              "execution_plan",
              "settlement_information",
              "interbank_settlement_information",
              "settlement_date",
              "amount",
              "currency",
              "reference",
              "current_status",
              "status_reason",
              "current_status_details",
              "target_status_details.reason",
              "debitor_party",
              "creditor_party",
              "direction",
              "payment_type",
              "scheme_payment_type",
              "payment_channel",
              "processing_priority",
              "purpose",
              "tax_reference",
              "metadata",
              "value_timestamp",
              "create_timestamp",
              "update_timestamp",
              "standing_order_instruction_id",
              "return_details",
              "returned_by_details",
              "additional_credit_information",
              "additional_debit_instructions",
              "overrides",
              "migration_info"
            ]
          },
          "update_mask": {
            "$ref": "#/components/schemas/protobufFieldMask",
            "description": "Field mask used to indicate which fields in the resource are to be updated. The only allowed field is `target_status`. Required.",
            "x-example-override": "{\"paths\": [\"target_status\"]}"
          }
        }
      },
      "calendar_operationsCalendarMode": {
        "type": "string",
        "enum": [
          "CALENDAR_MODE_NOOP",
          "CALENDAR_MODE_DELAY",
          "CALENDAR_MODE_SKIP",
          "CALENDAR_MODE_FORWARD"
        ],
        "default": "CALENDAR_MODE_NOOP",
        "x-enum-value-descriptions": {
          "CALENDAR_MODE_DELAY": "The schedule should be delayed.",
          "CALENDAR_MODE_FORWARD": "The schedule should be fast forwarded.",
          "CALENDAR_MODE_NOOP": "No operation",
          "CALENDAR_MODE_SKIP": "The schedule should be skipped."
        }
      },
      "calendar_operationsCalendarOperation": {
        "type": "object",
        "properties": {
          "calendar_id": {
            "type": "string",
            "description": "Calendar resource containing calendar events.",
            "x-example-override": "BACS"
          },
          "event_name": {
            "type": "string",
            "description": "The name of a calendar event.",
            "x-example-override": "FPS Working Day"
          },
          "calendar_mode": {
            "$ref": "#/components/schemas/calendar_operationsCalendarMode",
            "description": "Action to be taken on the schedules according to the calendar events."
          },
          "event_duration": {
            "type": "string",
            "description": "The duration of each calendar event. This is a strictly positive integer followed by time units \"m\" or \"h\". Possible valid durations include (but are not limited to): \"30m\", \"6h\", \"24h\".",
            "x-release-info": {
              "noticeVersion": {
                "major": 2
              },
              "releaseVersion": {
                "major": 5
              },
              "changeType": "REMOVE_FIELD",
              "description": "Event duration is computed internally from CalendarEvents."
            },
            "x-example-override": "24h"
          }
        },
        "description": "A Calendar Operation contains the information necessary to ensure forward dated payments consider weekends etc."
      },
      "scheduled_payment_actionsBatchGetFuturePaymentInstructionActionsResponse": {
        "type": "object",
        "properties": {
          "future_payment_instruction_actions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/scheduled_payment_actionsFuturePaymentInstructionAction"
            },
            "description": "A map of the FuturePaymentInstructionAction ID to the FuturePaymentInstructionAction."
          }
        }
      },
      "scheduled_payment_actionsBatchGetStandingOrderInstructionActionsResponse": {
        "type": "object",
        "properties": {
          "standing_order_instruction_actions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/scheduled_payment_actionsStandingOrderInstructionAction"
            },
            "description": "A map of the StandingOrderInstructionAction ID to the StandingOrderInstructionAction."
          }
        }
      },
      "scheduled_payment_actionsFuturePaymentInstructionAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the FuturePaymentInstructionAction, generated on creation. Required for update calls.",
            "x-update-only": true
          },
          "type": {
            "$ref": "#/components/schemas/scheduled_payment_actionsFuturePaymentInstructionActionType",
            "description": "The type of this FuturePaymentInstructionAction.",
            "x-output-only": true
          },
          "status": {
            "$ref": "#/components/schemas/scheduled_payment_actionsFuturePaymentInstructionActionStatus",
            "description": "The current status of this FuturePaymentInstructionAction. It has value `PENDING` following creation and `RESOLVED` following update.",
            "x-output-only": true
          },
          "future_payment_instruction_id": {
            "type": "string",
            "description": "The ID of the FuturePaymentInstruction this action refers to.",
            "x-output-only": true
          },
          "future_payment_instruction_request_id": {
            "type": "string",
            "description": "The request ID of the FuturePaymentInstruction this action refers to.",
            "x-output-only": true
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the FuturePaymentInstructionAction was created.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the last change to the FuturePaymentInstructionAction occurred.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "future_payment_instruction_scheme_id": {
            "type": "string",
            "description": "The scheme ID of the FuturePaymentInstruction. This field helps the processor of the event decide whether to consume or discard the message.",
            "x-output-only": true,
            "x-release-info": {
              "releaseVersion": {
                "major": 1,
                "minor": 11
              },
              "changeType": "ADD_FIELD"
            }
          },
          "scheme_validation": {
            "$ref": "#/components/schemas/scheduled_payment_actionsFuturePaymentInstructionSchemeValidation",
            "required": false
          },
          "schedule_enrichment": {
            "$ref": "#/components/schemas/scheduled_payment_actionsFuturePaymentInstructionScheduleEnrichment",
            "required": false
          }
        }
      },
      "scheduled_payment_actionsFuturePaymentInstructionActionStatus": {
        "type": "string",
        "enum": [
          "FUTURE_PAYMENT_INSTRUCTION_ACTION_STATUS_UNKNOWN",
          "FUTURE_PAYMENT_INSTRUCTION_ACTION_STATUS_PENDING",
          "FUTURE_PAYMENT_INSTRUCTION_ACTION_STATUS_RESOLVED"
        ],
        "default": "FUTURE_PAYMENT_INSTRUCTION_ACTION_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "FUTURE_PAYMENT_INSTRUCTION_ACTION_STATUS_PENDING": "The FuturePaymentInstructionAction requires processing according to its type.",
          "FUTURE_PAYMENT_INSTRUCTION_ACTION_STATUS_RESOLVED": "The FuturePaymentInstructionAction has been resolved.",
          "FUTURE_PAYMENT_INSTRUCTION_ACTION_STATUS_UNKNOWN": "Default FuturePaymentInstructionAction status."
        }
      },
      "scheduled_payment_actionsFuturePaymentInstructionActionType": {
        "type": "string",
        "enum": [
          "FUTURE_PAYMENT_INSTRUCTION_ACTION_TYPE_UNKNOWN",
          "FUTURE_PAYMENT_INSTRUCTION_ACTION_TYPE_SCHEME_VALIDATION",
          "FUTURE_PAYMENT_INSTRUCTION_ACTION_TYPE_SCHEDULE_ENRICHMENT"
        ],
        "default": "FUTURE_PAYMENT_INSTRUCTION_ACTION_TYPE_UNKNOWN",
        "x-enum-value-descriptions": {
          "FUTURE_PAYMENT_INSTRUCTION_ACTION_TYPE_SCHEDULE_ENRICHMENT": "The FuturePaymentInstructionAction requires additional scheduling information.",
          "FUTURE_PAYMENT_INSTRUCTION_ACTION_TYPE_SCHEME_VALIDATION": "The FuturePaymentInstructionAction requires scheme validation.",
          "FUTURE_PAYMENT_INSTRUCTION_ACTION_TYPE_UNKNOWN": "Default FuturePaymentInstructionAction type."
        }
      },
      "scheduled_payment_actionsFuturePaymentInstructionScheduleEnrichment": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/scheduled_payment_actionsFuturePaymentInstructionScheduleEnrichmentActionRequest",
            "description": "FuturePaymentInstructionScheduleEnrichmentActionRequest contains ScheduleEnrichment action request payload.",
            "x-create-only": true,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 7
              },
              "changeType": "ADD_FIELD"
            }
          },
          "response": {
            "$ref": "#/components/schemas/scheduled_payment_actionsFuturePaymentInstructionScheduleEnrichmentActionResponse",
            "description": "FuturePaymentInstructionScheduleEnrichmentActionResponse contains ScheduleEnrichment action response payload.",
            "x-update-only": true,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 7
              },
              "changeType": "ADD_FIELD"
            }
          }
        }
      },
      "scheduled_payment_actionsFuturePaymentInstructionScheduleEnrichmentActionRequest": {
        "type": "object"
      },
      "scheduled_payment_actionsFuturePaymentInstructionScheduleEnrichmentActionResponse": {
        "type": "object",
        "properties": {
          "calendar_operation": {
            "$ref": "#/components/schemas/calendar_operationsCalendarOperation",
            "description": "CalendarOperation contains information about the Calendar to schedule the FuturePaymentInstruction."
          },
          "is_successful": {
            "type": "boolean",
            "description": "IsSuccessful marks the schedule enrichment as successful or unsuccessful.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 8
              },
              "changeType": "ADD_FIELD"
            }
          },
          "reason": {
            "type": "string",
            "description": "The reason the action was marked as successful or unsuccessful.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 8
              },
              "changeType": "ADD_FIELD"
            }
          }
        }
      },
      "scheduled_payment_actionsFuturePaymentInstructionSchemeValidation": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/scheduled_payment_actionsFuturePaymentInstructionSchemeValidationActionRequest",
            "description": "FuturePaymentInstructionSchemeValidationActionRequest contains SchemeValidation action request payload.",
            "x-create-only": true,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 7
              },
              "changeType": "ADD_FIELD"
            }
          },
          "response": {
            "$ref": "#/components/schemas/scheduled_payment_actionsFuturePaymentInstructionSchemeValidationActionResponse",
            "description": "FuturePaymentInstructionSchemeValidationActionResponse contains SchemeValidation action response payload.",
            "x-update-only": true,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 7
              },
              "changeType": "ADD_FIELD"
            }
          }
        }
      },
      "scheduled_payment_actionsFuturePaymentInstructionSchemeValidationActionRequest": {
        "type": "object",
        "properties": {
          "future_payment_instruction": {
            "$ref": "#/components/schemas/scheduled_paymentsFuturePaymentInstruction",
            "description": "FuturePaymentInstruction details to perform scheme validation on. Set on creation."
          }
        }
      },
      "scheduled_payment_actionsFuturePaymentInstructionSchemeValidationActionResponse": {
        "type": "object",
        "properties": {
          "is_valid": {
            "type": "boolean",
            "description": "IsValid marks the scheme action validation as valid or invalid.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 8
              },
              "changeType": "ADD_FIELD"
            }
          },
          "reason": {
            "type": "string",
            "description": "The reason the action was marked as valid or invalid.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 8
              },
              "changeType": "ADD_FIELD"
            }
          }
        }
      },
      "scheduled_payment_actionsListFuturePaymentInstructionActionsResponse": {
        "type": "object",
        "properties": {
          "future_payment_instruction_actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/scheduled_payment_actionsFuturePaymentInstructionAction"
            },
            "description": "A list of matching FuturePaymentInstructionActions in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, the first page of results will be returned."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, the last page of results will be returned."
          }
        }
      },
      "scheduled_payment_actionsListStandingOrderInstructionActionsResponse": {
        "type": "object",
        "properties": {
          "standing_order_instruction_actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/scheduled_payment_actionsStandingOrderInstructionAction"
            },
            "description": "A list of matching StandingOrderInstructionActions in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, the first page of results will be returned."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, the last page of results will be returned."
          }
        }
      },
      "scheduled_payment_actionsStandingOrderInstructionAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the StandingOrderInstructionAction, generated on creation. Required for update calls.",
            "x-update-only": true
          },
          "type": {
            "$ref": "#/components/schemas/scheduled_payment_actionsStandingOrderInstructionActionType",
            "description": "The type of this StandingOrderInstructionAction.",
            "x-output-only": true
          },
          "status": {
            "$ref": "#/components/schemas/scheduled_payment_actionsStandingOrderInstructionActionStatus",
            "description": "The current status of this StandingOrderInstructionAction. It has value `PENDING` following creation and `RESOLVED` following update.",
            "x-output-only": true
          },
          "standing_order_instruction_id": {
            "type": "string",
            "description": "The ID of the StandingOrderInstruction this action refers to.",
            "x-output-only": true
          },
          "standing_order_instruction_request_id": {
            "type": "string",
            "description": "The request ID of the StandingOrderInstruction this action refers to.",
            "x-output-only": true
          },
          "standing_order_instruction_scheme_id": {
            "type": "string",
            "description": "The scheme ID of the StandingOrderInstruction. This field helps the processor of the event decide whether to consume or discard the message.",
            "x-output-only": true
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the StandingOrderInstructionAction was created.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the last change to the StandingOrderInstructionAction occurred.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "scheme_validation": {
            "$ref": "#/components/schemas/scheduled_payment_actionsStandingOrderInstructionSchemeValidation",
            "required": false
          },
          "schedule_enrichment": {
            "$ref": "#/components/schemas/scheduled_payment_actionsStandingOrderInstructionScheduleEnrichment",
            "required": false
          }
        }
      },
      "scheduled_payment_actionsStandingOrderInstructionActionStatus": {
        "type": "string",
        "enum": [
          "STANDING_ORDER_INSTRUCTION_ACTION_STATUS_UNKNOWN",
          "STANDING_ORDER_INSTRUCTION_ACTION_STATUS_PENDING",
          "STANDING_ORDER_INSTRUCTION_ACTION_STATUS_RESOLVED"
        ],
        "default": "STANDING_ORDER_INSTRUCTION_ACTION_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "STANDING_ORDER_INSTRUCTION_ACTION_STATUS_PENDING": "The StandingOrderInstructionAction requires processing according to its type.",
          "STANDING_ORDER_INSTRUCTION_ACTION_STATUS_RESOLVED": "The StandingOrderInstructionAction has been resolved.",
          "STANDING_ORDER_INSTRUCTION_ACTION_STATUS_UNKNOWN": "Default StandingOrderInstructionAction status."
        }
      },
      "scheduled_payment_actionsStandingOrderInstructionActionType": {
        "type": "string",
        "enum": [
          "STANDING_ORDER_INSTRUCTION_ACTION_TYPE_UNKNOWN",
          "STANDING_ORDER_INSTRUCTION_ACTION_TYPE_SCHEME_VALIDATION",
          "STANDING_ORDER_INSTRUCTION_ACTION_TYPE_SCHEDULE_ENRICHMENT"
        ],
        "default": "STANDING_ORDER_INSTRUCTION_ACTION_TYPE_UNKNOWN",
        "x-enum-value-descriptions": {
          "STANDING_ORDER_INSTRUCTION_ACTION_TYPE_SCHEDULE_ENRICHMENT": "The StandingOrderInstructionAction requires additional scheduling information.",
          "STANDING_ORDER_INSTRUCTION_ACTION_TYPE_SCHEME_VALIDATION": "The StandingOrderInstructionAction requires scheme validation.",
          "STANDING_ORDER_INSTRUCTION_ACTION_TYPE_UNKNOWN": "Default StandingOrderInstructionAction type."
        }
      },
      "scheduled_payment_actionsStandingOrderInstructionScheduleEnrichment": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/scheduled_payment_actionsStandingOrderInstructionScheduleEnrichmentActionRequest",
            "description": "StandingOrderInstructionScheduleEnrichmentActionRequest contains ScheduleEnrichment action request payload.",
            "x-create-only": true,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 7
              },
              "changeType": "ADD_FIELD"
            }
          },
          "response": {
            "$ref": "#/components/schemas/scheduled_payment_actionsStandingOrderInstructionScheduleEnrichmentActionResponse",
            "description": "StandingOrderInstructionScheduleEnrichmentActionResponse contains ScheduleEnrichment action response payload.",
            "x-update-only": true,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 7
              },
              "changeType": "ADD_FIELD"
            }
          }
        }
      },
      "scheduled_payment_actionsStandingOrderInstructionScheduleEnrichmentActionRequest": {
        "type": "object",
        "properties": {
          "frequency": {
            "$ref": "#/components/schemas/scheduled_paymentsStandingOrderFrequency",
            "description": "The frequency of the StandingOrder. Set on creation."
          },
          "frequency_details": {
            "type": "string",
            "description": "The frequency details of the StandingOrder. Set on creation."
          }
        }
      },
      "scheduled_payment_actionsStandingOrderInstructionScheduleEnrichmentActionResponse": {
        "type": "object",
        "properties": {
          "calendar_operation": {
            "$ref": "#/components/schemas/calendar_operationsCalendarOperation",
            "description": "CalendarOperation contains information about the Calendar to schedule the StandingOrderInstruction."
          },
          "schedule_expression": {
            "type": "string",
            "description": "A schedule expression computed based on the frequency. This is set on an update only if the frequency is `QUARTER`."
          },
          "is_successful": {
            "type": "boolean",
            "description": "IsSuccessful marks the schedule enrichment as successful or unsuccessful.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 8
              },
              "changeType": "ADD_FIELD"
            }
          },
          "reason": {
            "type": "string",
            "description": "The reason the action was marked as successful or unsuccessful.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 8
              },
              "changeType": "ADD_FIELD"
            }
          }
        }
      },
      "scheduled_payment_actionsStandingOrderInstructionSchemeValidation": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/scheduled_payment_actionsStandingOrderInstructionSchemeValidationActionRequest",
            "description": "StandingOrderInstructionSchemeValidationActionRequest contains SchemeValidation action request payload.",
            "x-create-only": true,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 7
              },
              "changeType": "ADD_FIELD"
            }
          },
          "response": {
            "$ref": "#/components/schemas/scheduled_payment_actionsStandingOrderInstructionSchemeValidationActionResponse",
            "description": "StandingOrderInstructionSchemeValidationActionResponse contains SchemeValidation action response payload.",
            "x-update-only": true,
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 7
              },
              "changeType": "ADD_FIELD"
            }
          }
        }
      },
      "scheduled_payment_actionsStandingOrderInstructionSchemeValidationActionRequest": {
        "type": "object",
        "properties": {
          "standing_order_instruction": {
            "$ref": "#/components/schemas/scheduled_paymentsStandingOrderInstruction",
            "description": "StandingOrderInstruction details to perform scheme validation on. Set on creation."
          }
        }
      },
      "scheduled_payment_actionsStandingOrderInstructionSchemeValidationActionResponse": {
        "type": "object",
        "properties": {
          "is_valid": {
            "type": "boolean",
            "description": "IsValid marks the scheme action validation as valid or invalid.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 8
              },
              "changeType": "ADD_FIELD"
            }
          },
          "reason": {
            "type": "string",
            "description": "The reason the action was marked as valid or invalid.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 8
              },
              "changeType": "ADD_FIELD"
            }
          }
        }
      },
      "scheduled_payment_actionsUpdateFuturePaymentInstructionActionRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID to ensure the request is idempotent. Required."
          },
          "future_payment_instruction_action": {
            "$ref": "#/components/schemas/scheduled_payment_actionsFuturePaymentInstructionAction",
            "description": "The FuturePaymentInstructionAction to be updated. Required."
          },
          "update_mask": {
            "$ref": "#/components/schemas/protobufFieldMask",
            "description": "The field mask used to indicate which fields in the resource are to be updated. The allowed fields are `status` and the FuturePaymentInstruction updatable fields. Required."
          }
        }
      },
      "scheduled_payment_actionsUpdateStandingOrderInstructionActionRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID to ensure the request is idempotent. Required."
          },
          "standing_order_instruction_action": {
            "$ref": "#/components/schemas/scheduled_payment_actionsStandingOrderInstructionAction",
            "description": "The StandingOrderInstructionAction to be updated. Required."
          },
          "update_mask": {
            "$ref": "#/components/schemas/protobufFieldMask",
            "description": "The field mask used to indicate which fields in the resource are to be updated. The allowed fields are `status` and the StandingOrderInstruction updatable fields. Required."
          }
        }
      },
      "scheduled_paymentsBankAccount": {
        "type": "object",
        "properties": {
          "bank_id_code": {
            "type": "string",
            "description": "The `bank_id_code` enables unique identification of a single BankAccount held by a branch of a bank. Together with the `bank_id`, these two fields enable the identification of a single account within a country. The allowed value is `GBDSC`, which identifies a `bank_id` that is a UK sort code. Required on resource creation.",
            "x-example-override": "GBDSC"
          },
          "bank_id": {
            "type": "string",
            "description": "The ID of the bank branch the account is held in. If the `bank_id_code` is a GB Domestic Sort Code (GBDSC), this must be a UK sort code. Required on resource creation.",
            "x-example-override": "123456"
          },
          "account_number": {
            "type": "string",
            "description": "The account number. Required on resource creation.",
            "x-example-override": "12345678"
          },
          "account_number_code": {
            "type": "string",
            "description": "The account number code describes the format of the `account_number`. The allowed value is \"BBAN\".",
            "x-release-info": {
              "releaseVersion": {
                "major": 2
              },
              "changeType": "ADD_FIELD"
            },
            "x-example-override": "BBAN"
          }
        }
      },
      "scheduled_paymentsFuturePaymentInstruction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the FuturePaymentInstruction, generated on creation. Required for update calls.",
            "x-output-only": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          },
          "scheme_id": {
            "type": "string",
            "description": "The intended payment scheme that the future payment belongs to. The scheme must be `ACTIVE` for the resource to be created. The allowed value is `FPS`. Required on resource creation.",
            "x-create-only": true,
            "x-example-override": "FPS"
          },
          "debitor_party": {
            "$ref": "#/components/schemas/scheduled_paymentsParty",
            "description": "The details of the party sending the payment. Required on resource creation.",
            "x-create-only": true
          },
          "creditor_party": {
            "$ref": "#/components/schemas/scheduled_paymentsParty",
            "description": "The details of the party receiving the payment. Required on resource creation."
          },
          "reference": {
            "type": "string",
            "description": "Reference information associated with the payment that will be passed to the beneficiary. Optional. For FPS FuturePaymentInstructions, if the reference is set, it must have a maximum length of 18 characters.",
            "x-example-override": "Rent 2020"
          },
          "metadata": {
            "$ref": "#/components/schemas/protobufStruct",
            "description": "Metadata related to the payment. Optional.",
            "x-create-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_STRUCT"
          },
          "payment_date": {
            "type": "string",
            "description": "The date on which the future payment will occur, with format YYYY-MM-DD. Required on resource creation.",
            "x-example-override": "2020-10-20"
          },
          "currency": {
            "type": "string",
            "description": "The three-letter alphabetic currency code based on ISO 4217, for example GBP or USD. Required on resource creation.",
            "x-example-override": "GBP"
          },
          "amount": {
            "type": "string",
            "description": "A string value of the payment amount. This is an unsigned floating point number with an optional decimal point, for example \"10.00\", \"10.1\", \"0.0123\", \"5\". It must be positive and non-zero. For FPS FuturePaymentInstructions, up to two decimal places can be specified. Required on resource creation.",
            "x-example-override": "500.00"
          },
          "status": {
            "$ref": "#/components/schemas/scheduled_paymentsFuturePaymentInstructionStatus",
            "description": "The current status of the FuturePaymentInstruction.",
            "x-update-only": true
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the FuturePaymentInstruction was created.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the last change to the FuturePaymentInstruction occurred.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "migration_info": {
            "$ref": "#/components/schemas/scheduled_paymentsMigrationInfo",
            "description": "Stores migration-specific information.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 5
              },
              "changeType": "ADD_FIELD"
            }
          }
        }
      },
      "scheduled_paymentsFuturePaymentInstructionStatus": {
        "type": "string",
        "enum": [
          "FUTURE_PAYMENT_INSTRUCTION_STATUS_UNKNOWN",
          "FUTURE_PAYMENT_INSTRUCTION_STATUS_RECEIVED",
          "FUTURE_PAYMENT_INSTRUCTION_STATUS_ACTIVE",
          "FUTURE_PAYMENT_INSTRUCTION_STATUS_CANCELLED",
          "FUTURE_PAYMENT_INSTRUCTION_STATUS_COMPLETED",
          "FUTURE_PAYMENT_INSTRUCTION_STATUS_FAILED",
          "FUTURE_PAYMENT_INSTRUCTION_STATUS_PENDING_ACTIVATION",
          "FUTURE_PAYMENT_INSTRUCTION_STATUS_ACTIVATION_FAILED"
        ],
        "default": "FUTURE_PAYMENT_INSTRUCTION_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "FUTURE_PAYMENT_INSTRUCTION_STATUS_ACTIVATION_FAILED": "The future payment instruction encountered an error when attempting to be activated. No payment will be executed and no further actions are allowed on the future payment instruction.",
          "FUTURE_PAYMENT_INSTRUCTION_STATUS_ACTIVE": "The future payment instruction is in progress and a payment will be executed.",
          "FUTURE_PAYMENT_INSTRUCTION_STATUS_CANCELLED": "The future payment instruction has been cancelled by the client, no payment will be executed and no further actions are allowed on the future payment instruction.",
          "FUTURE_PAYMENT_INSTRUCTION_STATUS_COMPLETED": "The payment was executed, and no further actions are allowed on the future payment instruction.",
          "FUTURE_PAYMENT_INSTRUCTION_STATUS_FAILED": "The future payment instruction encountered an unexpected error on creation or during execution, no payment will be executed and no further actions are allowed on the future payment instruction.",
          "FUTURE_PAYMENT_INSTRUCTION_STATUS_PENDING_ACTIVATION": "The future payment instruction has been received and is in the process of being activated.",
          "FUTURE_PAYMENT_INSTRUCTION_STATUS_RECEIVED": "The future payment instruction has been received and further actions are needed to make it active.",
          "FUTURE_PAYMENT_INSTRUCTION_STATUS_UNKNOWN": "Default future payment instruction status."
        }
      },
      "scheduled_paymentsMigrationInfo": {
        "type": "object",
        "properties": {
          "is_migrated": {
            "type": "boolean",
            "description": "This field indicates whether the FuturePaymentInstruction or StandingOrderInstruction has been migrated from another platform into Vault.",
            "x-output-only": true
          },
          "tranche_id": {
            "type": "string",
            "description": "The ID of the tranche that the FuturePaymentInstruction or StandingOrderInstruction was migrated within.",
            "x-output-only": true
          },
          "migration_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the FuturePaymentInstruction or StandingOrderInstruction was migrated.",
            "x-output-only": true
          },
          "source_resource_id": {
            "type": "string",
            "description": "The ID from the source platform of the migrated FuturePaymentInstruction or StandingOrderInstruction.",
            "x-output-only": true
          }
        }
      },
      "scheduled_paymentsParty": {
        "type": "object",
        "properties": {
          "bank_account": {
            "$ref": "#/components/schemas/scheduled_paymentsBankAccount",
            "description": "The BankAccount details associated with the Party."
          },
          "name": {
            "type": "string",
            "description": "The customer name associated with the Party. Required on resource creation."
          },
          "account_id": {
            "type": "string",
            "description": "The Party's Vault account ID. Output only.",
            "x-output-only": true
          }
        }
      },
      "scheduled_paymentsStandingOrderFrequency": {
        "type": "string",
        "enum": [
          "STANDING_ORDER_FREQUENCY_UNKNOWN",
          "STANDING_ORDER_FREQUENCY_INTERVAL_DAY",
          "STANDING_ORDER_FREQUENCY_INTERVAL_WEEK_DAY",
          "STANDING_ORDER_FREQUENCY_EVERY_MONTH_WEEK_DAY",
          "STANDING_ORDER_FREQUENCY_INTERVAL_MONTH_DAY",
          "STANDING_ORDER_FREQUENCY_QUARTER_DAY"
        ],
        "default": "STANDING_ORDER_FREQUENCY_UNKNOWN",
        "x-enum-value-descriptions": {
          "STANDING_ORDER_FREQUENCY_EVERY_MONTH_WEEK_DAY": "Every month, on the N1 week of the month, on the N2 day of the week. N1 is the number of the week in the month, and N2 is the day of the week on which to execute the payment. Create only: if N2 is not specified, the `first_payment_date` day of week is used. The allowed values of N1 range from \"1\" to \"4\". The allowed values of N2, if specified, range from \"0\" to \"6\", where \"0\" represents Sunday and \"6\" represents Saturday.",
          "STANDING_ORDER_FREQUENCY_INTERVAL_DAY": "Every N days. N is the interval in number of days from the `first_payment_date` and between each recurring payment. The allowed values of N range from \"1\" to \"3650\".",
          "STANDING_ORDER_FREQUENCY_INTERVAL_MONTH_DAY": "Every N1 month, on the N2 day of the month. N1 is the interval in number of months from the `first_payment_date` and between each recurring payment. N2 is the day of the month on which to execute the payment. Create only: if N2 is not specified, the `first_payment_date` day of the month is used. The allowed values of N1 range from \"1\" to \"120\". The allowed values of N2, if specified, range from \"1\" to \"31\".",
          "STANDING_ORDER_FREQUENCY_INTERVAL_WEEK_DAY": "Every N1 weeks, on the N2 day of the week. N1 is the interval in number of weeks from the `first_payment_date` and between each recurring payment. N2 is the day of the week on which to execute the payment. Create only: if N2 is not specified, the `first_payment_date` day of week is used. The allowed values of N1 range from \"1\" to \"520\". The allowed values of N2, if specified, range from \"0\" to \"6\", where \"0\" represents Sunday and \"6\" represents Saturday.",
          "STANDING_ORDER_FREQUENCY_QUARTER_DAY": "Every Q quarter day. Q is the type of quarter day. The allowed value is \"ENGLISH\". If the value of `frequency_details` is \"ENGLISH\", payments will be triggered on 25th March, 24th June, 29th September and 25th December.",
          "STANDING_ORDER_FREQUENCY_UNKNOWN": "Default frequency value."
        }
      },
      "scheduled_paymentsStandingOrderInstruction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the StandingOrderInstruction, generated on creation. Required for update calls.",
            "x-output-only": true,
            "x-example-override": "3b595fb4-3f7e-4dbb-a1b5-e59db8d5ee77"
          },
          "scheme_id": {
            "type": "string",
            "description": "The intended payment scheme that the standing order payment belongs to. The scheme must be `ACTIVE` for the resource to be created. The allowed value is `FPS`. Required on resource creation.",
            "x-create-only": true,
            "x-example-override": "FPS"
          },
          "debitor_party": {
            "$ref": "#/components/schemas/scheduled_paymentsParty",
            "description": "The details of the party sending the payment. Required on resource creation.",
            "x-create-only": true
          },
          "creditor_party": {
            "$ref": "#/components/schemas/scheduled_paymentsParty",
            "description": "The details of the party receiving the payment. Required on resource creation."
          },
          "reference": {
            "type": "string",
            "description": "Reference information associated with the payment that will be passed to the beneficiary. Optional. For FPS FuturePaymentInstructions, if the reference is set, it must have a maximum length of 18 characters.",
            "x-example-override": "Rent 2020"
          },
          "metadata": {
            "$ref": "#/components/schemas/protobufStruct",
            "description": "Metadata related to the payment. Optional.",
            "x-create-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_STRUCT"
          },
          "currency": {
            "type": "string",
            "description": "The three-letter alphabetic currency code based on ISO 4217, for example GBP or USD. Required on resource creation.",
            "x-example-override": "GBP"
          },
          "schedule": {
            "$ref": "#/components/schemas/scheduled_paymentsStandingOrderSchedule",
            "description": "The schedule of the StandingOrderInstruction. Required on resource creation."
          },
          "status": {
            "$ref": "#/components/schemas/scheduled_paymentsStandingOrderInstructionStatus",
            "description": "The current status of the StandingOrderInstruction.",
            "x-update-only": true
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the StandingOrderInstruction was created.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the last change to the StandingOrderInstruction occurred.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "migration_info": {
            "$ref": "#/components/schemas/scheduled_paymentsMigrationInfo",
            "description": "Stores migration-specific information.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 5
              },
              "changeType": "ADD_FIELD"
            }
          }
        }
      },
      "scheduled_paymentsStandingOrderInstructionStatus": {
        "type": "string",
        "enum": [
          "STANDING_ORDER_INSTRUCTION_STATUS_UNKNOWN",
          "STANDING_ORDER_INSTRUCTION_STATUS_RECEIVED",
          "STANDING_ORDER_INSTRUCTION_STATUS_ACTIVE",
          "STANDING_ORDER_INSTRUCTION_STATUS_INACTIVE",
          "STANDING_ORDER_INSTRUCTION_STATUS_CANCELLED",
          "STANDING_ORDER_INSTRUCTION_STATUS_COMPLETED",
          "STANDING_ORDER_INSTRUCTION_STATUS_FAILED",
          "STANDING_ORDER_INSTRUCTION_STATUS_PENDING_ACTIVATION",
          "STANDING_ORDER_INSTRUCTION_STATUS_ACTIVATION_FAILED"
        ],
        "default": "STANDING_ORDER_INSTRUCTION_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "STANDING_ORDER_INSTRUCTION_STATUS_ACTIVATION_FAILED": "The standing order instruction encountered an error when attempting to be activated. No payment will be executed and no further actions are allowed on the standing order instruction.",
          "STANDING_ORDER_INSTRUCTION_STATUS_ACTIVE": "The standing order instruction is in progress and payments will be executed.",
          "STANDING_ORDER_INSTRUCTION_STATUS_CANCELLED": "The standing order instruction has been cancelled by the client, no further payments will be executed and no further actions are allowed on the standing order instruction.",
          "STANDING_ORDER_INSTRUCTION_STATUS_COMPLETED": "All payments were executed, and no further actions are allowed on the standing order instruction.",
          "STANDING_ORDER_INSTRUCTION_STATUS_FAILED": "The standing order instruction encountered an unexpected error on creation or during execution, no further payments will be executed and no further actions are allowed on the standing order instruction.",
          "STANDING_ORDER_INSTRUCTION_STATUS_INACTIVE": "The standing order instruction is suspended and payments will not be executed.",
          "STANDING_ORDER_INSTRUCTION_STATUS_PENDING_ACTIVATION": "The standing order instruction has been received and is in the process of being activated.",
          "STANDING_ORDER_INSTRUCTION_STATUS_RECEIVED": "The standing order instruction has been received and further actions are needed to make it active.",
          "STANDING_ORDER_INSTRUCTION_STATUS_UNKNOWN": "Default standing order instruction status."
        }
      },
      "scheduled_paymentsStandingOrderSchedule": {
        "type": "object",
        "properties": {
          "first_payment_date": {
            "type": "string",
            "description": "The date on which the first payment of the standing order will occur, with format YYYY-MM-DD. The payment will be made with `first_payment_amount` (or `recurring_amount` if it is not set). Required on resource creation.",
            "x-example-override": "2020-10-20"
          },
          "first_payment_amount": {
            "type": "string",
            "description": "The amount of the first payment. Optional on resource creation; if this is not specified, the `recurring_payment_amount` will be used on the first payment.",
            "x-example-override": "500.00"
          },
          "frequency": {
            "$ref": "#/components/schemas/scheduled_paymentsStandingOrderFrequency",
            "description": "The frequency of the standing order. Together with additional information from `frequency_details` and from the `first_payment_date`, it specifies the time interval between each payment. The maximum allowed interval between payments is ten years.",
            "x-example-override": "STANDING_ORDER_FREQUENCY_INTERVAL_MONTH_DAY"
          },
          "frequency_details": {
            "type": "string",
            "description": "Additional information for the `frequency` rules, formatted as \"Q\", \"N\" or \"N1:N2\". Create only: if the rule takes N2 but only one value (N1) is specified, N2 is computed from the day of `first_payment_date`. For example, for a recurring payment every two months on the 15th day of the months, `INTERVAL_MONTH_DAY` is set, and `frequency details` will contain \"2:15\", or only \"2\" if the day of `first_payment_date` is already 15.",
            "x-example-override": "2:20"
          },
          "frequency_start_date": {
            "type": "string",
            "description": "A payment will be made on this date and a recurring schedule will be applied from this date. This field should be set when `frequency` and `frequency_details` are updated if the `first_payment_date` has already passed. The date must be in the future. Update only.",
            "x-update-only": true,
            "x-example-override": "2020-12-20"
          },
          "recurring_payment_amount": {
            "type": "string",
            "description": "The amount of the recurring payment. Required on resource creation.",
            "x-example-override": "1000.00"
          },
          "last_payment_date": {
            "type": "string",
            "description": "The date on which the last payment of the standing order will occur, in the format YYYY-MM-DD. The payment will be made with `last_payment_amount` (or `recurring_amount` if it is not set). Optional on resource creation; if the date is not specified, the standing order will run indefinitely until the `last_payment_date` is updated or the status is updated to `CANCELLED`. NOTE: If both last and final payment date are set, `final_payment_date` will take precedence.",
            "x-release-info": {
              "noticeVersion": {
                "major": 2,
                "minor": 8
              },
              "releaseVersion": {
                "major": 4
              },
              "changeType": "REMOVE_FIELD",
              "description": "This field is replaced by final_payment_date"
            },
            "x-example-override": "2021-05-20"
          },
          "last_payment_amount": {
            "type": "string",
            "description": "The amount of the last payment. Optional on resource creation; if this is not specified, the `recurring_payment_amount` will be used on the last payment. NOTE: If both last and final payment amount are set, `final_payment_amount` will take precedence.",
            "x-release-info": {
              "noticeVersion": {
                "major": 2,
                "minor": 8
              },
              "releaseVersion": {
                "major": 4
              },
              "changeType": "REMOVE_FIELD",
              "description": "This field is replaced by final_payment_amount"
            },
            "x-example-override": "200.00"
          },
          "final_payment_date": {
            "type": "string",
            "description": "The date on which the final payment of the standing order will occur, in the format YYYY-MM-DD. The payment will be made with `final_payment_amount` (or `recurring_amount` if `final_payment_amount` is not set). Optional on resource creation; if the date is not specified, the standing order will run indefinitely until the `final_payment_date` is updated or the status is updated to `CANCELLED`. NOTE: If both final and last payment date are set, `final_payment_date` will take precedence.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 8
              },
              "changeType": "ADD_FIELD"
            },
            "x-example-override": "2021-05-20"
          },
          "final_payment_amount": {
            "type": "string",
            "description": "The amount of the final payment. Optional on resource creation; if this is not specified, the `recurring_payment_amount` will be used on the final payment. NOTE: If both final and last payment amount are set, `final_payment_amount` will take precedence.",
            "x-release-info": {
              "releaseVersion": {
                "major": 2,
                "minor": 8
              },
              "changeType": "ADD_FIELD"
            },
            "x-example-override": "200.00"
          }
        }
      },
      "errorsVaultError": {
        "type": "object",
        "properties": {
          "vault_error_code": {
            "type": "string",
            "description": "The internal Vault Error Code. Constructed from the enums in this file."
          },
          "grpc_status_code": {
            "type": "integer",
            "format": "int64",
            "description": "The gRPC status code of the error."
          },
          "tracing_id": {
            "type": "string",
            "description": "The Tracing ID of the request in which the error is raised."
          },
          "message": {
            "type": "string",
            "description": "A human friendly English readable string describing the error. To be expanded/replaced in the future."
          }
        },
        "description": "This error should be used whenever a Service propagates an error."
      },
      "scheduled_paymentsActivateFuturePaymentInstructionRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID to ensure the request is idempotent. Required.",
            "x-example-override": "0693bd86-694b-439e-83ff-a3e3229c2e6c"
          },
          "id": {
            "type": "string",
            "description": "The ID of the FuturePaymentInstruction to be activated. Required."
          }
        }
      },
      "scheduled_paymentsActivateStandingOrderInstructionRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID to ensure the request is idempotent. Required.",
            "x-example-override": "0693bd86-694b-439e-83ff-a3e3229c2e6c"
          },
          "id": {
            "type": "string",
            "description": "The ID of the StandingOrderInstruction to be activated. Required."
          }
        }
      },
      "scheduled_paymentsBatchGetFuturePaymentInstructionAsyncOperationsResponse": {
        "type": "object",
        "properties": {
          "async_operations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/async_operationsAsyncOperation"
            },
            "description": "A map of ID to the AsyncOperation with that ID.",
            "x-overrides": [
              {
                "path": "response",
                "type": "#/definitions/scheduled_paymentsFuturePaymentInstruction"
              }
            ]
          }
        }
      },
      "scheduled_paymentsBatchGetFuturePaymentInstructionsResponse": {
        "type": "object",
        "properties": {
          "future_payment_instructions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/scheduled_paymentsFuturePaymentInstruction"
            },
            "description": "A map of the FuturePaymentInstruction ID to the FuturePaymentInstruction."
          }
        }
      },
      "scheduled_paymentsBatchGetStandingOrderInstructionAsyncOperationsResponse": {
        "type": "object",
        "properties": {
          "async_operations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/async_operationsAsyncOperation"
            },
            "description": "A map of ID to the AsyncOperation with that ID.",
            "x-overrides": [
              {
                "path": "response",
                "type": "#/definitions/scheduled_paymentsStandingOrderInstruction"
              }
            ]
          }
        }
      },
      "scheduled_paymentsBatchGetStandingOrderInstructionsResponse": {
        "type": "object",
        "properties": {
          "standing_order_instructions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/scheduled_paymentsStandingOrderInstruction"
            },
            "description": "A map of the StandingOrderInstruction ID to the StandingOrderInstruction."
          }
        }
      },
      "scheduled_paymentsBulkMigrateFuturePaymentInstructionsResponse": {
        "type": "object",
        "properties": {
          "future_payment_instructions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/scheduled_paymentsFuturePaymentInstruction"
            },
            "description": "A map of `request_id` to FuturePaymentInstructions that were migrated."
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/errorsVaultError"
            },
            "description": "A map of `request_id` to VaultErrors. Only populated on non-atomic migrations."
          }
        }
      },
      "scheduled_paymentsBulkMigrateStandingOrderInstructionsResponse": {
        "type": "object",
        "properties": {
          "standing_order_instructions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/scheduled_paymentsStandingOrderInstruction"
            },
            "description": "A map of `request_id` to StandingOrderInstructions that were migrated."
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/errorsVaultError"
            },
            "description": "A map of `request_id` to VaultErrors. Only populated on non-atomic migrations."
          }
        }
      },
      "scheduled_paymentsCreateFuturePaymentInstructionRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required.",
            "x-example-override": "0693bd86-694b-439e-83ff-a3e3229c2e6c"
          },
          "future_payment_instruction": {
            "$ref": "#/components/schemas/scheduled_paymentsFuturePaymentInstruction",
            "description": "The FuturePaymentInstruction to be created. Required."
          }
        }
      },
      "scheduled_paymentsCreateStandingOrderInstructionRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required.",
            "x-example-override": "0693bd86-694b-439e-83ff-a3e3229c2e6c"
          },
          "standing_order_instruction": {
            "$ref": "#/components/schemas/scheduled_paymentsStandingOrderInstruction",
            "description": "The StandingOrderInstruction to be created. Required."
          }
        }
      },
      "scheduled_paymentsListFuturePaymentInstructionAsyncOperationsResponse": {
        "type": "object",
        "properties": {
          "async_operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/async_operationsAsyncOperation"
            },
            "description": "A list of matching AsyncOperations in order of descending `create_timestamp` (most recently created first).",
            "x-overrides": [
              {
                "path": "response",
                "type": "#/definitions/scheduled_paymentsFuturePaymentInstruction"
              }
            ]
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, this response is the first page."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, this response is the last page."
          }
        }
      },
      "scheduled_paymentsListFuturePaymentInstructionsResponse": {
        "type": "object",
        "properties": {
          "future_payment_instructions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/scheduled_paymentsFuturePaymentInstruction"
            },
            "description": "A list of matching FuturePaymentInstructions in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, the first page of results will be returned."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, the last page of results will be returned."
          }
        }
      },
      "scheduled_paymentsListStandingOrderInstructionAsyncOperationsResponse": {
        "type": "object",
        "properties": {
          "async_operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/async_operationsAsyncOperation"
            },
            "description": "A list of matching AsyncOperations in order of descending `create_timestamp` (most recently created first).",
            "x-overrides": [
              {
                "path": "response",
                "type": "#/definitions/scheduled_paymentsStandingOrderInstruction"
              }
            ]
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, this response is the first page."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, this response is the last page."
          }
        }
      },
      "scheduled_paymentsListStandingOrderInstructionsResponse": {
        "type": "object",
        "properties": {
          "standing_order_instructions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/scheduled_paymentsStandingOrderInstruction"
            },
            "description": "A list of matching StandingOrderInstructions in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, the first page of results will be returned."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, the last page of results will be returned."
          }
        }
      },
      "scheduled_paymentsUpdateFuturePaymentInstructionRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID to ensure the request is idempotent. Required.",
            "x-example-override": "0693bd86-694b-439e-83ff-a3e3229c2e6c"
          },
          "future_payment_instruction": {
            "$ref": "#/components/schemas/scheduled_paymentsFuturePaymentInstruction",
            "description": "The FuturePaymentInstruction to be updated. Required."
          },
          "update_mask": {
            "$ref": "#/components/schemas/protobufFieldMask",
            "description": "The field mask used to indicate which fields in the resource are to be updated. The allowed fields are `reference`, `payment_date`, `currency`, `amount`, `status`, `creditor_party.name`, `creditor_party.bank_account.bank_id_code`, `creditor_party.bank_account.bank_id`, `creditor_party.bank_account.account_number` and `creditor_party.bank_account.account_number_code`. Required.",
            "x-example-override": "{\"paths\": [\"reference\", \"payment_date\", \"currency\", \"amount\", \"status\",\"creditor_party.name\", \"creditor_party.bank_account.bank_id_code\",\"creditor_party.bank_account.bank_id\", \"creditor_party.bank_account.account_number\",\"creditor_party.bank_account.account_number_code\"]}"
          }
        }
      },
      "scheduled_paymentsUpdateStandingOrderInstructionRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID to ensure the request is idempotent. Required.",
            "x-example-override": "0693bd86-694b-439e-83ff-a3e3229c2e6c"
          },
          "standing_order_instruction": {
            "$ref": "#/components/schemas/scheduled_paymentsStandingOrderInstruction",
            "description": "The StandingOrderInstruction to be updated. Required."
          },
          "update_mask": {
            "$ref": "#/components/schemas/protobufFieldMask",
            "description": "The field mask used to indicate which fields in the resource are to be updated. The allowed fields are `reference`, `currency`, `schedule.first_payment_date`, `schedule.first_payment_amount`, `schedule.frequency_start_date`, `schedule.frequency`, `schedule.frequency_details`, `schedule.recurring_payment_amount`, `schedule.last_payment_date`, `schedule.last_payment_amount`, `schedule.final_payment_date`, `schedule.final_payment_amount`, `status`, `creditor_party.name`, `creditor_party.bank_account.bank_id_code`, `creditor_party.bank_account.bank_id`, `creditor_party.bank_account.account_number` and `creditor_party.bank_account.account_number_code`. Required.",
            "x-example-override": "{\"paths\": [\"reference\",  \"currency\", \"schedule.first_payment_date\", \"schedule.first_payment_amount\", \"schedule.frequency\", \"schedule.frequency_details\", \"schedule.recurring_payment_amount\", \"schedule.last_payment_date\", \"schedule.last_payment_amount\", \"status\", \"creditor_party.name\", \"creditor_party.bank_account.bank_id_code\",\"creditor_party.bank_account.bank_id\", \"creditor_party.bank_account.account_number\",\"creditor_party.bank_account.account_number_code\"]}"
          }
        }
      },
      "scheme_messagesBatchGetSchemeMessagesResponse": {
        "type": "object",
        "properties": {
          "scheme_messages": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/scheme_messagesSchemeMessage"
            },
            "description": "A map of the Scheme Message ID to the Scheme Message."
          }
        }
      },
      "scheme_messagesCreateSchemeMessageRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent.",
            "x-example-override": "60392b59-4ff0-47d3-8333-433743395f14"
          },
          "scheme_message": {
            "$ref": "#/components/schemas/scheme_messagesSchemeMessage",
            "description": "The scheme message to be submitted. Required on resource creation.",
            "x-excluded-fields": [
              "id",
              "create_request_id",
              "create_timestamp"
            ]
          }
        }
      },
      "scheme_messagesListSchemeMessagesResponse": {
        "type": "object",
        "properties": {
          "scheme_messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/scheme_messagesSchemeMessage"
            },
            "description": "A list of matching scheme messages in order of descending timestamp (most recent first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "Token used to retrieve the previous page. If empty, returns the first page of results."
          },
          "next_page_token": {
            "type": "string",
            "description": "Token used to retrieve the next page. If empty, returns the last page of results."
          }
        }
      },
      "scheme_messagesSchemeMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the Scheme Message assigned by the Payments Hub.",
            "x-example-override": "bfd0b881-3525-48c7-b428-d55759070dca"
          },
          "create_request_id": {
            "type": "string",
            "description": "The ID of the request that originally created the Scheme Message.",
            "x-example-override": "60392b59-4ff0-47d3-8333-433743395f14"
          },
          "scheme_message_id": {
            "type": "string",
            "description": "The ID of the Scheme Message assigned by the Scheme. Required on resource creation.",
            "x-example-override": "469323"
          },
          "scheme": {
            "type": "string",
            "description": "The ID of the Scheme this Scheme Message has been received from. Required on resource creation.",
            "x-example-override": "FPS"
          },
          "type": {
            "type": "string",
            "description": "The type of the Scheme Message.",
            "x-example-override": "976"
          },
          "scheme_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp associated to the Scheme Message set by the Scheme. Required on resource creation.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the Scheme Message was created by Vault. Default is to current time.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "data": {
            "$ref": "#/components/schemas/protobufStruct",
            "description": "Data included in the original Scheme Message. No validations are performed on this field. The JSON representation of this field is a JSON object. Required on resource creation.",
            "x-third-party": "GOOGLE_PROTOBUF_STRUCT",
            "x-example-override": "{\"Function Code\": \"Security Transaction Limit Change\", \"New STL Limit\": \"70.00\", \"Payment Type Info\": \"10\", \"Previous STL Limit\": \"42.00\", \"Settlement Date\": \"2019-01-09\", \"Settlement Method\": \"CLRG\"}"
          }
        }
      },
      "schemesBatchGetCalendarOperationConfigsResponse": {
        "type": "object",
        "properties": {
          "calendar_operation_configs": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/schemesCalendarOperationConfig"
            },
            "description": "A map of the CalendarOperationConfig ID to the CalendarOperationConfig."
          }
        }
      },
      "schemesBatchGetSchemeConfigsResponse": {
        "type": "object",
        "properties": {
          "scheme_configs": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/schemesSchemeConfig"
            },
            "description": "A map of SchemeConfig ID to the SchemeConfig."
          }
        }
      },
      "schemesBatchGetSchemesResponse": {
        "type": "object",
        "properties": {
          "schemes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/schemesScheme"
            },
            "description": "A map of the Scheme ID to the Scheme."
          }
        }
      },
      "schemesCalendarMode": {
        "type": "string",
        "enum": [
          "CALENDAR_MODE_UNKNOWN",
          "CALENDAR_MODE_NOOP",
          "CALENDAR_MODE_DELAY",
          "CALENDAR_MODE_SKIP",
          "CALENDAR_MODE_FORWARD"
        ],
        "default": "CALENDAR_MODE_UNKNOWN",
        "x-enum-value-descriptions": {
          "CALENDAR_MODE_DELAY": "The schedule should be delayed.",
          "CALENDAR_MODE_FORWARD": "The schedule should be fast forwarded.",
          "CALENDAR_MODE_NOOP": "No operation.",
          "CALENDAR_MODE_SKIP": "The schedule should be skipped.",
          "CALENDAR_MODE_UNKNOWN": "Default value."
        }
      },
      "schemesCalendarOperationConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the CalendarOperationConfig assigned by the Payments Hub.",
            "x-example-override": "ecac6d88-f484-478f-b9f3-6318790601ed"
          },
          "calendar_id": {
            "type": "string",
            "description": "The ID of the Core API's Calendar resource that is to be used. Required on resource creation.",
            "x-example-override": "BACS"
          },
          "event_name": {
            "type": "string",
            "description": "The name of the Core API's CalendarEvent resource that is to be used. Required on resource creation.",
            "x-example-override": "BACS Working Day"
          },
          "calendar_mode": {
            "$ref": "#/components/schemas/schemesCalendarMode",
            "description": "The action to take when a Core API's Scheduler Job does not match a CalendarEvent. Required on resource creation.",
            "x-example-override": "CALENDAR_MODE_DELAY"
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the CalendarOperationConfig was created. This is generated by the Payments Hub.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          }
        }
      },
      "schemesCalendarOperationConfigIds": {
        "type": "object",
        "properties": {
          "future_payment_instructions": {
            "type": "string",
            "description": "The CalendarOperationConfig ID to use when scheduling Future Payments. Optional.",
            "x-example-override": "ecac6d88-f484-478f-b9f3-6318790601ed"
          },
          "standing_order_instructions": {
            "type": "string",
            "description": "The CalendarOperationConfig ID to use when scheduling Standing Orders. Optional.",
            "x-example-override": "ecac6d88-f484-478f-b9f3-6318790601ed"
          },
          "direct_debits": {
            "type": "string",
            "description": "The CalendarOperationConfig ID to use when scheduling Direct Debits. Optional. Not currently used.",
            "x-example-override": "ecac6d88-f484-478f-b9f3-6318790601ed"
          },
          "payments": {
            "type": "string",
            "description": "The CalendarOperationConfig ID to use when scheduling Payments. Optional. Not currently used.",
            "x-example-override": "ecac6d88-f484-478f-b9f3-6318790601ed"
          }
        }
      },
      "schemesCreateCalendarOperationConfigRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required.",
            "x-example-override": "9f7e7fbc-dd80-4c9b-900b-d3af99c71140"
          },
          "calendar_operation_config": {
            "$ref": "#/components/schemas/schemesCalendarOperationConfig",
            "description": "The CalendarOperationConfig to be created. Required.",
            "x-excluded-fields": [
              "id",
              "create_timestamp"
            ]
          }
        }
      },
      "schemesCreateSchemeConfigRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required.",
            "x-example-override": "33744bdf-54a0-4308-8893-f716a6dfafc5"
          },
          "scheme_config": {
            "$ref": "#/components/schemas/schemesSchemeConfig",
            "description": "The SchemeConfig to be created. Required.",
            "x-excluded-fields": [
              "id",
              "create_timestamp"
            ]
          }
        }
      },
      "schemesCreateSchemeRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required.",
            "x-example-override": "64f44af7-beb4-450d-9b47-68bcbb5ee599"
          },
          "scheme": {
            "$ref": "#/components/schemas/schemesScheme",
            "description": "The Scheme to be created. Required.",
            "x-excluded-fields": [
              "status",
              "update_count",
              "create_timestamp",
              "update_timestamp"
            ]
          }
        }
      },
      "schemesListCalendarOperationConfigsResponse": {
        "type": "object",
        "properties": {
          "calendar_operation_configs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schemesCalendarOperationConfig"
            },
            "description": "A list of matching CalendarOperationConfigs in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, the first page of results will be returned."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, the last page of results will be returned."
          }
        }
      },
      "schemesListSchemeConfigsResponse": {
        "type": "object",
        "properties": {
          "scheme_configs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schemesSchemeConfig"
            },
            "description": "A list of matching SchemeConfigs in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, the first page of results will be returned."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, the last page of results will be returned."
          }
        }
      },
      "schemesListSchemesResponse": {
        "type": "object",
        "properties": {
          "schemes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schemesScheme"
            },
            "description": "A list of matching Schemes in order of descending `update_timestamp` (most recently updated first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, the first page of results will be returned."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, the last page of results will be returned."
          }
        }
      },
      "schemesScheme": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The name of the Scheme being created in the Payments Hub. This will be used when creating payments using this Scheme. Must be unique. Required on resource creation.",
            "x-example-override": "FPS"
          },
          "current_scheme_config_id": {
            "type": "string",
            "description": "The ID of a SchemeConfig present in the Payments Hub. Required on resource creation.",
            "x-example-override": "eb50d810-0f4f-45d5-afa1-1ecad423db39"
          },
          "current_calendar_operation_config_ids": {
            "$ref": "#/components/schemas/schemesCalendarOperationConfigIds",
            "description": "The IDs of CalendarOperationConfig resources present in the Payments Hub."
          },
          "status": {
            "$ref": "#/components/schemas/schemesSchemeStatus",
            "description": "The current status of the Scheme.",
            "x-example-override": "SCHEME_STATUS_ACTIVE"
          },
          "update_count": {
            "type": "string",
            "description": "Monotonically increasing number of updates. This is generated by the Payments Hub.",
            "x-example-override": "1"
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the Scheme was created. This is generated by the Payments Hub.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          },
          "update_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating the last time the Scheme was updated. This is generated by the Payments Hub.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          }
        }
      },
      "schemesSchemeConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the SchemeConfig assigned by the Payments Hub.",
            "x-example-override": "eb50d810-0f4f-45d5-afa1-1ecad423db39"
          },
          "transaction_limit": {
            "type": "string",
            "description": "A string value of the maximum transaction amount using this Scheme. This is an unsigned floating point number with an optional decimal point, for example, \"10.00\", \"10.1\", \"0.02123\", \"100000\". It must be positive and non-zero. Required on resource creation.",
            "x-example-override": "250000"
          },
          "reference_pattern": {
            "type": "string",
            "description": "A regular expression pattern for the allowed reference format for payments via this Scheme. Optional.\n\nFor more information on the regular expression syntax supported by `SchemeConfig`, please see [regexp](https://golang.org/pkg/regexp/). Note that when using this API over HTTP REST, users may be required to escape special characters.",
            "x-example-override": "^[A-Za-z0-9/\\-?:().,'+ \u201d#=!\\%\\&*<>;{@]{0,18}$"
          },
          "transaction_id_pattern": {
            "type": "string",
            "description": "A regular expression pattern for the allowed transaction ID format for payments via this Scheme. Optional.\n\nFor more information on the regular expression syntax supported by `SchemeConfig`, please see [regexp](https://golang.org/pkg/regexp/). Note that when using this API over HTTP REST, users may be required to escape special characters.",
            "x-example-override": "^[A-Za-z0-9/\\-?:().,'+ \u201d#=!\\%\\&*<>;{@]{1,18}$"
          },
          "data": {
            "$ref": "#/components/schemas/protobufStruct",
            "description": "Scheme-specific data. No validations are performed on this field. The JSON representation of this field is a JSON object. Optional.",
            "x-third-party": "GOOGLE_PROTOBUF_STRUCT",
            "x-example-override": "{\"scheme_description\": \"Instant payment scheme\"}"
          },
          "scheme_id": {
            "type": "string",
            "description": "The ID of the Scheme for which this SchemeConfig is created. Required on resource creation.",
            "x-example-override": "FPS"
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the SchemeConfig was created. This is generated by the Payments Hub.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          }
        }
      },
      "schemesSchemeStatus": {
        "type": "string",
        "enum": [
          "SCHEME_STATUS_UNKNOWN",
          "SCHEME_STATUS_ACTIVE",
          "SCHEME_STATUS_INACTIVE"
        ],
        "default": "SCHEME_STATUS_UNKNOWN",
        "x-enum-value-descriptions": {
          "SCHEME_STATUS_ACTIVE": "Once a Scheme is ACTIVE, it is possible to create [Payments](/api/payments_hub_api/#Payments).",
          "SCHEME_STATUS_INACTIVE": "Once a Scheme is INACTIVE, it is not possible to create [Payments](/api/payments_hub_api/#Payments).",
          "SCHEME_STATUS_UNKNOWN": "Default value."
        }
      },
      "schemesUpdateSchemeRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID to ensure the request is idempotent. Required.",
            "x-example-override": "d042dfe4-08de-45a7-8b07-4a583293b718"
          },
          "scheme": {
            "$ref": "#/components/schemas/schemesScheme",
            "description": "The Scheme object to be updated. Required.",
            "x-excluded-fields": [
              "id",
              "update_count",
              "create_timestamp",
              "update_timestamp"
            ]
          },
          "update_mask": {
            "$ref": "#/components/schemas/protobufFieldMask",
            "description": "The field mask used to indicate which fields in the resource are to be updated. Note that only one of `current_scheme_config_id`, `status`, `current_calendar_operation_config_ids.future_payment_instructions`, `current_calendar_operation_config_ids.standing_order_instructions`, `current_calendar_operation_config_ids.direct_debits` and `current_calendar_operation_config_ids.payments` is permitted to be included in the same update_mask. Required.",
            "x-example-override": "{\"paths\": [\"current_scheme_config_id\"]}"
          }
        }
      },
      "ukBBAN": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the BBAN assigned by the Payments Hub.",
            "x-example-override": "13822934-1a09-4b62-952b-1cefc8c15520"
          },
          "bank_id_code": {
            "type": "string",
            "description": "The Bank ID Code identifies the country in which the account is located, this is \"GBDSC\" in all UK cases.",
            "x-example-override": "GBDSC"
          },
          "bank_id": {
            "type": "string",
            "description": "The ID of the bank branch the account is held in. This is also known as the sort code. Required on resource creation.",
            "x-example-override": "123456"
          },
          "account_number": {
            "type": "string",
            "description": "The account number of the account. Optional on resource creation. If it is provided, modulus checking will be applied to verify the account number's validity. If it is not provided, the Payments Hub will generate an account number for the provided `bank_id`.",
            "x-example-override": "12345678"
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the BBAN was created. This is generated by the Payments Hub.",
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          }
        }
      },
      "ukBatchGetBBANsResponse": {
        "type": "object",
        "properties": {
          "bbans": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ukBBAN"
            },
            "description": "A map of the BBAN ID to the BBAN."
          }
        }
      },
      "ukBatchGetIBANsResponse": {
        "type": "object",
        "properties": {
          "ibans": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ukIBAN"
            },
            "description": "A map of the IBAN ID to the IBAN."
          }
        }
      },
      "ukCreateBBANRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required.",
            "x-example-override": "c818d92b-b9c5-4aeb-b17f-4ae64a3b932c"
          },
          "bban": {
            "$ref": "#/components/schemas/ukBBAN",
            "description": "The BBAN to be created. Required.",
            "x-excluded-fields": [
              "id",
              "bank_id_code",
              "create_timestamp"
            ]
          }
        }
      },
      "ukCreateIBANRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "A string UUID used to ensure the request is idempotent. Required.",
            "x-example-override": "c298983c-4c7b-401b-8749-c3d925edd3cf"
          },
          "iban": {
            "$ref": "#/components/schemas/ukIBAN",
            "description": "The IBAN to be created. Required.",
            "x-excluded-fields": [
              "id",
              "create_timestamp"
            ]
          }
        }
      },
      "ukIBAN": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the IBAN assigned by the Payments Hub.",
            "x-output-only": true,
            "x-example-override": "4d786761-ff4d-4b87-a2d6-7c6c8556d867"
          },
          "bic": {
            "type": "string",
            "description": "The SWIFT BIC code that will be used for the generation of the IBAN. Required on resource creation.",
            "x-create-only": true,
            "x-example-override": "BICABCXXXXX"
          },
          "bban_id": {
            "type": "string",
            "description": "The ID of the UK BBAN resource in the Payments Hub. The values of the BBAN fields are used for the generation of the IBAN. Required on resource creation.",
            "x-create-only": true,
            "x-example-override": "d4ceff32-92f4-42a3-9c37-c49b1d6715ea"
          },
          "account_number": {
            "type": "string",
            "description": "The IBAN number of the account. Optional on resource creation. If the IBAN is provided, the Modulo97 algorithm is applied to validate the IBAN's check digits. If the IBAN is not provided, the IBAN will be generated by the Payments Hub.",
            "x-example-override": "GB29BICA12345612345678"
          },
          "create_timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the IBAN was created. This is generated by the Payments Hub.",
            "x-output-only": true,
            "x-third-party": "GOOGLE_PROTOBUF_TIMESTAMP"
          }
        }
      },
      "ukListBBANsResponse": {
        "type": "object",
        "properties": {
          "bbans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ukBBAN"
            },
            "description": "A list of matching BBANs in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, the first page of results will be returned."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, the last page of results will be returned."
          }
        }
      },
      "ukListIBANsResponse": {
        "type": "object",
        "properties": {
          "ibans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ukIBAN"
            },
            "description": "A list of matching IBANs in order of descending `create_timestamp` (most recently created first)."
          },
          "previous_page_token": {
            "type": "string",
            "description": "The token used to retrieve the previous page. If empty, the first page of results will be returned."
          },
          "next_page_token": {
            "type": "string",
            "description": "The token used to retrieve the next page. If empty, the last page of results will be returned."
          }
        }
      },
      "ukValidateBBANRequest": {
        "type": "object",
        "properties": {
          "bban": {
            "$ref": "#/components/schemas/ukBBAN",
            "description": "The BBAN to be validated. This does not need to be a BBAN resource present in the Payments Hub. It can be the BBAN representation of the routing information of any UK bank account. Required.",
            "x-excluded-fields": [
              "id",
              "bank_id_code",
              "create_timestamp"
            ]
          },
          "scheme": {
            "type": "string",
            "description": "A scheme for which the routability of the BBAN will be checked. This can be either `FPS`, `BACS`, `CHAPS` or `ICS`. Optional.",
            "x-example-override": "FPS"
          }
        }
      },
      "ukValidateBBANResponse": {
        "type": "object",
        "properties": {
          "is_valid": {
            "type": "boolean",
            "description": "Indicates if the provided BBAN is valid. This will return true if the BBAN successfully passes modulus checking. Also, if requested, it will return true if the BBAN is routable via the provided scheme.",
            "x-example-override": "false"
          },
          "reason": {
            "type": "string",
            "description": "The reason why the BBAN validation succeeded or failed.",
            "x-example-override": "BBAN [123456/12345678] did not pass modulus checks"
          }
        }
      },
      "ukValidateIBANRequest": {
        "type": "object",
        "properties": {
          "iban": {
            "$ref": "#/components/schemas/ukIBAN",
            "description": "The IBAN to be validated. This does not need to be an IBAN resource present in the Payments Hub. It can be the IBAN representation of the routing information of any UK bank account. Required.",
            "x-excluded-fields": [
              "id",
              "bic",
              "bban_id",
              "create_timestamp"
            ]
          }
        }
      },
      "ukValidateIBANResponse": {
        "type": "object",
        "properties": {
          "is_valid": {
            "type": "boolean",
            "description": "Indicates if the provided IBAN is valid. This will return true if the IBAN successfully passes the structural validation and the Modulo97 algorithm.",
            "x-example-override": "false"
          },
          "reason": {
            "type": "string",
            "description": "The reason why the IBAN validation succeeded or failed.",
            "x-example-override": "failed Modulo97 validation"
          }
        }
      },
      "iban": {
        "type": "string",
        "description": "The International Bank Account Number (IBAN) is a unique identifier that contains information about the owner of a bank account such as the account number, bank and branch information and country code. Required if `routing_address` is not populated on creation."
      },
      "number_value": {
        "type": "string",
        "description": "Represents a double value."
      },
      "string_value": {
        "type": "string",
        "description": "Represents a string value."
      },
      "bool_value": {
        "type": "string",
        "description": "Represents a boolean value."
      },
      "direct_debit_id": {
        "type": "string",
        "description": "The ID of the [Direct Debit](/api/payments_hub_api/#Direct_Debits) in this `ClaimDirectDebitAssociation`, if the Direct Debit is present in Vault."
      },
      "returned_by_direct_debit_id": {
        "type": "string",
        "description": "Unique identifier of the resource in the Payments Hub (UUID)."
      },
      "reversed_by_direct_debit_id": {
        "type": "string",
        "description": "Unique identifier of the resource in the Payments Hub (UUID)."
      },
      "refunded_by_claim_id": {
        "type": "string",
        "description": "Unique identifier of the resource in the Payments Hub (UUID)."
      },
      "code": {
        "type": "string",
        "description": "The purpose expressed in a standard form (the ISO20022 ExternalPurpose1Code format is recommended). It must be an alphanumerical string between one to four characters long."
      },
      "proprietary": {
        "type": "string",
        "description": "The purpose expressed in a proprietary form. It must be an alphanumerical string between one to 35 characters long."
      },
      "amount": {
        "type": "string",
        "description": "A delta amount. The sign of the delta can be given explicitly (`\"+3.40\"`, `\"-20\"`) or implicitly if it is positive (e.g \"3.40\" is the same as \"+3.40\")."
      },
      "replacement_amount": {
        "type": "string",
        "description": "A new amount, to replace the existing authorised amount."
      },
      "payment_device_token": {
        "type": "string",
        "description": "A payment device token that uniquely identifies a payment device link based on the value_timestamp of the posting instruction. When the target_account is specified via the token, Vault will resolve the token to a Vault account and the account_id will be returned in the posting instruction target_account_id field."
      },
      "account_id": {
        "type": "string",
        "description": "The ID of an account in Vault."
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Auth-Token"
      }
    },
    "requestBodies": {
      "bank_accountsCreateBankAccountRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/bank_accountsCreateBankAccountRequest"
            }
          }
        }
      },
      "bank_accountsUpdateBankAccountRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/bank_accountsUpdateBankAccountRequest"
            }
          }
        }
      },
      "claim_actionsUpdateClaimActionRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/claim_actionsUpdateClaimActionRequest"
            }
          }
        }
      },
      "claim_direct_debit_associationCreateClaimDirectDebitAssociationRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/claim_direct_debit_associationCreateClaimDirectDebitAssociationRequest"
            }
          }
        }
      },
      "claim_reversal_actionsUpdateClaimReversalActionRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/claim_reversal_actionsUpdateClaimReversalActionRequest"
            }
          }
        }
      },
      "claim_reversalsCreateClaimReversalRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/claim_reversalsCreateClaimReversalRequest"
            }
          }
        }
      },
      "claimsCreateClaimRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/claimsCreateClaimRequest"
            }
          }
        }
      },
      "claimsUpdateClaimRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/claimsUpdateClaimRequest"
            }
          }
        }
      },
      "claimsInitiateClaimRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/claimsInitiateClaimRequest"
            }
          }
        }
      },
      "direct_debit_actionsUpdateDirectDebitActionRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/direct_debit_actionsUpdateDirectDebitActionRequest"
            }
          }
        }
      },
      "direct_debitsCreateDirectDebitRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/direct_debitsCreateDirectDebitRequest"
            }
          }
        }
      },
      "direct_debitsInitiateDirectDebitRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/direct_debitsInitiateDirectDebitRequest"
            }
          }
        }
      },
      "filesCreateFileVersionRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/filesCreateFileVersionRequest"
            }
          }
        }
      },
      "filesUpdateFileVersionRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/filesUpdateFileVersionRequest"
            }
          }
        }
      },
      "filesCreateFileRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/filesCreateFileRequest"
            }
          }
        }
      },
      "filesUpdateFileRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/filesUpdateFileRequest"
            }
          }
        }
      },
      "mandate_actionsUpdateMandateActionRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/mandate_actionsUpdateMandateActionRequest"
            }
          }
        }
      },
      "mandatesCreateMandateRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/mandatesCreateMandateRequest"
            }
          }
        }
      },
      "mandatesUpdateMandateRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/mandatesUpdateMandateRequest"
            }
          }
        }
      },
      "payment_actionsUpdatePaymentActionRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payment_actionsUpdatePaymentActionRequest"
            }
          }
        }
      },
      "payment_reversalsCreatePaymentReversalRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payment_reversalsCreatePaymentReversalRequest"
            }
          }
        }
      },
      "paymentsCreatePaymentRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paymentsCreatePaymentRequest"
            }
          }
        }
      },
      "paymentsUpdatePaymentRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paymentsUpdatePaymentRequest"
            }
          }
        }
      },
      "paymentsInitiatePaymentRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paymentsInitiatePaymentRequest"
            }
          }
        }
      },
      "scheduled_payment_actionsUpdateFuturePaymentInstructionActionRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/scheduled_payment_actionsUpdateFuturePaymentInstructionActionRequest"
            }
          }
        }
      },
      "scheduled_payment_actionsUpdateStandingOrderInstructionActionRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/scheduled_payment_actionsUpdateStandingOrderInstructionActionRequest"
            }
          }
        }
      },
      "scheduled_paymentsCreateFuturePaymentInstructionRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/scheduled_paymentsCreateFuturePaymentInstructionRequest"
            }
          }
        }
      },
      "scheduled_paymentsUpdateFuturePaymentInstructionRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/scheduled_paymentsUpdateFuturePaymentInstructionRequest"
            }
          }
        }
      },
      "scheduled_paymentsActivateFuturePaymentInstructionRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/scheduled_paymentsActivateFuturePaymentInstructionRequest"
            }
          }
        }
      },
      "scheduled_paymentsCreateStandingOrderInstructionRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/scheduled_paymentsCreateStandingOrderInstructionRequest"
            }
          }
        }
      },
      "scheduled_paymentsActivateStandingOrderInstructionRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/scheduled_paymentsActivateStandingOrderInstructionRequest"
            }
          }
        }
      },
      "scheduled_paymentsUpdateStandingOrderInstructionRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/scheduled_paymentsUpdateStandingOrderInstructionRequest"
            }
          }
        }
      },
      "scheme_messagesCreateSchemeMessageRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/scheme_messagesCreateSchemeMessageRequest"
            }
          }
        }
      },
      "schemesCreateCalendarOperationConfigRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemesCreateCalendarOperationConfigRequest"
            }
          }
        }
      },
      "schemesCreateSchemeConfigRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemesCreateSchemeConfigRequest"
            }
          }
        }
      },
      "schemesCreateSchemeRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemesCreateSchemeRequest"
            }
          }
        }
      },
      "schemesUpdateSchemeRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemesUpdateSchemeRequest"
            }
          }
        }
      },
      "ukValidateIBANRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ukValidateIBANRequest"
            }
          }
        }
      },
      "ukCreateBBANRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ukCreateBBANRequest"
            }
          }
        }
      },
      "ukValidateBBANRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ukValidateBBANRequest"
            }
          }
        }
      },
      "ukCreateIBANRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ukCreateIBANRequest"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}